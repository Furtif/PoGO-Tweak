// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Enums.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum ActivityType

typedef GPB_ENUM(ActivityType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  ActivityType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  ActivityType_ActivityUnknown = 0,
  ActivityType_ActivityCatchPokemon = 1,
  ActivityType_ActivityCatchLegendPokemon = 2,
  ActivityType_ActivityFleePokemon = 3,
  ActivityType_ActivityDefeatFort = 4,
  ActivityType_ActivityEvolvePokemon = 5,
  ActivityType_ActivityHatchEgg = 6,
  ActivityType_ActivityWalkKm = 7,
  ActivityType_ActivityPokedexEntryNew = 8,
  ActivityType_ActivityCatchFirstThrow = 9,
  ActivityType_ActivityCatchNiceThrow = 10,
  ActivityType_ActivityCatchGreatThrow = 11,
  ActivityType_ActivityCatchExcellentThrow = 12,
  ActivityType_ActivityCatchCurveball = 13,
  ActivityType_ActivityCatchFirstCatchOfDay = 14,
  ActivityType_ActivityCatchMilestone = 15,
  ActivityType_ActivityTrainPokemon = 16,
  ActivityType_ActivitySearchFort = 17,
  ActivityType_ActivityReleasePokemon = 18,
  ActivityType_ActivityHatchEggSmallBonus = 19,
  ActivityType_ActivityHatchEggMediumBonus = 20,
  ActivityType_ActivityHatchEggLargeBonus = 21,
  ActivityType_ActivityDefeatGymDefender = 22,
  ActivityType_ActivityDefeatGymLeader = 23,
  ActivityType_ActivityCatchFirstCatchStreakBonus = 24,
  ActivityType_ActivitySearchFortFirstOfTheDay = 25,
  ActivityType_ActivitySearchFortStreakBonus = 26,
  ActivityType_ActivityDefeatRaidPokemon = 27,
  ActivityType_ActivityFeedBerry = 28,
  ActivityType_ActivitySearchGym = 29,
  ActivityType_ActivityNewPokestop = 30,
  ActivityType_ActivityGymBattleLoss = 31,
};

GPBEnumDescriptor *ActivityType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ActivityType_IsValidValue(int32_t value);

#pragma mark - Enum BadgeType

typedef GPB_ENUM(BadgeType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  BadgeType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  BadgeType_BadgeUnset = 0,
  BadgeType_BadgeTravelKm = 1,
  BadgeType_BadgePokedexEntries = 2,
  BadgeType_BadgeCaptureTotal = 3,
  BadgeType_BadgeDefeatedFort = 4,
  BadgeType_BadgeEvolvedTotal = 5,
  BadgeType_BadgeHatchedTotal = 6,
  BadgeType_BadgeEncounteredTotal = 7,
  BadgeType_BadgePokestopsVisited = 8,
  BadgeType_BadgeUniquePokestops = 9,
  BadgeType_BadgePokeballThrown = 10,
  BadgeType_BadgeBigMagikarp = 11,
  BadgeType_BadgeDeployedTotal = 12,
  BadgeType_BadgeBattleAttackWon = 13,
  BadgeType_BadgeBattleTrainingWon = 14,
  BadgeType_BadgeBattleDefendWon = 15,
  BadgeType_BadgePrestigeRaised = 16,
  BadgeType_BadgePrestigeDropped = 17,
  BadgeType_BadgeTypeNormal = 18,
  BadgeType_BadgeTypeFighting = 19,
  BadgeType_BadgeTypeFlying = 20,
  BadgeType_BadgeTypePoison = 21,
  BadgeType_BadgeTypeGround = 22,
  BadgeType_BadgeTypeRock = 23,
  BadgeType_BadgeTypeBug = 24,
  BadgeType_BadgeTypeGhost = 25,
  BadgeType_BadgeTypeSteel = 26,
  BadgeType_BadgeTypeFire = 27,
  BadgeType_BadgeTypeWater = 28,
  BadgeType_BadgeTypeGrass = 29,
  BadgeType_BadgeTypeElectric = 30,
  BadgeType_BadgeTypePsychic = 31,
  BadgeType_BadgeTypeIce = 32,
  BadgeType_BadgeTypeDragon = 33,
  BadgeType_BadgeTypeDark = 34,
  BadgeType_BadgeTypeFairy = 35,
  BadgeType_BadgeSmallRattata = 36,
  BadgeType_BadgePikachu = 37,
  BadgeType_BadgeUnown = 38,
  BadgeType_BadgePokedexEntriesGen2 = 39,
  BadgeType_BadgeRaidBattleWon = 40,
  BadgeType_BadgeLegendaryBattleWon = 41,
  BadgeType_BadgeBerriesFed = 42,
  BadgeType_BadgeHoursDefended = 43,
  BadgeType_BadgePlaceHolder = 44,
  BadgeType_BadgeEventMin = 2000,
  BadgeType_BadgeChicagoFestJuly2017 = 2001,
  BadgeType_BadgePikachuOutbreakYokohama2017 = 2002,
};

GPBEnumDescriptor *BadgeType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL BadgeType_IsValidValue(int32_t value);

#pragma mark - Enum CameraInterpolation

typedef GPB_ENUM(CameraInterpolation) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  CameraInterpolation_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  CameraInterpolation_CamInterpCut = 0,
  CameraInterpolation_CamInterpLinear = 1,
  CameraInterpolation_CamInterpSmooth = 2,
  CameraInterpolation_CamInterpSmoothRotLinearMove = 3,
  CameraInterpolation_CamInterpDepends = 4,
};

GPBEnumDescriptor *CameraInterpolation_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL CameraInterpolation_IsValidValue(int32_t value);

#pragma mark - Enum CameraTarget

typedef GPB_ENUM(CameraTarget) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  CameraTarget_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  CameraTarget_CamTargetAttacker = 0,
  CameraTarget_CamTargetAttackerEdge = 1,
  CameraTarget_CamTargetAttackerGround = 2,
  CameraTarget_CamTargetDefender = 3,
  CameraTarget_CamTargetDefenderEdge = 4,
  CameraTarget_CamTargetDefenderGround = 5,
  CameraTarget_CamTargetAttackerDefender = 6,
  CameraTarget_CamTargetAttackerDefenderEdge = 7,
  CameraTarget_CamTargetDefenderAttacker = 8,
  CameraTarget_CamTargetDefenderAttackerEdge = 9,
  CameraTarget_CamTargetAttackerDefenderMirror = 11,
  CameraTarget_CamTargetShoulderAttackerDefender = 12,
  CameraTarget_CamTargetShoulderAttackerDefenderMirror = 13,
  CameraTarget_CamTargetAttackerDefenderWorld = 14,
};

GPBEnumDescriptor *CameraTarget_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL CameraTarget_IsValidValue(int32_t value);

#pragma mark - Enum Costume

typedef GPB_ENUM(Costume) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Costume_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Costume_CostumeUnset = 0,
  Costume_Holiday2016 = 1,
  Costume_Anniversary = 2,
  Costume_OneYearAnniversary = 3,
};

GPBEnumDescriptor *Costume_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Costume_IsValidValue(int32_t value);

#pragma mark - Enum EncounterType

typedef GPB_ENUM(EncounterType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  EncounterType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  EncounterType_SpawnPoint = 0,
  EncounterType_Incense = 1,
  EncounterType_Disk = 2,
  EncounterType_PostRaid = 3,
};

GPBEnumDescriptor *EncounterType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL EncounterType_IsValidValue(int32_t value);

#pragma mark - Enum Filter

typedef GPB_ENUM(Filter) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Filter_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Filter_UnsetFilter = 0,
  Filter_All = 1,
  Filter_Default = 2,
  Filter_Owned = 3,
  Filter_Featured = 4,
  Filter_Purchasable = 5,
  Filter_Unlockable = 6,
};

GPBEnumDescriptor *Filter_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Filter_IsValidValue(int32_t value);

#pragma mark - Enum Form

typedef GPB_ENUM(Form) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Form_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Form_FormUnset = 0,
  Form_UnownA = 1,
  Form_UnownB = 2,
  Form_UnownC = 3,
  Form_UnownD = 4,
  Form_UnownE = 5,
  Form_UnownF = 6,
  Form_UnownG = 7,
  Form_UnownH = 8,
  Form_UnownI = 9,
  Form_UnownJ = 10,
  Form_UnownK = 11,
  Form_UnownL = 12,
  Form_UnownM = 13,
  Form_UnownN = 14,
  Form_UnownO = 15,
  Form_UnownP = 16,
  Form_UnownQ = 17,
  Form_UnownR = 18,
  Form_UnownS = 19,
  Form_UnownT = 20,
  Form_UnownU = 21,
  Form_UnownV = 22,
  Form_UnownW = 23,
  Form_UnownX = 24,
  Form_UnownY = 25,
  Form_UnownZ = 26,
  Form_UnownExclamationPoint = 27,
  Form_UnownQuestionMark = 28,
};

GPBEnumDescriptor *Form_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Form_IsValidValue(int32_t value);

#pragma mark - Enum Gender

typedef GPB_ENUM(Gender) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Gender_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Gender_GenderUnset = 0,
  Gender_Male = 1,
  Gender_Female = 2,
  Gender_Genderless = 3,
};

GPBEnumDescriptor *Gender_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Gender_IsValidValue(int32_t value);

#pragma mark - Enum GymBadgeType

typedef GPB_ENUM(GymBadgeType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  GymBadgeType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  GymBadgeType_GymBadgeUnset = 0,
  GymBadgeType_GymBadgeVanilla = 1,
  GymBadgeType_GymBadgeBronze = 2,
  GymBadgeType_GymBadgeSilver = 3,
  GymBadgeType_GymBadgeGold = 4,
};

GPBEnumDescriptor *GymBadgeType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL GymBadgeType_IsValidValue(int32_t value);

#pragma mark - Enum HoloIapItemCategory

typedef GPB_ENUM(HoloIapItemCategory) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  HoloIapItemCategory_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  HoloIapItemCategory_IapCategoryNone = 0,
  HoloIapItemCategory_IapCategoryBundle = 1,
  HoloIapItemCategory_IapCategoryItems = 2,
  HoloIapItemCategory_IapCategoryUpgrades = 3,
  HoloIapItemCategory_IapCategoryPokecoins = 4,
  HoloIapItemCategory_IapCategoryAvatar = 5,
};

GPBEnumDescriptor *HoloIapItemCategory_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL HoloIapItemCategory_IsValidValue(int32_t value);

#pragma mark - Enum ItemCategory

typedef GPB_ENUM(ItemCategory) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  ItemCategory_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  ItemCategory_ItemCategoryNone = 0,
  ItemCategory_ItemCategoryPokeball = 1,
  ItemCategory_ItemCategoryFood = 2,
  ItemCategory_ItemCategoryMedicine = 3,
  ItemCategory_ItemCategoryBoost = 4,
  ItemCategory_ItemCategoryUtilites = 5,
  ItemCategory_ItemCategoryCamera = 6,
  ItemCategory_ItemCategoryDisk = 7,
  ItemCategory_ItemCategoryIncubator = 8,
  ItemCategory_ItemCategoryIncense = 9,
  ItemCategory_ItemCategoryXpBoost = 10,
  ItemCategory_ItemCategoryInventoryUpgrade = 11,
  ItemCategory_ItemCategoryEvolutionRequirement = 12,
  ItemCategory_ItemCategoryMoveReroll = 13,
  ItemCategory_ItemCategoryCandy = 14,
  ItemCategory_ItemCategoryRaidTicket = 15,
};

GPBEnumDescriptor *ItemCategory_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ItemCategory_IsValidValue(int32_t value);

#pragma mark - Enum ItemEffect

typedef GPB_ENUM(ItemEffect) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  ItemEffect_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  ItemEffect_ItemEffectNone = 0,
  ItemEffect_ItemEffectCapNoFlee = 1000,
  ItemEffect_ItemEffectCapNoMovement = 1002,
  ItemEffect_ItemEffectCapNoThreat = 1003,
  ItemEffect_ItemEffectCapTargetMax = 1004,
  ItemEffect_ItemEffectCapTargetSlow = 1005,
  ItemEffect_ItemEffectCapChanceNight = 1006,
  ItemEffect_ItemEffectCapChanceTrainer = 1007,
  ItemEffect_ItemEffectCapChanceFirstThrow = 1008,
  ItemEffect_ItemEffectCapChanceLegend = 1009,
  ItemEffect_ItemEffectCapChanceHeavy = 1010,
  ItemEffect_ItemEffectCapChanceRepeat = 1011,
  ItemEffect_ItemEffectCapChanceMultiThrow = 1012,
  ItemEffect_ItemEffectCapChanceAlways = 1013,
  ItemEffect_ItemEffectCapChanceSingleThrow = 1014,
  ItemEffect_ItemEffectCandyAward = 1015,
  ItemEffect_ItemEffectFullMotivation = 1016,
};

GPBEnumDescriptor *ItemEffect_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ItemEffect_IsValidValue(int32_t value);

#pragma mark - Enum NotificationCategory

typedef GPB_ENUM(NotificationCategory) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  NotificationCategory_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  NotificationCategory_UnsetNotificationCategory = 0,
  NotificationCategory_GymRemoval = 1,
  NotificationCategory_PokemonHungry = 2,
  NotificationCategory_PokemonWon = 3,
  NotificationCategory_ExclusiveRaidInvite = 4,
};

GPBEnumDescriptor *NotificationCategory_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL NotificationCategory_IsValidValue(int32_t value);

#pragma mark - Enum NotificationState

typedef GPB_ENUM(NotificationState) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  NotificationState_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  NotificationState_UnsetState = 0,
  NotificationState_Viewed = 1,
};

GPBEnumDescriptor *NotificationState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL NotificationState_IsValidValue(int32_t value);

#pragma mark - Enum Platform

typedef GPB_ENUM(Platform) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Platform_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Platform_Unset = 0,
  Platform_Ios = 1,
  Platform_Android = 2,
  Platform_Osx = 3,
  Platform_Windows = 4,
  Platform_AppleWatch = 5,
};

GPBEnumDescriptor *Platform_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Platform_IsValidValue(int32_t value);

#pragma mark - Enum PokemonFamilyId

typedef GPB_ENUM(PokemonFamilyId) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PokemonFamilyId_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PokemonFamilyId_FamilyUnset = 0,
  PokemonFamilyId_FamilyBulbasaur = 1,
  PokemonFamilyId_FamilyCharmander = 4,
  PokemonFamilyId_FamilySquirtle = 7,
  PokemonFamilyId_FamilyCaterpie = 10,
  PokemonFamilyId_FamilyWeedle = 13,
  PokemonFamilyId_FamilyPidgey = 16,
  PokemonFamilyId_FamilyRattata = 19,
  PokemonFamilyId_FamilySpearow = 21,
  PokemonFamilyId_FamilyEkans = 23,
  PokemonFamilyId_FamilyPikachu = 25,
  PokemonFamilyId_FamilySandshrew = 27,
  PokemonFamilyId_FamilyNidoranFemale = 29,
  PokemonFamilyId_FamilyNidoranMale = 32,
  PokemonFamilyId_FamilyClefairy = 35,
  PokemonFamilyId_FamilyVulpix = 37,
  PokemonFamilyId_FamilyJigglypuff = 39,
  PokemonFamilyId_FamilyZubat = 41,
  PokemonFamilyId_FamilyOddish = 43,
  PokemonFamilyId_FamilyParas = 46,
  PokemonFamilyId_FamilyVenonat = 48,
  PokemonFamilyId_FamilyDiglett = 50,
  PokemonFamilyId_FamilyMeowth = 52,
  PokemonFamilyId_FamilyPsyduck = 54,
  PokemonFamilyId_FamilyMankey = 56,
  PokemonFamilyId_FamilyGrowlithe = 58,
  PokemonFamilyId_FamilyPoliwag = 60,
  PokemonFamilyId_FamilyAbra = 63,
  PokemonFamilyId_FamilyMachop = 66,
  PokemonFamilyId_FamilyBellsprout = 69,
  PokemonFamilyId_FamilyTentacool = 72,
  PokemonFamilyId_FamilyGeodude = 74,
  PokemonFamilyId_FamilyPonyta = 77,
  PokemonFamilyId_FamilySlowpoke = 79,
  PokemonFamilyId_FamilyMagnemite = 81,
  PokemonFamilyId_FamilyFarfetchd = 83,
  PokemonFamilyId_FamilyDoduo = 84,
  PokemonFamilyId_FamilySeel = 86,
  PokemonFamilyId_FamilyGrimer = 88,
  PokemonFamilyId_FamilyShellder = 90,
  PokemonFamilyId_FamilyGastly = 92,
  PokemonFamilyId_FamilyOnix = 95,
  PokemonFamilyId_FamilyDrowzee = 96,
  PokemonFamilyId_FamilyHypno = 97,
  PokemonFamilyId_FamilyKrabby = 98,
  PokemonFamilyId_FamilyVoltorb = 100,
  PokemonFamilyId_FamilyExeggcute = 102,
  PokemonFamilyId_FamilyCubone = 104,
  PokemonFamilyId_FamilyHitmonlee = 106,
  PokemonFamilyId_FamilyHitmonchan = 107,
  PokemonFamilyId_FamilyLickitung = 108,
  PokemonFamilyId_FamilyKoffing = 109,
  PokemonFamilyId_FamilyRhyhorn = 111,
  PokemonFamilyId_FamilyChansey = 113,
  PokemonFamilyId_FamilyTangela = 114,
  PokemonFamilyId_FamilyKangaskhan = 115,
  PokemonFamilyId_FamilyHorsea = 116,
  PokemonFamilyId_FamilyGoldeen = 118,
  PokemonFamilyId_FamilyStaryu = 120,
  PokemonFamilyId_FamilyMrMime = 122,
  PokemonFamilyId_FamilyScyther = 123,
  PokemonFamilyId_FamilyJynx = 124,
  PokemonFamilyId_FamilyElectabuzz = 125,
  PokemonFamilyId_FamilyMagmar = 126,
  PokemonFamilyId_FamilyPinsir = 127,
  PokemonFamilyId_FamilyTauros = 128,
  PokemonFamilyId_FamilyMagikarp = 129,
  PokemonFamilyId_FamilyLapras = 131,
  PokemonFamilyId_FamilyDitto = 132,
  PokemonFamilyId_FamilyEevee = 133,
  PokemonFamilyId_FamilyPorygon = 137,
  PokemonFamilyId_FamilyOmanyte = 138,
  PokemonFamilyId_FamilyKabuto = 140,
  PokemonFamilyId_FamilyAerodactyl = 142,
  PokemonFamilyId_FamilySnorlax = 143,
  PokemonFamilyId_FamilyArticuno = 144,
  PokemonFamilyId_FamilyZapdos = 145,
  PokemonFamilyId_FamilyMoltres = 146,
  PokemonFamilyId_FamilyDratini = 147,
  PokemonFamilyId_FamilyMewtwo = 150,
  PokemonFamilyId_FamilyMew = 151,
  PokemonFamilyId_FamilyChikorita = 152,
  PokemonFamilyId_FamilyCyndaquil = 155,
  PokemonFamilyId_FamilyTotodile = 158,
  PokemonFamilyId_FamilySentret = 161,
  PokemonFamilyId_FamilyHoothoot = 163,
  PokemonFamilyId_FamilyLedyba = 165,
  PokemonFamilyId_FamilySpinarak = 167,
  PokemonFamilyId_FamilyChinchou = 170,
  PokemonFamilyId_FamilyTogepi = 175,
  PokemonFamilyId_FamilyNatu = 177,
  PokemonFamilyId_FamilyMareep = 179,
  PokemonFamilyId_FamilyMarill = 183,
  PokemonFamilyId_FamilySudowoodo = 185,
  PokemonFamilyId_FamilyHoppip = 187,
  PokemonFamilyId_FamilyAipom = 190,
  PokemonFamilyId_FamilySunkern = 191,
  PokemonFamilyId_FamilyYanma = 193,
  PokemonFamilyId_FamilyWooper = 194,
  PokemonFamilyId_FamilyMurkrow = 198,
  PokemonFamilyId_FamilyMisdreavus = 200,
  PokemonFamilyId_FamilyUnown = 201,
  PokemonFamilyId_FamilyWobbuffet = 202,
  PokemonFamilyId_FamilyGirafarig = 203,
  PokemonFamilyId_FamilyPineco = 204,
  PokemonFamilyId_FamilyDunsparce = 206,
  PokemonFamilyId_FamilyGligar = 207,
  PokemonFamilyId_FamilySnubbull = 209,
  PokemonFamilyId_FamilyQwilfish = 211,
  PokemonFamilyId_FamilyShuckle = 213,
  PokemonFamilyId_FamilyHeracross = 214,
  PokemonFamilyId_FamilySneasel = 215,
  PokemonFamilyId_FamilyTeddiursa = 216,
  PokemonFamilyId_FamilySlugma = 218,
  PokemonFamilyId_FamilySwinub = 220,
  PokemonFamilyId_FamilyCorsola = 222,
  PokemonFamilyId_FamilyRemoraid = 223,
  PokemonFamilyId_FamilyDelibird = 225,
  PokemonFamilyId_FamilyMantine = 226,
  PokemonFamilyId_FamilySkarmory = 227,
  PokemonFamilyId_FamilyHoundour = 228,
  PokemonFamilyId_FamilyPhanpy = 231,
  PokemonFamilyId_FamilyStantler = 234,
  PokemonFamilyId_FamilySmeargle = 235,
  PokemonFamilyId_FamilyTyrogue = 236,
  PokemonFamilyId_FamilyMiltank = 241,
  PokemonFamilyId_FamilyRaikou = 243,
  PokemonFamilyId_FamilyEntei = 244,
  PokemonFamilyId_FamilySuicune = 245,
  PokemonFamilyId_FamilyLarvitar = 246,
  PokemonFamilyId_FamilyLugia = 249,
  PokemonFamilyId_FamilyHoOh = 250,
  PokemonFamilyId_FamilyCelebi = 251,
};

GPBEnumDescriptor *PokemonFamilyId_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PokemonFamilyId_IsValidValue(int32_t value);

#pragma mark - Enum PokemonId

typedef GPB_ENUM(PokemonId) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PokemonId_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PokemonId_Missingno = 0,
  PokemonId_Bulbasaur = 1,
  PokemonId_Ivysaur = 2,
  PokemonId_Venusaur = 3,
  PokemonId_Charmander = 4,
  PokemonId_Charmeleon = 5,
  PokemonId_Charizard = 6,
  PokemonId_Squirtle = 7,
  PokemonId_Wartortle = 8,
  PokemonId_Blastoise = 9,
  PokemonId_Caterpie = 10,
  PokemonId_Metapod = 11,
  PokemonId_Butterfree = 12,
  PokemonId_Weedle = 13,
  PokemonId_Kakuna = 14,
  PokemonId_Beedrill = 15,
  PokemonId_Pidgey = 16,
  PokemonId_Pidgeotto = 17,
  PokemonId_Pidgeot = 18,
  PokemonId_Rattata = 19,
  PokemonId_Raticate = 20,
  PokemonId_Spearow = 21,
  PokemonId_Fearow = 22,
  PokemonId_Ekans = 23,
  PokemonId_Arbok = 24,
  PokemonId_Pikachu = 25,
  PokemonId_Raichu = 26,
  PokemonId_Sandshrew = 27,
  PokemonId_Sandslash = 28,
  PokemonId_NidoranFemale = 29,
  PokemonId_Nidorina = 30,
  PokemonId_Nidoqueen = 31,
  PokemonId_NidoranMale = 32,
  PokemonId_Nidorino = 33,
  PokemonId_Nidoking = 34,
  PokemonId_Clefairy = 35,
  PokemonId_Clefable = 36,
  PokemonId_Vulpix = 37,
  PokemonId_Ninetales = 38,
  PokemonId_Jigglypuff = 39,
  PokemonId_Wigglytuff = 40,
  PokemonId_Zubat = 41,
  PokemonId_Golbat = 42,
  PokemonId_Oddish = 43,
  PokemonId_Gloom = 44,
  PokemonId_Vileplume = 45,
  PokemonId_Paras = 46,
  PokemonId_Parasect = 47,
  PokemonId_Venonat = 48,
  PokemonId_Venomoth = 49,
  PokemonId_Diglett = 50,
  PokemonId_Dugtrio = 51,
  PokemonId_Meowth = 52,
  PokemonId_Persian = 53,
  PokemonId_Psyduck = 54,
  PokemonId_Golduck = 55,
  PokemonId_Mankey = 56,
  PokemonId_Primeape = 57,
  PokemonId_Growlithe = 58,
  PokemonId_Arcanine = 59,
  PokemonId_Poliwag = 60,
  PokemonId_Poliwhirl = 61,
  PokemonId_Poliwrath = 62,
  PokemonId_Abra = 63,
  PokemonId_Kadabra = 64,
  PokemonId_Alakazam = 65,
  PokemonId_Machop = 66,
  PokemonId_Machoke = 67,
  PokemonId_Machamp = 68,
  PokemonId_Bellsprout = 69,
  PokemonId_Weepinbell = 70,
  PokemonId_Victreebel = 71,
  PokemonId_Tentacool = 72,
  PokemonId_Tentacruel = 73,
  PokemonId_Geodude = 74,
  PokemonId_Graveler = 75,
  PokemonId_Golem = 76,
  PokemonId_Ponyta = 77,
  PokemonId_Rapidash = 78,
  PokemonId_Slowpoke = 79,
  PokemonId_Slowbro = 80,
  PokemonId_Magnemite = 81,
  PokemonId_Magneton = 82,
  PokemonId_Farfetchd = 83,
  PokemonId_Doduo = 84,
  PokemonId_Dodrio = 85,
  PokemonId_Seel = 86,
  PokemonId_Dewgong = 87,
  PokemonId_Grimer = 88,
  PokemonId_Muk = 89,
  PokemonId_Shellder = 90,
  PokemonId_Cloyster = 91,
  PokemonId_Gastly = 92,
  PokemonId_Haunter = 93,
  PokemonId_Gengar = 94,
  PokemonId_Onix = 95,
  PokemonId_Drowzee = 96,
  PokemonId_Hypno = 97,
  PokemonId_Krabby = 98,
  PokemonId_Kingler = 99,
  PokemonId_Voltorb = 100,
  PokemonId_Electrode = 101,
  PokemonId_Exeggcute = 102,
  PokemonId_Exeggutor = 103,
  PokemonId_Cubone = 104,
  PokemonId_Marowak = 105,
  PokemonId_Hitmonlee = 106,
  PokemonId_Hitmonchan = 107,
  PokemonId_Lickitung = 108,
  PokemonId_Koffing = 109,
  PokemonId_Weezing = 110,
  PokemonId_Rhyhorn = 111,
  PokemonId_Rhydon = 112,
  PokemonId_Chansey = 113,
  PokemonId_Tangela = 114,
  PokemonId_Kangaskhan = 115,
  PokemonId_Horsea = 116,
  PokemonId_Seadra = 117,
  PokemonId_Goldeen = 118,
  PokemonId_Seaking = 119,
  PokemonId_Staryu = 120,
  PokemonId_Starmie = 121,
  PokemonId_MrMime = 122,
  PokemonId_Scyther = 123,
  PokemonId_Jynx = 124,
  PokemonId_Electabuzz = 125,
  PokemonId_Magmar = 126,
  PokemonId_Pinsir = 127,
  PokemonId_Tauros = 128,
  PokemonId_Magikarp = 129,
  PokemonId_Gyarados = 130,
  PokemonId_Lapras = 131,
  PokemonId_Ditto = 132,
  PokemonId_Eevee = 133,
  PokemonId_Vaporeon = 134,
  PokemonId_Jolteon = 135,
  PokemonId_Flareon = 136,
  PokemonId_Porygon = 137,
  PokemonId_Omanyte = 138,
  PokemonId_Omastar = 139,
  PokemonId_Kabuto = 140,
  PokemonId_Kabutops = 141,
  PokemonId_Aerodactyl = 142,
  PokemonId_Snorlax = 143,
  PokemonId_Articuno = 144,
  PokemonId_Zapdos = 145,
  PokemonId_Moltres = 146,
  PokemonId_Dratini = 147,
  PokemonId_Dragonair = 148,
  PokemonId_Dragonite = 149,
  PokemonId_Mewtwo = 150,
  PokemonId_Mew = 151,
  PokemonId_Chikorita = 152,
  PokemonId_Bayleef = 153,
  PokemonId_Meganium = 154,
  PokemonId_Cyndaquil = 155,
  PokemonId_Quilava = 156,
  PokemonId_Typhlosion = 157,
  PokemonId_Totodile = 158,
  PokemonId_Croconaw = 159,
  PokemonId_Feraligatr = 160,
  PokemonId_Sentret = 161,
  PokemonId_Furret = 162,
  PokemonId_Hoothoot = 163,
  PokemonId_Noctowl = 164,
  PokemonId_Ledyba = 165,
  PokemonId_Ledian = 166,
  PokemonId_Spinarak = 167,
  PokemonId_Ariados = 168,
  PokemonId_Crobat = 169,
  PokemonId_Chinchou = 170,
  PokemonId_Lanturn = 171,
  PokemonId_Pichu = 172,
  PokemonId_Cleffa = 173,
  PokemonId_Igglybuff = 174,
  PokemonId_Togepi = 175,
  PokemonId_Togetic = 176,
  PokemonId_Natu = 177,
  PokemonId_Xatu = 178,
  PokemonId_Mareep = 179,
  PokemonId_Flaaffy = 180,
  PokemonId_Ampharos = 181,
  PokemonId_Bellossom = 182,
  PokemonId_Marill = 183,
  PokemonId_Azumarill = 184,
  PokemonId_Sudowoodo = 185,
  PokemonId_Politoed = 186,
  PokemonId_Hoppip = 187,
  PokemonId_Skiploom = 188,
  PokemonId_Jumpluff = 189,
  PokemonId_Aipom = 190,
  PokemonId_Sunkern = 191,
  PokemonId_Sunflora = 192,
  PokemonId_Yanma = 193,
  PokemonId_Wooper = 194,
  PokemonId_Quagsire = 195,
  PokemonId_Espeon = 196,
  PokemonId_Umbreon = 197,
  PokemonId_Murkrow = 198,
  PokemonId_Slowking = 199,
  PokemonId_Misdreavus = 200,
  PokemonId_Unown = 201,
  PokemonId_Wobbuffet = 202,
  PokemonId_Girafarig = 203,
  PokemonId_Pineco = 204,
  PokemonId_Forretress = 205,
  PokemonId_Dunsparce = 206,
  PokemonId_Gligar = 207,
  PokemonId_Steelix = 208,
  PokemonId_Snubbull = 209,
  PokemonId_Granbull = 210,
  PokemonId_Qwilfish = 211,
  PokemonId_Scizor = 212,
  PokemonId_Shuckle = 213,
  PokemonId_Heracross = 214,
  PokemonId_Sneasel = 215,
  PokemonId_Teddiursa = 216,
  PokemonId_Ursaring = 217,
  PokemonId_Slugma = 218,
  PokemonId_Magcargo = 219,
  PokemonId_Swinub = 220,
  PokemonId_Piloswine = 221,
  PokemonId_Corsola = 222,
  PokemonId_Remoraid = 223,
  PokemonId_Octillery = 224,
  PokemonId_Delibird = 225,
  PokemonId_Mantine = 226,
  PokemonId_Skarmory = 227,
  PokemonId_Houndour = 228,
  PokemonId_Houndoom = 229,
  PokemonId_Kingdra = 230,
  PokemonId_Phanpy = 231,
  PokemonId_Donphan = 232,
  PokemonId_Porygon2 = 233,
  PokemonId_Stantler = 234,
  PokemonId_Smeargle = 235,
  PokemonId_Tyrogue = 236,
  PokemonId_Hitmontop = 237,
  PokemonId_Smoochum = 238,
  PokemonId_Elekid = 239,
  PokemonId_Magby = 240,
  PokemonId_Miltank = 241,
  PokemonId_Blissey = 242,
  PokemonId_Raikou = 243,
  PokemonId_Entei = 244,
  PokemonId_Suicune = 245,
  PokemonId_Larvitar = 246,
  PokemonId_Pupitar = 247,
  PokemonId_Tyranitar = 248,
  PokemonId_Lugia = 249,
  PokemonId_HoOh = 250,
  PokemonId_Celebi = 251,
};

GPBEnumDescriptor *PokemonId_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PokemonId_IsValidValue(int32_t value);

#pragma mark - Enum PokemonMove

typedef GPB_ENUM(PokemonMove) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PokemonMove_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PokemonMove_MoveUnset = 0,
  PokemonMove_ThunderShock = 1,
  PokemonMove_QuickAttack = 2,
  PokemonMove_Scratch = 3,
  PokemonMove_Ember = 4,
  PokemonMove_VineWhip = 5,
  PokemonMove_Tackle = 6,
  PokemonMove_RazorLeaf = 7,
  PokemonMove_TakeDown = 8,
  PokemonMove_WaterGun = 9,
  PokemonMove_Bite = 10,
  PokemonMove_Pound = 11,
  PokemonMove_DoubleSlap = 12,
  PokemonMove_Wrap = 13,
  PokemonMove_HyperBeam = 14,
  PokemonMove_Lick = 15,
  PokemonMove_DarkPulse = 16,
  PokemonMove_Smog = 17,
  PokemonMove_Sludge = 18,
  PokemonMove_MetalClaw = 19,
  PokemonMove_ViceGrip = 20,
  PokemonMove_FlameWheel = 21,
  PokemonMove_Megahorn = 22,
  PokemonMove_WingAttack = 23,
  PokemonMove_Flamethrower = 24,
  PokemonMove_SuckerPunch = 25,
  PokemonMove_Dig = 26,
  PokemonMove_LowKick = 27,
  PokemonMove_CrossChop = 28,
  PokemonMove_PsychoCut = 29,
  PokemonMove_Psybeam = 30,
  PokemonMove_Earthquake = 31,
  PokemonMove_StoneEdge = 32,
  PokemonMove_IcePunch = 33,
  PokemonMove_HeartStamp = 34,
  PokemonMove_Discharge = 35,
  PokemonMove_FlashCannon = 36,
  PokemonMove_Peck = 37,
  PokemonMove_DrillPeck = 38,
  PokemonMove_IceBeam = 39,
  PokemonMove_Blizzard = 40,
  PokemonMove_AirSlash = 41,
  PokemonMove_HeatWave = 42,
  PokemonMove_Twineedle = 43,
  PokemonMove_PoisonJab = 44,
  PokemonMove_AerialAce = 45,
  PokemonMove_DrillRun = 46,
  PokemonMove_PetalBlizzard = 47,
  PokemonMove_MegaDrain = 48,
  PokemonMove_BugBuzz = 49,
  PokemonMove_PoisonFang = 50,
  PokemonMove_NightSlash = 51,
  PokemonMove_Slash = 52,
  PokemonMove_BubbleBeam = 53,
  PokemonMove_Submission = 54,
  PokemonMove_KarateChop = 55,
  PokemonMove_LowSweep = 56,
  PokemonMove_AquaJet = 57,
  PokemonMove_AquaTail = 58,
  PokemonMove_SeedBomb = 59,
  PokemonMove_Psyshock = 60,
  PokemonMove_RockThrow = 61,
  PokemonMove_AncientPower = 62,
  PokemonMove_RockTomb = 63,
  PokemonMove_RockSlide = 64,
  PokemonMove_PowerGem = 65,
  PokemonMove_ShadowSneak = 66,
  PokemonMove_ShadowPunch = 67,
  PokemonMove_ShadowClaw = 68,
  PokemonMove_OminousWind = 69,
  PokemonMove_ShadowBall = 70,
  PokemonMove_BulletPunch = 71,
  PokemonMove_MagnetBomb = 72,
  PokemonMove_SteelWing = 73,
  PokemonMove_IronHead = 74,
  PokemonMove_ParabolicCharge = 75,
  PokemonMove_Spark = 76,
  PokemonMove_ThunderPunch = 77,
  PokemonMove_Thunder = 78,
  PokemonMove_Thunderbolt = 79,
  PokemonMove_Twister = 80,
  PokemonMove_DragonBreath = 81,
  PokemonMove_DragonPulse = 82,
  PokemonMove_DragonClaw = 83,
  PokemonMove_DisarmingVoice = 84,
  PokemonMove_DrainingKiss = 85,
  PokemonMove_DazzlingGleam = 86,
  PokemonMove_Moonblast = 87,
  PokemonMove_PlayRough = 88,
  PokemonMove_CrossPoison = 89,
  PokemonMove_SludgeBomb = 90,
  PokemonMove_SludgeWave = 91,
  PokemonMove_GunkShot = 92,
  PokemonMove_MudShot = 93,
  PokemonMove_BoneClub = 94,
  PokemonMove_Bulldoze = 95,
  PokemonMove_MudBomb = 96,
  PokemonMove_FuryCutter = 97,
  PokemonMove_BugBite = 98,
  PokemonMove_SignalBeam = 99,
  PokemonMove_XScissor = 100,
  PokemonMove_FlameCharge = 101,
  PokemonMove_FlameBurst = 102,
  PokemonMove_FireBlast = 103,
  PokemonMove_Brine = 104,
  PokemonMove_WaterPulse = 105,
  PokemonMove_Scald = 106,
  PokemonMove_HydroPump = 107,
  PokemonMove_Psychic = 108,
  PokemonMove_Psystrike = 109,
  PokemonMove_IceShard = 110,
  PokemonMove_IcyWind = 111,
  PokemonMove_FrostBreath = 112,
  PokemonMove_Absorb = 113,
  PokemonMove_GigaDrain = 114,
  PokemonMove_FirePunch = 115,
  PokemonMove_SolarBeam = 116,
  PokemonMove_LeafBlade = 117,
  PokemonMove_PowerWhip = 118,
  PokemonMove_Splash = 119,
  PokemonMove_Acid = 120,
  PokemonMove_AirCutter = 121,
  PokemonMove_Hurricane = 122,
  PokemonMove_BrickBreak = 123,
  PokemonMove_Cut = 124,
  PokemonMove_Swift = 125,
  PokemonMove_HornAttack = 126,
  PokemonMove_Stomp = 127,
  PokemonMove_Headbutt = 128,
  PokemonMove_HyperFang = 129,
  PokemonMove_Slam = 130,
  PokemonMove_BodySlam = 131,
  PokemonMove_Rest = 132,
  PokemonMove_Struggle = 133,
  PokemonMove_ScaldBlastoise = 134,
  PokemonMove_HydroPumpBlastoise = 135,
  PokemonMove_WrapGreen = 136,
  PokemonMove_WrapPink = 137,
  PokemonMove_FuryCutterFast = 200,
  PokemonMove_BugBiteFast = 201,
  PokemonMove_BiteFast = 202,
  PokemonMove_SuckerPunchFast = 203,
  PokemonMove_DragonBreathFast = 204,
  PokemonMove_ThunderShockFast = 205,
  PokemonMove_SparkFast = 206,
  PokemonMove_LowKickFast = 207,
  PokemonMove_KarateChopFast = 208,
  PokemonMove_EmberFast = 209,
  PokemonMove_WingAttackFast = 210,
  PokemonMove_PeckFast = 211,
  PokemonMove_LickFast = 212,
  PokemonMove_ShadowClawFast = 213,
  PokemonMove_VineWhipFast = 214,
  PokemonMove_RazorLeafFast = 215,
  PokemonMove_MudShotFast = 216,
  PokemonMove_IceShardFast = 217,
  PokemonMove_FrostBreathFast = 218,
  PokemonMove_QuickAttackFast = 219,
  PokemonMove_ScratchFast = 220,
  PokemonMove_TackleFast = 221,
  PokemonMove_PoundFast = 222,
  PokemonMove_CutFast = 223,
  PokemonMove_PoisonJabFast = 224,
  PokemonMove_AcidFast = 225,
  PokemonMove_PsychoCutFast = 226,
  PokemonMove_RockThrowFast = 227,
  PokemonMove_MetalClawFast = 228,
  PokemonMove_BulletPunchFast = 229,
  PokemonMove_WaterGunFast = 230,
  PokemonMove_SplashFast = 231,
  PokemonMove_WaterGunFastBlastoise = 232,
  PokemonMove_MudSlapFast = 233,
  PokemonMove_ZenHeadbuttFast = 234,
  PokemonMove_ConfusionFast = 235,
  PokemonMove_PoisonStingFast = 236,
  PokemonMove_BubbleFast = 237,
  PokemonMove_FeintAttackFast = 238,
  PokemonMove_SteelWingFast = 239,
  PokemonMove_FireFangFast = 240,
  PokemonMove_RockSmashFast = 241,
  PokemonMove_TransformFast = 242,
  PokemonMove_CounterFast = 243,
  PokemonMove_PowderSnowFast = 244,
  PokemonMove_CloseCombat = 245,
  PokemonMove_DynamicPunch = 246,
  PokemonMove_FocusBlast = 247,
  PokemonMove_AuroraBeam = 248,
  PokemonMove_ChargeBeamFast = 249,
  PokemonMove_VoltSwitchFast = 250,
  PokemonMove_WildCharge = 251,
  PokemonMove_ZapCannon = 252,
  PokemonMove_DragonTailFast = 253,
  PokemonMove_Avalanche = 254,
  PokemonMove_AirSlashFast = 255,
  PokemonMove_BraveBird = 256,
  PokemonMove_SkyAttack = 257,
  PokemonMove_SandTomb = 258,
  PokemonMove_RockBlast = 259,
  PokemonMove_InfestationFast = 260,
  PokemonMove_StruggleBugFast = 261,
  PokemonMove_SilverWind = 262,
  PokemonMove_AstonishFast = 263,
  PokemonMove_HexFast = 264,
  PokemonMove_NightShade = 265,
  PokemonMove_IronTailFast = 266,
  PokemonMove_GyroBall = 267,
  PokemonMove_HeavySlam = 268,
  PokemonMove_FireSpinFast = 269,
  PokemonMove_Overheat = 270,
  PokemonMove_BulletSeedFast = 271,
  PokemonMove_GrassKnot = 272,
  PokemonMove_EnergyBall = 273,
  PokemonMove_ExtrasensoryFast = 274,
  PokemonMove_Futuresight = 275,
  PokemonMove_MirrorCoat = 276,
  PokemonMove_Outrage = 277,
  PokemonMove_SnarlFast = 278,
  PokemonMove_Crunch = 279,
  PokemonMove_FoulPlay = 280,
  PokemonMove_HiddenPowerFast = 281,
};

GPBEnumDescriptor *PokemonMove_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PokemonMove_IsValidValue(int32_t value);

#pragma mark - Enum PokemonMovementType

typedef GPB_ENUM(PokemonMovementType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PokemonMovementType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PokemonMovementType_MovementStatic = 0,
  PokemonMovementType_MovementJump = 1,
  PokemonMovementType_MovementVertical = 2,
  PokemonMovementType_MovementPsychic = 3,
  PokemonMovementType_MovementElectric = 4,
  PokemonMovementType_MovementFlying = 5,
  PokemonMovementType_MovementHovering = 6,
};

GPBEnumDescriptor *PokemonMovementType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PokemonMovementType_IsValidValue(int32_t value);

#pragma mark - Enum PokemonRarity

typedef GPB_ENUM(PokemonRarity) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PokemonRarity_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PokemonRarity_PokemonRarityNormal = 0,
  PokemonRarity_PokemonRarityLegendary = 1,
  PokemonRarity_PokemonRarityMythic = 2,
};

GPBEnumDescriptor *PokemonRarity_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PokemonRarity_IsValidValue(int32_t value);

#pragma mark - Enum PokemonType

typedef GPB_ENUM(PokemonType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PokemonType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PokemonType_PokemonTypeNone = 0,
  PokemonType_PokemonTypeNormal = 1,
  PokemonType_PokemonTypeFighting = 2,
  PokemonType_PokemonTypeFlying = 3,
  PokemonType_PokemonTypePoison = 4,
  PokemonType_PokemonTypeGround = 5,
  PokemonType_PokemonTypeRock = 6,
  PokemonType_PokemonTypeBug = 7,
  PokemonType_PokemonTypeGhost = 8,
  PokemonType_PokemonTypeSteel = 9,
  PokemonType_PokemonTypeFire = 10,
  PokemonType_PokemonTypeWater = 11,
  PokemonType_PokemonTypeGrass = 12,
  PokemonType_PokemonTypeElectric = 13,
  PokemonType_PokemonTypePsychic = 14,
  PokemonType_PokemonTypeIce = 15,
  PokemonType_PokemonTypeDragon = 16,
  PokemonType_PokemonTypeDark = 17,
  PokemonType_PokemonTypeFairy = 18,
};

GPBEnumDescriptor *PokemonType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PokemonType_IsValidValue(int32_t value);

#pragma mark - Enum QuestType

typedef GPB_ENUM(QuestType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  QuestType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  QuestType_QuestUnknownType = 0,
  QuestType_QuestFirstCatchOfTheDay = 1,
  QuestType_QuestFirstPokestopOfTheDay = 2,
};

GPBEnumDescriptor *QuestType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL QuestType_IsValidValue(int32_t value);

#pragma mark - Enum RaidLevel

typedef GPB_ENUM(RaidLevel) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RaidLevel_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  RaidLevel_RaidLevelUnset = 0,
  RaidLevel_RaidLevel1 = 1,
  RaidLevel_RaidLevel2 = 2,
  RaidLevel_RaidLevel3 = 3,
  RaidLevel_RaidLevel4 = 4,
  RaidLevel_RaidLevel5 = 5,
};

GPBEnumDescriptor *RaidLevel_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RaidLevel_IsValidValue(int32_t value);

#pragma mark - Enum Slot

typedef GPB_ENUM(Slot) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Slot_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Slot_UnsetSlot = 0,
  Slot_Hair = 1,
  Slot_Shirt = 2,
  Slot_Pants = 3,
  Slot_Hat = 4,
  Slot_Shoes = 5,
  Slot_Eyes = 6,
  Slot_Backpack = 7,
  Slot_Gloves = 8,
  Slot_Socks = 9,
  Slot_Belt = 10,
  Slot_Glasses = 11,
  Slot_Necklace = 12,
};

GPBEnumDescriptor *Slot_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Slot_IsValidValue(int32_t value);

#pragma mark - Enum TeamColor

typedef GPB_ENUM(TeamColor) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  TeamColor_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  TeamColor_Neutral = 0,
  TeamColor_Blue = 1,
  TeamColor_Red = 2,
  TeamColor_Yellow = 3,
};

GPBEnumDescriptor *TeamColor_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL TeamColor_IsValidValue(int32_t value);

#pragma mark - Enum TutorialState

typedef GPB_ENUM(TutorialState) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  TutorialState_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  TutorialState_LegalScreen = 0,
  TutorialState_AvatarSelection = 1,
  TutorialState_AccountCreation = 2,
  TutorialState_PokemonCapture = 3,
  TutorialState_NameSelection = 4,
  TutorialState_PokemonBerry = 5,
  TutorialState_UseItem = 6,
  TutorialState_FirstTimeExperienceComplete = 7,
  TutorialState_PokestopTutorial = 8,
  TutorialState_GymTutorial = 9,
};

GPBEnumDescriptor *TutorialState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL TutorialState_IsValidValue(int32_t value);

#pragma mark - Enum VariableName

typedef GPB_ENUM(VariableName) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  VariableName_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  VariableName_UnsetVariableName = 0,
  VariableName_CodeName = 1,
  VariableName_Team = 2,
  VariableName_Level = 3,
  VariableName_Experience = 4,
  VariableName_PokecoinBalance = 5,
  VariableName_StardustBalance = 6,
  VariableName_Email = 7,
  VariableName_LoginMethod = 8,
  VariableName_GymId = 1000,
  VariableName_GymName = 1001,
  VariableName_PokemonDisplay = 1002,
  VariableName_PokedexEntryNumber = 1003,
  VariableName_PokemonId = 1004,
  VariableName_PokemonNickname = 1005,
  VariableName_GymBadgeEarnedPoints = 1006,
  VariableName_GymBadgeProgress = 1007,
  VariableName_GymBadgeRank = 1008,
  VariableName_GymBadgeImageURL = 1009,
  VariableName_GymBadgeLevelUp = 1010,
  VariableName_PokecoinAwarded = 1011,
  VariableName_PokecoinAwardedToday = 1012,
  VariableName_MaxDailyPokecoin = 1013,
  VariableName_BattlesWon = 1014,
  VariableName_BattlesLost = 1015,
  VariableName_DeployedMillis = 1016,
  VariableName_RaidSeed = 1017,
};

GPBEnumDescriptor *VariableName_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL VariableName_IsValidValue(int32_t value);

#pragma mark - PogoprotosEnumsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface PogoprotosEnumsRoot : GPBRootObject
@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
