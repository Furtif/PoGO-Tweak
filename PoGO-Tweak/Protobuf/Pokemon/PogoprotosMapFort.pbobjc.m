// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Map.Fort.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PogoprotosMapFort.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PogoprotosMapFortRoot

@implementation PogoprotosMapFortRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PogoprotosMapFortRoot_FileDescriptor

static GPBFileDescriptor *PogoprotosMapFortRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Map.Fort"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum FortRenderingType

GPBEnumDescriptor *FortRenderingType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Default\000InternalTest\000";
    static const int32_t values[] = {
        FortRenderingType_Default,
        FortRenderingType_InternalTest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(FortRenderingType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:FortRenderingType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL FortRenderingType_IsValidValue(int32_t value__) {
  switch (value__) {
    case FortRenderingType_Default:
    case FortRenderingType_InternalTest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum FortSponsor

GPBEnumDescriptor *FortSponsor_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "UnsetSponsor\000Mcdonalds\000PokemonStore\000Toho"
        "\000Softbank\000Globe\000Spatula\000Thermometer\000Knif"
        "e\000Grill\000Smoker\000Pan\000Bbq\000Fryer\000Steamer\000Hoo"
        "d\000Slowcooker\000Mixer\000Scooper\000Muffintin\000Sal"
        "amander\000Plancha\000NiaOps\000Whisk\000";
    static const int32_t values[] = {
        FortSponsor_UnsetSponsor,
        FortSponsor_Mcdonalds,
        FortSponsor_PokemonStore,
        FortSponsor_Toho,
        FortSponsor_Softbank,
        FortSponsor_Globe,
        FortSponsor_Spatula,
        FortSponsor_Thermometer,
        FortSponsor_Knife,
        FortSponsor_Grill,
        FortSponsor_Smoker,
        FortSponsor_Pan,
        FortSponsor_Bbq,
        FortSponsor_Fryer,
        FortSponsor_Steamer,
        FortSponsor_Hood,
        FortSponsor_Slowcooker,
        FortSponsor_Mixer,
        FortSponsor_Scooper,
        FortSponsor_Muffintin,
        FortSponsor_Salamander,
        FortSponsor_Plancha,
        FortSponsor_NiaOps,
        FortSponsor_Whisk,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(FortSponsor)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:FortSponsor_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL FortSponsor_IsValidValue(int32_t value__) {
  switch (value__) {
    case FortSponsor_UnsetSponsor:
    case FortSponsor_Mcdonalds:
    case FortSponsor_PokemonStore:
    case FortSponsor_Toho:
    case FortSponsor_Softbank:
    case FortSponsor_Globe:
    case FortSponsor_Spatula:
    case FortSponsor_Thermometer:
    case FortSponsor_Knife:
    case FortSponsor_Grill:
    case FortSponsor_Smoker:
    case FortSponsor_Pan:
    case FortSponsor_Bbq:
    case FortSponsor_Fryer:
    case FortSponsor_Steamer:
    case FortSponsor_Hood:
    case FortSponsor_Slowcooker:
    case FortSponsor_Mixer:
    case FortSponsor_Scooper:
    case FortSponsor_Muffintin:
    case FortSponsor_Salamander:
    case FortSponsor_Plancha:
    case FortSponsor_NiaOps:
    case FortSponsor_Whisk:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum FortType

GPBEnumDescriptor *FortType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Gym\000Checkpoint\000";
    static const int32_t values[] = {
        FortType_Gym,
        FortType_Checkpoint,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(FortType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:FortType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL FortType_IsValidValue(int32_t value__) {
  switch (value__) {
    case FortType_Gym:
    case FortType_Checkpoint:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - FortData

@implementation FortData

@dynamic id_p;
@dynamic lastModifiedTimestampMs;
@dynamic latitude;
@dynamic longitude;
@dynamic ownedByTeam;
@dynamic guardPokemonId;
@dynamic guardPokemonCp;
@dynamic enabled;
@dynamic type;
@dynamic gymPoints;
@dynamic isInBattle;
@dynamic activeFortModifierArray, activeFortModifierArray_Count;
@dynamic hasLureInfo, lureInfo;
@dynamic cooldownCompleteTimestampMs;
@dynamic sponsor;
@dynamic renderingType;
@dynamic deployLockoutEndMs;
@dynamic hasGuardPokemonDisplay, guardPokemonDisplay;
@dynamic closed;
@dynamic hasRaidInfo, raidInfo;
@dynamic hasGymDisplay, gymDisplay;
@dynamic visited;
@dynamic sameTeamDeployLockoutEndMs;
@dynamic allowCheckin;
@dynamic imageURL;
@dynamic inEvent;

typedef struct FortData__storage_ {
  uint32_t _has_storage_[1];
  TeamColor ownedByTeam;
  PokemonId guardPokemonId;
  int32_t guardPokemonCp;
  FortType type;
  FortSponsor sponsor;
  FortRenderingType renderingType;
  NSString *id_p;
  GPBEnumArray *activeFortModifierArray;
  FortLureInfo *lureInfo;
  PokemonDisplay *guardPokemonDisplay;
  RaidInfo *raidInfo;
  GymDisplay *gymDisplay;
  NSString *imageURL;
  int64_t lastModifiedTimestampMs;
  double latitude;
  double longitude;
  int64_t gymPoints;
  int64_t cooldownCompleteTimestampMs;
  int64_t deployLockoutEndMs;
  int64_t sameTeamDeployLockoutEndMs;
} FortData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = FortData_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FortData__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastModifiedTimestampMs",
        .dataTypeSpecific.className = NULL,
        .number = FortData_FieldNumber_LastModifiedTimestampMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FortData__storage_, lastModifiedTimestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = FortData_FieldNumber_Latitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FortData__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = FortData_FieldNumber_Longitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FortData__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "ownedByTeam",
        .dataTypeSpecific.enumDescFunc = TeamColor_EnumDescriptor,
        .number = FortData_FieldNumber_OwnedByTeam,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FortData__storage_, ownedByTeam),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "guardPokemonId",
        .dataTypeSpecific.enumDescFunc = PokemonId_EnumDescriptor,
        .number = FortData_FieldNumber_GuardPokemonId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(FortData__storage_, guardPokemonId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "guardPokemonCp",
        .dataTypeSpecific.className = NULL,
        .number = FortData_FieldNumber_GuardPokemonCp,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(FortData__storage_, guardPokemonCp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "enabled",
        .dataTypeSpecific.className = NULL,
        .number = FortData_FieldNumber_Enabled,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = FortType_EnumDescriptor,
        .number = FortData_FieldNumber_Type,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(FortData__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "gymPoints",
        .dataTypeSpecific.className = NULL,
        .number = FortData_FieldNumber_GymPoints,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(FortData__storage_, gymPoints),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isInBattle",
        .dataTypeSpecific.className = NULL,
        .number = FortData_FieldNumber_IsInBattle,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "activeFortModifierArray",
        .dataTypeSpecific.enumDescFunc = ItemId_EnumDescriptor,
        .number = FortData_FieldNumber_ActiveFortModifierArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FortData__storage_, activeFortModifierArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "lureInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(FortLureInfo),
        .number = FortData_FieldNumber_LureInfo,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(FortData__storage_, lureInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cooldownCompleteTimestampMs",
        .dataTypeSpecific.className = NULL,
        .number = FortData_FieldNumber_CooldownCompleteTimestampMs,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(FortData__storage_, cooldownCompleteTimestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sponsor",
        .dataTypeSpecific.enumDescFunc = FortSponsor_EnumDescriptor,
        .number = FortData_FieldNumber_Sponsor,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(FortData__storage_, sponsor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "renderingType",
        .dataTypeSpecific.enumDescFunc = FortRenderingType_EnumDescriptor,
        .number = FortData_FieldNumber_RenderingType,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(FortData__storage_, renderingType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "deployLockoutEndMs",
        .dataTypeSpecific.className = NULL,
        .number = FortData_FieldNumber_DeployLockoutEndMs,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(FortData__storage_, deployLockoutEndMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "guardPokemonDisplay",
        .dataTypeSpecific.className = GPBStringifySymbol(PokemonDisplay),
        .number = FortData_FieldNumber_GuardPokemonDisplay,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(FortData__storage_, guardPokemonDisplay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "closed",
        .dataTypeSpecific.className = NULL,
        .number = FortData_FieldNumber_Closed,
        .hasIndex = 19,
        .offset = 20,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "raidInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(RaidInfo),
        .number = FortData_FieldNumber_RaidInfo,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(FortData__storage_, raidInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gymDisplay",
        .dataTypeSpecific.className = GPBStringifySymbol(GymDisplay),
        .number = FortData_FieldNumber_GymDisplay,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(FortData__storage_, gymDisplay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "visited",
        .dataTypeSpecific.className = NULL,
        .number = FortData_FieldNumber_Visited,
        .hasIndex = 23,
        .offset = 24,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sameTeamDeployLockoutEndMs",
        .dataTypeSpecific.className = NULL,
        .number = FortData_FieldNumber_SameTeamDeployLockoutEndMs,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(FortData__storage_, sameTeamDeployLockoutEndMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "allowCheckin",
        .dataTypeSpecific.className = NULL,
        .number = FortData_FieldNumber_AllowCheckin,
        .hasIndex = 26,
        .offset = 27,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "imageURL",
        .dataTypeSpecific.className = NULL,
        .number = FortData_FieldNumber_ImageURL,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(FortData__storage_, imageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inEvent",
        .dataTypeSpecific.className = NULL,
        .number = FortData_FieldNumber_InEvent,
        .hasIndex = 29,
        .offset = 30,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FortData class]
                                     rootClass:[PogoprotosMapFortRoot class]
                                          file:PogoprotosMapFortRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FortData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\031\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FortData_OwnedByTeam_RawValue(FortData *message) {
  GPBDescriptor *descriptor = [FortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FortData_FieldNumber_OwnedByTeam];
  return GPBGetMessageInt32Field(message, field);
}

void SetFortData_OwnedByTeam_RawValue(FortData *message, int32_t value) {
  GPBDescriptor *descriptor = [FortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FortData_FieldNumber_OwnedByTeam];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t FortData_GuardPokemonId_RawValue(FortData *message) {
  GPBDescriptor *descriptor = [FortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FortData_FieldNumber_GuardPokemonId];
  return GPBGetMessageInt32Field(message, field);
}

void SetFortData_GuardPokemonId_RawValue(FortData *message, int32_t value) {
  GPBDescriptor *descriptor = [FortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FortData_FieldNumber_GuardPokemonId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t FortData_Type_RawValue(FortData *message) {
  GPBDescriptor *descriptor = [FortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FortData_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetFortData_Type_RawValue(FortData *message, int32_t value) {
  GPBDescriptor *descriptor = [FortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FortData_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t FortData_Sponsor_RawValue(FortData *message) {
  GPBDescriptor *descriptor = [FortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FortData_FieldNumber_Sponsor];
  return GPBGetMessageInt32Field(message, field);
}

void SetFortData_Sponsor_RawValue(FortData *message, int32_t value) {
  GPBDescriptor *descriptor = [FortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FortData_FieldNumber_Sponsor];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t FortData_RenderingType_RawValue(FortData *message) {
  GPBDescriptor *descriptor = [FortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FortData_FieldNumber_RenderingType];
  return GPBGetMessageInt32Field(message, field);
}

void SetFortData_RenderingType_RawValue(FortData *message, int32_t value) {
  GPBDescriptor *descriptor = [FortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FortData_FieldNumber_RenderingType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - FortLureInfo

@implementation FortLureInfo

@dynamic fortId;
@dynamic encounterId;
@dynamic activePokemonId;
@dynamic lureExpiresTimestampMs;

typedef struct FortLureInfo__storage_ {
  uint32_t _has_storage_[1];
  PokemonId activePokemonId;
  NSString *fortId;
  uint64_t encounterId;
  int64_t lureExpiresTimestampMs;
} FortLureInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fortId",
        .dataTypeSpecific.className = NULL,
        .number = FortLureInfo_FieldNumber_FortId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FortLureInfo__storage_, fortId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "encounterId",
        .dataTypeSpecific.className = NULL,
        .number = FortLureInfo_FieldNumber_EncounterId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FortLureInfo__storage_, encounterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
      },
      {
        .name = "activePokemonId",
        .dataTypeSpecific.enumDescFunc = PokemonId_EnumDescriptor,
        .number = FortLureInfo_FieldNumber_ActivePokemonId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FortLureInfo__storage_, activePokemonId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "lureExpiresTimestampMs",
        .dataTypeSpecific.className = NULL,
        .number = FortLureInfo_FieldNumber_LureExpiresTimestampMs,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FortLureInfo__storage_, lureExpiresTimestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FortLureInfo class]
                                     rootClass:[PogoprotosMapFortRoot class]
                                          file:PogoprotosMapFortRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FortLureInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FortLureInfo_ActivePokemonId_RawValue(FortLureInfo *message) {
  GPBDescriptor *descriptor = [FortLureInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FortLureInfo_FieldNumber_ActivePokemonId];
  return GPBGetMessageInt32Field(message, field);
}

void SetFortLureInfo_ActivePokemonId_RawValue(FortLureInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [FortLureInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FortLureInfo_FieldNumber_ActivePokemonId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - FortModifier

@implementation FortModifier

@dynamic itemId;
@dynamic expirationTimestampMs;
@dynamic deployerPlayerCodename;

typedef struct FortModifier__storage_ {
  uint32_t _has_storage_[1];
  ItemId itemId;
  NSString *deployerPlayerCodename;
  int64_t expirationTimestampMs;
} FortModifier__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemId",
        .dataTypeSpecific.enumDescFunc = ItemId_EnumDescriptor,
        .number = FortModifier_FieldNumber_ItemId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FortModifier__storage_, itemId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "expirationTimestampMs",
        .dataTypeSpecific.className = NULL,
        .number = FortModifier_FieldNumber_ExpirationTimestampMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FortModifier__storage_, expirationTimestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "deployerPlayerCodename",
        .dataTypeSpecific.className = NULL,
        .number = FortModifier_FieldNumber_DeployerPlayerCodename,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FortModifier__storage_, deployerPlayerCodename),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FortModifier class]
                                     rootClass:[PogoprotosMapFortRoot class]
                                          file:PogoprotosMapFortRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FortModifier__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FortModifier_ItemId_RawValue(FortModifier *message) {
  GPBDescriptor *descriptor = [FortModifier descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FortModifier_FieldNumber_ItemId];
  return GPBGetMessageInt32Field(message, field);
}

void SetFortModifier_ItemId_RawValue(FortModifier *message, int32_t value) {
  GPBDescriptor *descriptor = [FortModifier descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FortModifier_FieldNumber_ItemId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - FortSummary

@implementation FortSummary

@dynamic fortSummaryId;
@dynamic lastModifiedTimestampMs;
@dynamic latitude;
@dynamic longitude;

typedef struct FortSummary__storage_ {
  uint32_t _has_storage_[1];
  NSString *fortSummaryId;
  int64_t lastModifiedTimestampMs;
  double latitude;
  double longitude;
} FortSummary__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fortSummaryId",
        .dataTypeSpecific.className = NULL,
        .number = FortSummary_FieldNumber_FortSummaryId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FortSummary__storage_, fortSummaryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastModifiedTimestampMs",
        .dataTypeSpecific.className = NULL,
        .number = FortSummary_FieldNumber_LastModifiedTimestampMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FortSummary__storage_, lastModifiedTimestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = FortSummary_FieldNumber_Latitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FortSummary__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = FortSummary_FieldNumber_Longitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FortSummary__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FortSummary class]
                                     rootClass:[PogoprotosMapFortRoot class]
                                          file:PogoprotosMapFortRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FortSummary__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GymDisplay

@implementation GymDisplay

@dynamic gymEventArray, gymEventArray_Count;
@dynamic totalGymCp;
@dynamic lowestPokemonMotivation;
@dynamic slotsAvailable;
@dynamic occupiedMillis;

typedef struct GymDisplay__storage_ {
  uint32_t _has_storage_[1];
  int32_t totalGymCp;
  int32_t slotsAvailable;
  NSMutableArray *gymEventArray;
  double lowestPokemonMotivation;
  int64_t occupiedMillis;
} GymDisplay__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gymEventArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GymEvent),
        .number = GymDisplay_FieldNumber_GymEventArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GymDisplay__storage_, gymEventArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalGymCp",
        .dataTypeSpecific.className = NULL,
        .number = GymDisplay_FieldNumber_TotalGymCp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GymDisplay__storage_, totalGymCp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "lowestPokemonMotivation",
        .dataTypeSpecific.className = NULL,
        .number = GymDisplay_FieldNumber_LowestPokemonMotivation,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GymDisplay__storage_, lowestPokemonMotivation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "slotsAvailable",
        .dataTypeSpecific.className = NULL,
        .number = GymDisplay_FieldNumber_SlotsAvailable,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GymDisplay__storage_, slotsAvailable),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "occupiedMillis",
        .dataTypeSpecific.className = NULL,
        .number = GymDisplay_FieldNumber_OccupiedMillis,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GymDisplay__storage_, occupiedMillis),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GymDisplay class]
                                     rootClass:[PogoprotosMapFortRoot class]
                                          file:PogoprotosMapFortRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GymDisplay__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GymEvent

@implementation GymEvent

@dynamic trainer;
@dynamic timestampMs;
@dynamic event;
@dynamic pokedexId;
@dynamic pokemonId;

typedef struct GymEvent__storage_ {
  uint32_t _has_storage_[1];
  GymEvent_Event event;
  int32_t pokedexId;
  NSString *trainer;
  int64_t timestampMs;
  uint64_t pokemonId;
} GymEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "trainer",
        .dataTypeSpecific.className = NULL,
        .number = GymEvent_FieldNumber_Trainer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GymEvent__storage_, trainer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestampMs",
        .dataTypeSpecific.className = NULL,
        .number = GymEvent_FieldNumber_TimestampMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GymEvent__storage_, timestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "event",
        .dataTypeSpecific.enumDescFunc = GymEvent_Event_EnumDescriptor,
        .number = GymEvent_FieldNumber_Event,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GymEvent__storage_, event),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "pokedexId",
        .dataTypeSpecific.className = NULL,
        .number = GymEvent_FieldNumber_PokedexId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GymEvent__storage_, pokedexId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pokemonId",
        .dataTypeSpecific.className = NULL,
        .number = GymEvent_FieldNumber_PokemonId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GymEvent__storage_, pokemonId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GymEvent class]
                                     rootClass:[PogoprotosMapFortRoot class]
                                          file:PogoprotosMapFortRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GymEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GymEvent_Event_RawValue(GymEvent *message) {
  GPBDescriptor *descriptor = [GymEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GymEvent_FieldNumber_Event];
  return GPBGetMessageInt32Field(message, field);
}

void SetGymEvent_Event_RawValue(GymEvent *message, int32_t value) {
  GPBDescriptor *descriptor = [GymEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GymEvent_FieldNumber_Event];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GymEvent_Event

GPBEnumDescriptor *GymEvent_Event_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000PokemonFed\000PokemonDeployed\000Pokem"
        "onReturned\000BattleWon\000BattleLoss\000RaidStar"
        "ted\000RaidEnded\000GymNeutralized\000";
    static const int32_t values[] = {
        GymEvent_Event_Unknown,
        GymEvent_Event_PokemonFed,
        GymEvent_Event_PokemonDeployed,
        GymEvent_Event_PokemonReturned,
        GymEvent_Event_BattleWon,
        GymEvent_Event_BattleLoss,
        GymEvent_Event_RaidStarted,
        GymEvent_Event_RaidEnded,
        GymEvent_Event_GymNeutralized,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GymEvent_Event)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GymEvent_Event_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GymEvent_Event_IsValidValue(int32_t value__) {
  switch (value__) {
    case GymEvent_Event_Unknown:
    case GymEvent_Event_PokemonFed:
    case GymEvent_Event_PokemonDeployed:
    case GymEvent_Event_PokemonReturned:
    case GymEvent_Event_BattleWon:
    case GymEvent_Event_BattleLoss:
    case GymEvent_Event_RaidStarted:
    case GymEvent_Event_RaidEnded:
    case GymEvent_Event_GymNeutralized:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
