// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Data.Redeem.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PogoprotosDataRedeem.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PogoprotosDataRedeemRoot

@implementation PogoprotosDataRedeemRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PogoprotosDataRedeemRoot_FileDescriptor

static GPBFileDescriptor *PogoprotosDataRedeemRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Data.Redeem"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PokeCandy

@implementation PokeCandy

@dynamic pokemonId;
@dynamic candyCount;

typedef struct PokeCandy__storage_ {
  uint32_t _has_storage_[1];
  int32_t candyCount;
  uint64_t pokemonId;
} PokeCandy__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pokemonId",
        .dataTypeSpecific.className = NULL,
        .number = PokeCandy_FieldNumber_PokemonId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PokeCandy__storage_, pokemonId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
      },
      {
        .name = "candyCount",
        .dataTypeSpecific.className = NULL,
        .number = PokeCandy_FieldNumber_CandyCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PokeCandy__storage_, candyCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PokeCandy class]
                                     rootClass:[PogoprotosDataRedeemRoot class]
                                          file:PogoprotosDataRedeemRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PokeCandy__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedeemedAvatarItem

@implementation RedeemedAvatarItem

@dynamic avatarTemplateId;
@dynamic itemCount;

typedef struct RedeemedAvatarItem__storage_ {
  uint32_t _has_storage_[1];
  int32_t itemCount;
  NSString *avatarTemplateId;
} RedeemedAvatarItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "avatarTemplateId",
        .dataTypeSpecific.className = NULL,
        .number = RedeemedAvatarItem_FieldNumber_AvatarTemplateId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedeemedAvatarItem__storage_, avatarTemplateId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "itemCount",
        .dataTypeSpecific.className = NULL,
        .number = RedeemedAvatarItem_FieldNumber_ItemCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedeemedAvatarItem__storage_, itemCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedeemedAvatarItem class]
                                     rootClass:[PogoprotosDataRedeemRoot class]
                                          file:PogoprotosDataRedeemRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedeemedAvatarItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedeemedItem

@implementation RedeemedItem

@dynamic item;
@dynamic itemCount;

typedef struct RedeemedItem__storage_ {
  uint32_t _has_storage_[1];
  ItemId item;
  int32_t itemCount;
} RedeemedItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "item",
        .dataTypeSpecific.enumDescFunc = ItemId_EnumDescriptor,
        .number = RedeemedItem_FieldNumber_Item,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedeemedItem__storage_, item),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "itemCount",
        .dataTypeSpecific.className = NULL,
        .number = RedeemedItem_FieldNumber_ItemCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedeemedItem__storage_, itemCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedeemedItem class]
                                     rootClass:[PogoprotosDataRedeemRoot class]
                                          file:PogoprotosDataRedeemRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedeemedItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RedeemedItem_Item_RawValue(RedeemedItem *message) {
  GPBDescriptor *descriptor = [RedeemedItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedeemedItem_FieldNumber_Item];
  return GPBGetMessageInt32Field(message, field);
}

void SetRedeemedItem_Item_RawValue(RedeemedItem *message, int32_t value) {
  GPBDescriptor *descriptor = [RedeemedItem descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedeemedItem_FieldNumber_Item];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
