// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Settings.Master.Item.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PogoprotosSettingsMasterItem.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PogoprotosSettingsMasterItemRoot

@implementation PogoprotosSettingsMasterItemRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PogoprotosSettingsMasterItemRoot_FileDescriptor

static GPBFileDescriptor *PogoprotosSettingsMasterItemRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Settings.Master.Item"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - BattleAttributes

@implementation BattleAttributes

@dynamic staPercent;

typedef struct BattleAttributes__storage_ {
  uint32_t _has_storage_[1];
  float staPercent;
} BattleAttributes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "staPercent",
        .dataTypeSpecific.className = NULL,
        .number = BattleAttributes_FieldNumber_StaPercent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BattleAttributes__storage_, staPercent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BattleAttributes class]
                                     rootClass:[PogoprotosSettingsMasterItemRoot class]
                                          file:PogoprotosSettingsMasterItemRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BattleAttributes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EggIncubatorAttributes

@implementation EggIncubatorAttributes

@dynamic incubatorType;
@dynamic uses;
@dynamic distanceMultiplier;

typedef struct EggIncubatorAttributes__storage_ {
  uint32_t _has_storage_[1];
  EggIncubatorType incubatorType;
  int32_t uses;
  float distanceMultiplier;
} EggIncubatorAttributes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "incubatorType",
        .dataTypeSpecific.enumDescFunc = EggIncubatorType_EnumDescriptor,
        .number = EggIncubatorAttributes_FieldNumber_IncubatorType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EggIncubatorAttributes__storage_, incubatorType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "uses",
        .dataTypeSpecific.className = NULL,
        .number = EggIncubatorAttributes_FieldNumber_Uses,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EggIncubatorAttributes__storage_, uses),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "distanceMultiplier",
        .dataTypeSpecific.className = NULL,
        .number = EggIncubatorAttributes_FieldNumber_DistanceMultiplier,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EggIncubatorAttributes__storage_, distanceMultiplier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EggIncubatorAttributes class]
                                     rootClass:[PogoprotosSettingsMasterItemRoot class]
                                          file:PogoprotosSettingsMasterItemRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EggIncubatorAttributes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t EggIncubatorAttributes_IncubatorType_RawValue(EggIncubatorAttributes *message) {
  GPBDescriptor *descriptor = [EggIncubatorAttributes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EggIncubatorAttributes_FieldNumber_IncubatorType];
  return GPBGetMessageInt32Field(message, field);
}

void SetEggIncubatorAttributes_IncubatorType_RawValue(EggIncubatorAttributes *message, int32_t value) {
  GPBDescriptor *descriptor = [EggIncubatorAttributes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EggIncubatorAttributes_FieldNumber_IncubatorType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ExperienceBoostAttributes

@implementation ExperienceBoostAttributes

@dynamic xpMultiplier;
@dynamic boostDurationMs;

typedef struct ExperienceBoostAttributes__storage_ {
  uint32_t _has_storage_[1];
  float xpMultiplier;
  int32_t boostDurationMs;
} ExperienceBoostAttributes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "xpMultiplier",
        .dataTypeSpecific.className = NULL,
        .number = ExperienceBoostAttributes_FieldNumber_XpMultiplier,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExperienceBoostAttributes__storage_, xpMultiplier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "boostDurationMs",
        .dataTypeSpecific.className = NULL,
        .number = ExperienceBoostAttributes_FieldNumber_BoostDurationMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExperienceBoostAttributes__storage_, boostDurationMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExperienceBoostAttributes class]
                                     rootClass:[PogoprotosSettingsMasterItemRoot class]
                                          file:PogoprotosSettingsMasterItemRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExperienceBoostAttributes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FoodAttributes

@implementation FoodAttributes

@dynamic itemEffectArray, itemEffectArray_Count;
@dynamic itemEffectPercentArray, itemEffectPercentArray_Count;
@dynamic growthPercent;

typedef struct FoodAttributes__storage_ {
  uint32_t _has_storage_[1];
  float growthPercent;
  GPBEnumArray *itemEffectArray;
  GPBFloatArray *itemEffectPercentArray;
} FoodAttributes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemEffectArray",
        .dataTypeSpecific.enumDescFunc = ItemEffect_EnumDescriptor,
        .number = FoodAttributes_FieldNumber_ItemEffectArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FoodAttributes__storage_, itemEffectArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "itemEffectPercentArray",
        .dataTypeSpecific.className = NULL,
        .number = FoodAttributes_FieldNumber_ItemEffectPercentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FoodAttributes__storage_, itemEffectPercentArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "growthPercent",
        .dataTypeSpecific.className = NULL,
        .number = FoodAttributes_FieldNumber_GrowthPercent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FoodAttributes__storage_, growthPercent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FoodAttributes class]
                                     rootClass:[PogoprotosSettingsMasterItemRoot class]
                                          file:PogoprotosSettingsMasterItemRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FoodAttributes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FortModifierAttributes

@implementation FortModifierAttributes

@dynamic modifierLifetimeSeconds;
@dynamic troyDiskNumPokemonSpawned;

typedef struct FortModifierAttributes__storage_ {
  uint32_t _has_storage_[1];
  int32_t modifierLifetimeSeconds;
  int32_t troyDiskNumPokemonSpawned;
} FortModifierAttributes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modifierLifetimeSeconds",
        .dataTypeSpecific.className = NULL,
        .number = FortModifierAttributes_FieldNumber_ModifierLifetimeSeconds,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FortModifierAttributes__storage_, modifierLifetimeSeconds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "troyDiskNumPokemonSpawned",
        .dataTypeSpecific.className = NULL,
        .number = FortModifierAttributes_FieldNumber_TroyDiskNumPokemonSpawned,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FortModifierAttributes__storage_, troyDiskNumPokemonSpawned),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FortModifierAttributes class]
                                     rootClass:[PogoprotosSettingsMasterItemRoot class]
                                          file:PogoprotosSettingsMasterItemRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FortModifierAttributes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IncenseAttributes

@implementation IncenseAttributes

@dynamic incenseLifetimeSeconds;
@dynamic pokemonTypeArray, pokemonTypeArray_Count;
@dynamic pokemonIncenseTypeProbability;
@dynamic standingTimeBetweenEncountersSeconds;
@dynamic movingTimeBetweenEncounterSeconds;
@dynamic distanceRequiredForShorterIntervalMeters;
@dynamic pokemonAttractedLengthSec;

typedef struct IncenseAttributes__storage_ {
  uint32_t _has_storage_[1];
  int32_t incenseLifetimeSeconds;
  float pokemonIncenseTypeProbability;
  int32_t standingTimeBetweenEncountersSeconds;
  int32_t movingTimeBetweenEncounterSeconds;
  int32_t distanceRequiredForShorterIntervalMeters;
  int32_t pokemonAttractedLengthSec;
  GPBEnumArray *pokemonTypeArray;
} IncenseAttributes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "incenseLifetimeSeconds",
        .dataTypeSpecific.className = NULL,
        .number = IncenseAttributes_FieldNumber_IncenseLifetimeSeconds,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IncenseAttributes__storage_, incenseLifetimeSeconds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pokemonTypeArray",
        .dataTypeSpecific.enumDescFunc = PokemonType_EnumDescriptor,
        .number = IncenseAttributes_FieldNumber_PokemonTypeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IncenseAttributes__storage_, pokemonTypeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "pokemonIncenseTypeProbability",
        .dataTypeSpecific.className = NULL,
        .number = IncenseAttributes_FieldNumber_PokemonIncenseTypeProbability,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IncenseAttributes__storage_, pokemonIncenseTypeProbability),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "standingTimeBetweenEncountersSeconds",
        .dataTypeSpecific.className = NULL,
        .number = IncenseAttributes_FieldNumber_StandingTimeBetweenEncountersSeconds,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IncenseAttributes__storage_, standingTimeBetweenEncountersSeconds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "movingTimeBetweenEncounterSeconds",
        .dataTypeSpecific.className = NULL,
        .number = IncenseAttributes_FieldNumber_MovingTimeBetweenEncounterSeconds,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IncenseAttributes__storage_, movingTimeBetweenEncounterSeconds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "distanceRequiredForShorterIntervalMeters",
        .dataTypeSpecific.className = NULL,
        .number = IncenseAttributes_FieldNumber_DistanceRequiredForShorterIntervalMeters,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IncenseAttributes__storage_, distanceRequiredForShorterIntervalMeters),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pokemonAttractedLengthSec",
        .dataTypeSpecific.className = NULL,
        .number = IncenseAttributes_FieldNumber_PokemonAttractedLengthSec,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(IncenseAttributes__storage_, pokemonAttractedLengthSec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IncenseAttributes class]
                                     rootClass:[PogoprotosSettingsMasterItemRoot class]
                                          file:PogoprotosSettingsMasterItemRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IncenseAttributes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InventoryUpgradeAttributes

@implementation InventoryUpgradeAttributes

@dynamic additionalStorage;
@dynamic upgradeType;

typedef struct InventoryUpgradeAttributes__storage_ {
  uint32_t _has_storage_[1];
  int32_t additionalStorage;
  InventoryUpgradeType upgradeType;
} InventoryUpgradeAttributes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "additionalStorage",
        .dataTypeSpecific.className = NULL,
        .number = InventoryUpgradeAttributes_FieldNumber_AdditionalStorage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InventoryUpgradeAttributes__storage_, additionalStorage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "upgradeType",
        .dataTypeSpecific.enumDescFunc = InventoryUpgradeType_EnumDescriptor,
        .number = InventoryUpgradeAttributes_FieldNumber_UpgradeType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InventoryUpgradeAttributes__storage_, upgradeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InventoryUpgradeAttributes class]
                                     rootClass:[PogoprotosSettingsMasterItemRoot class]
                                          file:PogoprotosSettingsMasterItemRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InventoryUpgradeAttributes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t InventoryUpgradeAttributes_UpgradeType_RawValue(InventoryUpgradeAttributes *message) {
  GPBDescriptor *descriptor = [InventoryUpgradeAttributes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:InventoryUpgradeAttributes_FieldNumber_UpgradeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetInventoryUpgradeAttributes_UpgradeType_RawValue(InventoryUpgradeAttributes *message, int32_t value) {
  GPBDescriptor *descriptor = [InventoryUpgradeAttributes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:InventoryUpgradeAttributes_FieldNumber_UpgradeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PokeballAttributes

@implementation PokeballAttributes

@dynamic itemEffect;
@dynamic captureMulti;
@dynamic captureMultiEffect;
@dynamic itemEffectMod;

typedef struct PokeballAttributes__storage_ {
  uint32_t _has_storage_[1];
  ItemEffect itemEffect;
  float captureMulti;
  float captureMultiEffect;
  float itemEffectMod;
} PokeballAttributes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemEffect",
        .dataTypeSpecific.enumDescFunc = ItemEffect_EnumDescriptor,
        .number = PokeballAttributes_FieldNumber_ItemEffect,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PokeballAttributes__storage_, itemEffect),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "captureMulti",
        .dataTypeSpecific.className = NULL,
        .number = PokeballAttributes_FieldNumber_CaptureMulti,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PokeballAttributes__storage_, captureMulti),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "captureMultiEffect",
        .dataTypeSpecific.className = NULL,
        .number = PokeballAttributes_FieldNumber_CaptureMultiEffect,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PokeballAttributes__storage_, captureMultiEffect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "itemEffectMod",
        .dataTypeSpecific.className = NULL,
        .number = PokeballAttributes_FieldNumber_ItemEffectMod,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PokeballAttributes__storage_, itemEffectMod),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PokeballAttributes class]
                                     rootClass:[PogoprotosSettingsMasterItemRoot class]
                                          file:PogoprotosSettingsMasterItemRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PokeballAttributes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PokeballAttributes_ItemEffect_RawValue(PokeballAttributes *message) {
  GPBDescriptor *descriptor = [PokeballAttributes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokeballAttributes_FieldNumber_ItemEffect];
  return GPBGetMessageInt32Field(message, field);
}

void SetPokeballAttributes_ItemEffect_RawValue(PokeballAttributes *message, int32_t value) {
  GPBDescriptor *descriptor = [PokeballAttributes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokeballAttributes_FieldNumber_ItemEffect];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PotionAttributes

@implementation PotionAttributes

@dynamic staPercent;
@dynamic staAmount;

typedef struct PotionAttributes__storage_ {
  uint32_t _has_storage_[1];
  float staPercent;
  int32_t staAmount;
} PotionAttributes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "staPercent",
        .dataTypeSpecific.className = NULL,
        .number = PotionAttributes_FieldNumber_StaPercent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PotionAttributes__storage_, staPercent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "staAmount",
        .dataTypeSpecific.className = NULL,
        .number = PotionAttributes_FieldNumber_StaAmount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PotionAttributes__storage_, staAmount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PotionAttributes class]
                                     rootClass:[PogoprotosSettingsMasterItemRoot class]
                                          file:PogoprotosSettingsMasterItemRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PotionAttributes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReviveAttributes

@implementation ReviveAttributes

@dynamic staPercent;

typedef struct ReviveAttributes__storage_ {
  uint32_t _has_storage_[1];
  float staPercent;
} ReviveAttributes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "staPercent",
        .dataTypeSpecific.className = NULL,
        .number = ReviveAttributes_FieldNumber_StaPercent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReviveAttributes__storage_, staPercent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReviveAttributes class]
                                     rootClass:[PogoprotosSettingsMasterItemRoot class]
                                          file:PogoprotosSettingsMasterItemRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReviveAttributes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
