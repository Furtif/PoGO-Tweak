// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Data.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PogoprotosData.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PogoprotosDataRoot

@implementation PogoprotosDataRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PogoprotosDataRoot_FileDescriptor

static GPBFileDescriptor *PogoprotosDataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - AssetDigestEntry

@implementation AssetDigestEntry

@dynamic assetId;
@dynamic bundleName;
@dynamic version;
@dynamic checksum;
@dynamic size;
@dynamic key;

typedef struct AssetDigestEntry__storage_ {
  uint32_t _has_storage_[1];
  uint32_t checksum;
  int32_t size;
  NSString *assetId;
  NSString *bundleName;
  NSData *key;
  int64_t version;
} AssetDigestEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "assetId",
        .dataTypeSpecific.className = NULL,
        .number = AssetDigestEntry_FieldNumber_AssetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AssetDigestEntry__storage_, assetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bundleName",
        .dataTypeSpecific.className = NULL,
        .number = AssetDigestEntry_FieldNumber_BundleName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AssetDigestEntry__storage_, bundleName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = AssetDigestEntry_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AssetDigestEntry__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "checksum",
        .dataTypeSpecific.className = NULL,
        .number = AssetDigestEntry_FieldNumber_Checksum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AssetDigestEntry__storage_, checksum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = AssetDigestEntry_FieldNumber_Size,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AssetDigestEntry__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = AssetDigestEntry_FieldNumber_Key,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AssetDigestEntry__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AssetDigestEntry class]
                                     rootClass:[PogoprotosDataRoot class]
                                          file:PogoprotosDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AssetDigestEntry__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BackgroundToken

@implementation BackgroundToken

@dynamic token;
@dynamic expirationTime;
@dynamic iv;

typedef struct BackgroundToken__storage_ {
  uint32_t _has_storage_[1];
  NSData *token;
  NSData *iv;
  int64_t expirationTime;
} BackgroundToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = BackgroundToken_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BackgroundToken__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "expirationTime",
        .dataTypeSpecific.className = NULL,
        .number = BackgroundToken_FieldNumber_ExpirationTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BackgroundToken__storage_, expirationTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "iv",
        .dataTypeSpecific.className = NULL,
        .number = BackgroundToken_FieldNumber_Iv,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BackgroundToken__storage_, iv),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BackgroundToken class]
                                     rootClass:[PogoprotosDataRoot class]
                                          file:PogoprotosDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BackgroundToken__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BuddyPokemon

@implementation BuddyPokemon

@dynamic id_p;
@dynamic startKmWalked;
@dynamic lastKmAwarded;

typedef struct BuddyPokemon__storage_ {
  uint32_t _has_storage_[1];
  uint64_t id_p;
  double startKmWalked;
  double lastKmAwarded;
} BuddyPokemon__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = BuddyPokemon_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BuddyPokemon__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
      },
      {
        .name = "startKmWalked",
        .dataTypeSpecific.className = NULL,
        .number = BuddyPokemon_FieldNumber_StartKmWalked,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BuddyPokemon__storage_, startKmWalked),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "lastKmAwarded",
        .dataTypeSpecific.className = NULL,
        .number = BuddyPokemon_FieldNumber_LastKmAwarded,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BuddyPokemon__storage_, lastKmAwarded),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BuddyPokemon class]
                                     rootClass:[PogoprotosDataRoot class]
                                          file:PogoprotosDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BuddyPokemon__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClientVersion

@implementation ClientVersion

@dynamic minVersion;

typedef struct ClientVersion__storage_ {
  uint32_t _has_storage_[1];
  NSString *minVersion;
} ClientVersion__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "minVersion",
        .dataTypeSpecific.className = NULL,
        .number = ClientVersion_FieldNumber_MinVersion,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientVersion__storage_, minVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClientVersion class]
                                     rootClass:[PogoprotosDataRoot class]
                                          file:PogoprotosDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientVersion__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DownloadUrlEntry

@implementation DownloadUrlEntry

@dynamic assetId;
@dynamic URL;
@dynamic size;
@dynamic checksum;

typedef struct DownloadUrlEntry__storage_ {
  uint32_t _has_storage_[1];
  int32_t size;
  uint32_t checksum;
  NSString *assetId;
  NSString *URL;
} DownloadUrlEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "assetId",
        .dataTypeSpecific.className = NULL,
        .number = DownloadUrlEntry_FieldNumber_AssetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DownloadUrlEntry__storage_, assetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = DownloadUrlEntry_FieldNumber_URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DownloadUrlEntry__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = DownloadUrlEntry_FieldNumber_Size,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DownloadUrlEntry__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "checksum",
        .dataTypeSpecific.className = NULL,
        .number = DownloadUrlEntry_FieldNumber_Checksum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DownloadUrlEntry__storage_, checksum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DownloadUrlEntry class]
                                     rootClass:[PogoprotosDataRoot class]
                                          file:PogoprotosDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DownloadUrlEntry__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FoodValue

@implementation FoodValue

@dynamic motivationIncrease;
@dynamic cpIncrease;
@dynamic foodItem;

typedef struct FoodValue__storage_ {
  uint32_t _has_storage_[1];
  float motivationIncrease;
  int32_t cpIncrease;
  ItemId foodItem;
} FoodValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "motivationIncrease",
        .dataTypeSpecific.className = NULL,
        .number = FoodValue_FieldNumber_MotivationIncrease,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FoodValue__storage_, motivationIncrease),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "cpIncrease",
        .dataTypeSpecific.className = NULL,
        .number = FoodValue_FieldNumber_CpIncrease,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FoodValue__storage_, cpIncrease),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "foodItem",
        .dataTypeSpecific.enumDescFunc = ItemId_EnumDescriptor,
        .number = FoodValue_FieldNumber_FoodItem,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FoodValue__storage_, foodItem),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FoodValue class]
                                     rootClass:[PogoprotosDataRoot class]
                                          file:PogoprotosDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FoodValue__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FoodValue_FoodItem_RawValue(FoodValue *message) {
  GPBDescriptor *descriptor = [FoodValue descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FoodValue_FieldNumber_FoodItem];
  return GPBGetMessageInt32Field(message, field);
}

void SetFoodValue_FoodItem_RawValue(FoodValue *message, int32_t value) {
  GPBDescriptor *descriptor = [FoodValue descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FoodValue_FieldNumber_FoodItem];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PlayerBadge

@implementation PlayerBadge

@dynamic badgeType;
@dynamic rank;
@dynamic startValue;
@dynamic endValue;
@dynamic currentValue;

typedef struct PlayerBadge__storage_ {
  uint32_t _has_storage_[1];
  BadgeType badgeType;
  int32_t rank;
  int32_t startValue;
  int32_t endValue;
  double currentValue;
} PlayerBadge__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "badgeType",
        .dataTypeSpecific.enumDescFunc = BadgeType_EnumDescriptor,
        .number = PlayerBadge_FieldNumber_BadgeType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PlayerBadge__storage_, badgeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "rank",
        .dataTypeSpecific.className = NULL,
        .number = PlayerBadge_FieldNumber_Rank,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PlayerBadge__storage_, rank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "startValue",
        .dataTypeSpecific.className = NULL,
        .number = PlayerBadge_FieldNumber_StartValue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PlayerBadge__storage_, startValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "endValue",
        .dataTypeSpecific.className = NULL,
        .number = PlayerBadge_FieldNumber_EndValue,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PlayerBadge__storage_, endValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "currentValue",
        .dataTypeSpecific.className = NULL,
        .number = PlayerBadge_FieldNumber_CurrentValue,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PlayerBadge__storage_, currentValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlayerBadge class]
                                     rootClass:[PogoprotosDataRoot class]
                                          file:PogoprotosDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlayerBadge__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PlayerBadge_BadgeType_RawValue(PlayerBadge *message) {
  GPBDescriptor *descriptor = [PlayerBadge descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PlayerBadge_FieldNumber_BadgeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPlayerBadge_BadgeType_RawValue(PlayerBadge *message, int32_t value) {
  GPBDescriptor *descriptor = [PlayerBadge descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PlayerBadge_FieldNumber_BadgeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PlayerData

@implementation PlayerData

@dynamic creationTimestampMs;
@dynamic username;
@dynamic team;
@dynamic tutorialStateArray, tutorialStateArray_Count;
@dynamic hasAvatar, avatar;
@dynamic maxPokemonStorage;
@dynamic maxItemStorage;
@dynamic hasDailyBonus, dailyBonus;
@dynamic hasEquippedBadge, equippedBadge;
@dynamic hasContactSettings, contactSettings;
@dynamic currenciesArray, currenciesArray_Count;
@dynamic remainingCodenameClaims;
@dynamic hasBuddyPokemon, buddyPokemon;
@dynamic battleLockoutEndMs;
@dynamic hasSecondaryPlayerAvatar, secondaryPlayerAvatar;
@dynamic nameIsBlacklisted;

typedef struct PlayerData__storage_ {
  uint32_t _has_storage_[1];
  TeamColor team;
  int32_t maxPokemonStorage;
  int32_t maxItemStorage;
  int32_t remainingCodenameClaims;
  NSString *username;
  GPBEnumArray *tutorialStateArray;
  PlayerAvatar *avatar;
  DailyBonus *dailyBonus;
  EquippedBadge *equippedBadge;
  ContactSettings *contactSettings;
  NSMutableArray *currenciesArray;
  BuddyPokemon *buddyPokemon;
  PlayerAvatar *secondaryPlayerAvatar;
  int64_t creationTimestampMs;
  int64_t battleLockoutEndMs;
} PlayerData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "creationTimestampMs",
        .dataTypeSpecific.className = NULL,
        .number = PlayerData_FieldNumber_CreationTimestampMs,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PlayerData__storage_, creationTimestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = PlayerData_FieldNumber_Username,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PlayerData__storage_, username),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "team",
        .dataTypeSpecific.enumDescFunc = TeamColor_EnumDescriptor,
        .number = PlayerData_FieldNumber_Team,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PlayerData__storage_, team),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "tutorialStateArray",
        .dataTypeSpecific.enumDescFunc = TutorialState_EnumDescriptor,
        .number = PlayerData_FieldNumber_TutorialStateArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PlayerData__storage_, tutorialStateArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = GPBStringifySymbol(PlayerAvatar),
        .number = PlayerData_FieldNumber_Avatar,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PlayerData__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxPokemonStorage",
        .dataTypeSpecific.className = NULL,
        .number = PlayerData_FieldNumber_MaxPokemonStorage,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PlayerData__storage_, maxPokemonStorage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxItemStorage",
        .dataTypeSpecific.className = NULL,
        .number = PlayerData_FieldNumber_MaxItemStorage,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PlayerData__storage_, maxItemStorage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dailyBonus",
        .dataTypeSpecific.className = GPBStringifySymbol(DailyBonus),
        .number = PlayerData_FieldNumber_DailyBonus,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PlayerData__storage_, dailyBonus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "equippedBadge",
        .dataTypeSpecific.className = GPBStringifySymbol(EquippedBadge),
        .number = PlayerData_FieldNumber_EquippedBadge,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PlayerData__storage_, equippedBadge),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contactSettings",
        .dataTypeSpecific.className = GPBStringifySymbol(ContactSettings),
        .number = PlayerData_FieldNumber_ContactSettings,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PlayerData__storage_, contactSettings),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "currenciesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Currency),
        .number = PlayerData_FieldNumber_CurrenciesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PlayerData__storage_, currenciesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "remainingCodenameClaims",
        .dataTypeSpecific.className = NULL,
        .number = PlayerData_FieldNumber_RemainingCodenameClaims,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PlayerData__storage_, remainingCodenameClaims),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "buddyPokemon",
        .dataTypeSpecific.className = GPBStringifySymbol(BuddyPokemon),
        .number = PlayerData_FieldNumber_BuddyPokemon,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PlayerData__storage_, buddyPokemon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "battleLockoutEndMs",
        .dataTypeSpecific.className = NULL,
        .number = PlayerData_FieldNumber_BattleLockoutEndMs,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PlayerData__storage_, battleLockoutEndMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "secondaryPlayerAvatar",
        .dataTypeSpecific.className = GPBStringifySymbol(PlayerAvatar),
        .number = PlayerData_FieldNumber_SecondaryPlayerAvatar,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PlayerData__storage_, secondaryPlayerAvatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nameIsBlacklisted",
        .dataTypeSpecific.className = NULL,
        .number = PlayerData_FieldNumber_NameIsBlacklisted,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlayerData class]
                                     rootClass:[PogoprotosDataRoot class]
                                          file:PogoprotosDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlayerData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PlayerData_Team_RawValue(PlayerData *message) {
  GPBDescriptor *descriptor = [PlayerData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PlayerData_FieldNumber_Team];
  return GPBGetMessageInt32Field(message, field);
}

void SetPlayerData_Team_RawValue(PlayerData *message, int32_t value) {
  GPBDescriptor *descriptor = [PlayerData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PlayerData_FieldNumber_Team];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PokedexEntry

@implementation PokedexEntry

@dynamic pokemonId;
@dynamic timesEncountered;
@dynamic timesCaptured;
@dynamic evolutionStonePieces;
@dynamic evolutionStones;
@dynamic capturedCostumesArray, capturedCostumesArray_Count;
@dynamic capturedFormsArray, capturedFormsArray_Count;
@dynamic capturedGendersArray, capturedGendersArray_Count;
@dynamic capturedShiny;
@dynamic encounteredCostumesArray, encounteredCostumesArray_Count;
@dynamic encounteredFormsArray, encounteredFormsArray_Count;
@dynamic encounteredGendersArray, encounteredGendersArray_Count;
@dynamic encounteredShiny;

typedef struct PokedexEntry__storage_ {
  uint32_t _has_storage_[1];
  PokemonId pokemonId;
  int32_t timesEncountered;
  int32_t timesCaptured;
  int32_t evolutionStonePieces;
  int32_t evolutionStones;
  GPBEnumArray *capturedCostumesArray;
  GPBEnumArray *capturedFormsArray;
  GPBEnumArray *capturedGendersArray;
  GPBEnumArray *encounteredCostumesArray;
  GPBEnumArray *encounteredFormsArray;
  GPBEnumArray *encounteredGendersArray;
} PokedexEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pokemonId",
        .dataTypeSpecific.enumDescFunc = PokemonId_EnumDescriptor,
        .number = PokedexEntry_FieldNumber_PokemonId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PokedexEntry__storage_, pokemonId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "timesEncountered",
        .dataTypeSpecific.className = NULL,
        .number = PokedexEntry_FieldNumber_TimesEncountered,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PokedexEntry__storage_, timesEncountered),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timesCaptured",
        .dataTypeSpecific.className = NULL,
        .number = PokedexEntry_FieldNumber_TimesCaptured,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PokedexEntry__storage_, timesCaptured),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "evolutionStonePieces",
        .dataTypeSpecific.className = NULL,
        .number = PokedexEntry_FieldNumber_EvolutionStonePieces,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PokedexEntry__storage_, evolutionStonePieces),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "evolutionStones",
        .dataTypeSpecific.className = NULL,
        .number = PokedexEntry_FieldNumber_EvolutionStones,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PokedexEntry__storage_, evolutionStones),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "capturedCostumesArray",
        .dataTypeSpecific.enumDescFunc = Costume_EnumDescriptor,
        .number = PokedexEntry_FieldNumber_CapturedCostumesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PokedexEntry__storage_, capturedCostumesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "capturedFormsArray",
        .dataTypeSpecific.enumDescFunc = Form_EnumDescriptor,
        .number = PokedexEntry_FieldNumber_CapturedFormsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PokedexEntry__storage_, capturedFormsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "capturedGendersArray",
        .dataTypeSpecific.enumDescFunc = Gender_EnumDescriptor,
        .number = PokedexEntry_FieldNumber_CapturedGendersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PokedexEntry__storage_, capturedGendersArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "capturedShiny",
        .dataTypeSpecific.className = NULL,
        .number = PokedexEntry_FieldNumber_CapturedShiny,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "encounteredCostumesArray",
        .dataTypeSpecific.enumDescFunc = Costume_EnumDescriptor,
        .number = PokedexEntry_FieldNumber_EncounteredCostumesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PokedexEntry__storage_, encounteredCostumesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "encounteredFormsArray",
        .dataTypeSpecific.enumDescFunc = Form_EnumDescriptor,
        .number = PokedexEntry_FieldNumber_EncounteredFormsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PokedexEntry__storage_, encounteredFormsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "encounteredGendersArray",
        .dataTypeSpecific.enumDescFunc = Gender_EnumDescriptor,
        .number = PokedexEntry_FieldNumber_EncounteredGendersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PokedexEntry__storage_, encounteredGendersArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "encounteredShiny",
        .dataTypeSpecific.className = NULL,
        .number = PokedexEntry_FieldNumber_EncounteredShiny,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PokedexEntry class]
                                     rootClass:[PogoprotosDataRoot class]
                                          file:PogoprotosDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PokedexEntry__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PokedexEntry_PokemonId_RawValue(PokedexEntry *message) {
  GPBDescriptor *descriptor = [PokedexEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokedexEntry_FieldNumber_PokemonId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPokedexEntry_PokemonId_RawValue(PokedexEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [PokedexEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokedexEntry_FieldNumber_PokemonId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PokemonData

@implementation PokemonData

@dynamic id_p;
@dynamic pokemonId;
@dynamic cp;
@dynamic stamina;
@dynamic staminaMax;
@dynamic move1;
@dynamic move2;
@dynamic deployedFortId;
@dynamic ownerName;
@dynamic isEgg;
@dynamic eggKmWalkedTarget;
@dynamic eggKmWalkedStart;
@dynamic origin;
@dynamic heightM;
@dynamic weightKg;
@dynamic individualAttack;
@dynamic individualDefense;
@dynamic individualStamina;
@dynamic cpMultiplier;
@dynamic pokeball;
@dynamic capturedCellId;
@dynamic battlesAttacked;
@dynamic battlesDefended;
@dynamic eggIncubatorId;
@dynamic creationTimeMs;
@dynamic numUpgrades;
@dynamic additionalCpMultiplier;
@dynamic favorite;
@dynamic nickname;
@dynamic fromFort;
@dynamic buddyCandyAwarded;
@dynamic buddyTotalKmWalked;
@dynamic displayPokemonId;
@dynamic displayCp;
@dynamic hasPokemonDisplay, pokemonDisplay;
@dynamic isBad;
@dynamic hatchedFromEgg;

typedef struct PokemonData__storage_ {
  uint32_t _has_storage_[2];
  PokemonId pokemonId;
  int32_t cp;
  int32_t stamina;
  int32_t staminaMax;
  PokemonMove move1;
  PokemonMove move2;
  int32_t origin;
  float heightM;
  float weightKg;
  int32_t individualAttack;
  int32_t individualDefense;
  int32_t individualStamina;
  float cpMultiplier;
  ItemId pokeball;
  int32_t battlesAttacked;
  int32_t battlesDefended;
  int32_t numUpgrades;
  float additionalCpMultiplier;
  int32_t favorite;
  int32_t fromFort;
  int32_t buddyCandyAwarded;
  float buddyTotalKmWalked;
  int32_t displayPokemonId;
  int32_t displayCp;
  NSString *deployedFortId;
  NSString *ownerName;
  NSString *eggIncubatorId;
  NSString *nickname;
  PokemonDisplay *pokemonDisplay;
  uint64_t id_p;
  double eggKmWalkedTarget;
  double eggKmWalkedStart;
  uint64_t capturedCellId;
  uint64_t creationTimeMs;
} PokemonData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PokemonData__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
      },
      {
        .name = "pokemonId",
        .dataTypeSpecific.enumDescFunc = PokemonId_EnumDescriptor,
        .number = PokemonData_FieldNumber_PokemonId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PokemonData__storage_, pokemonId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cp",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_Cp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PokemonData__storage_, cp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "stamina",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_Stamina,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PokemonData__storage_, stamina),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "staminaMax",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_StaminaMax,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PokemonData__storage_, staminaMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "move1",
        .dataTypeSpecific.enumDescFunc = PokemonMove_EnumDescriptor,
        .number = PokemonData_FieldNumber_Move1,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PokemonData__storage_, move1),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "move2",
        .dataTypeSpecific.enumDescFunc = PokemonMove_EnumDescriptor,
        .number = PokemonData_FieldNumber_Move2,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PokemonData__storage_, move2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "deployedFortId",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_DeployedFortId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PokemonData__storage_, deployedFortId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ownerName",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_OwnerName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PokemonData__storage_, ownerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isEgg",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_IsEgg,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "eggKmWalkedTarget",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_EggKmWalkedTarget,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PokemonData__storage_, eggKmWalkedTarget),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "eggKmWalkedStart",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_EggKmWalkedStart,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PokemonData__storage_, eggKmWalkedStart),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "origin",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_Origin,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PokemonData__storage_, origin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "heightM",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_HeightM,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PokemonData__storage_, heightM),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "weightKg",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_WeightKg,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PokemonData__storage_, weightKg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "individualAttack",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_IndividualAttack,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PokemonData__storage_, individualAttack),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "individualDefense",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_IndividualDefense,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PokemonData__storage_, individualDefense),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "individualStamina",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_IndividualStamina,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PokemonData__storage_, individualStamina),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cpMultiplier",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_CpMultiplier,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PokemonData__storage_, cpMultiplier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "pokeball",
        .dataTypeSpecific.enumDescFunc = ItemId_EnumDescriptor,
        .number = PokemonData_FieldNumber_Pokeball,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(PokemonData__storage_, pokeball),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "capturedCellId",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_CapturedCellId,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(PokemonData__storage_, capturedCellId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "battlesAttacked",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_BattlesAttacked,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(PokemonData__storage_, battlesAttacked),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "battlesDefended",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_BattlesDefended,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(PokemonData__storage_, battlesDefended),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "eggIncubatorId",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_EggIncubatorId,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(PokemonData__storage_, eggIncubatorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "creationTimeMs",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_CreationTimeMs,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(PokemonData__storage_, creationTimeMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "numUpgrades",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_NumUpgrades,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(PokemonData__storage_, numUpgrades),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "additionalCpMultiplier",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_AdditionalCpMultiplier,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(PokemonData__storage_, additionalCpMultiplier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "favorite",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_Favorite,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(PokemonData__storage_, favorite),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_Nickname,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(PokemonData__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromFort",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_FromFort,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(PokemonData__storage_, fromFort),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "buddyCandyAwarded",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_BuddyCandyAwarded,
        .hasIndex = 31,
        .offset = (uint32_t)offsetof(PokemonData__storage_, buddyCandyAwarded),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "buddyTotalKmWalked",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_BuddyTotalKmWalked,
        .hasIndex = 32,
        .offset = (uint32_t)offsetof(PokemonData__storage_, buddyTotalKmWalked),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "displayPokemonId",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_DisplayPokemonId,
        .hasIndex = 33,
        .offset = (uint32_t)offsetof(PokemonData__storage_, displayPokemonId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "displayCp",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_DisplayCp,
        .hasIndex = 34,
        .offset = (uint32_t)offsetof(PokemonData__storage_, displayCp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pokemonDisplay",
        .dataTypeSpecific.className = GPBStringifySymbol(PokemonDisplay),
        .number = PokemonData_FieldNumber_PokemonDisplay,
        .hasIndex = 35,
        .offset = (uint32_t)offsetof(PokemonData__storage_, pokemonDisplay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isBad",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_IsBad,
        .hasIndex = 36,
        .offset = 37,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "hatchedFromEgg",
        .dataTypeSpecific.className = NULL,
        .number = PokemonData_FieldNumber_HatchedFromEgg,
        .hasIndex = 38,
        .offset = 39,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PokemonData class]
                                     rootClass:[PogoprotosDataRoot class]
                                          file:PogoprotosDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PokemonData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\006\004\201\000\007\004\201\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PokemonData_PokemonId_RawValue(PokemonData *message) {
  GPBDescriptor *descriptor = [PokemonData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonData_FieldNumber_PokemonId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPokemonData_PokemonId_RawValue(PokemonData *message, int32_t value) {
  GPBDescriptor *descriptor = [PokemonData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonData_FieldNumber_PokemonId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PokemonData_Move1_RawValue(PokemonData *message) {
  GPBDescriptor *descriptor = [PokemonData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonData_FieldNumber_Move1];
  return GPBGetMessageInt32Field(message, field);
}

void SetPokemonData_Move1_RawValue(PokemonData *message, int32_t value) {
  GPBDescriptor *descriptor = [PokemonData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonData_FieldNumber_Move1];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PokemonData_Move2_RawValue(PokemonData *message) {
  GPBDescriptor *descriptor = [PokemonData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonData_FieldNumber_Move2];
  return GPBGetMessageInt32Field(message, field);
}

void SetPokemonData_Move2_RawValue(PokemonData *message, int32_t value) {
  GPBDescriptor *descriptor = [PokemonData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonData_FieldNumber_Move2];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PokemonData_Pokeball_RawValue(PokemonData *message) {
  GPBDescriptor *descriptor = [PokemonData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonData_FieldNumber_Pokeball];
  return GPBGetMessageInt32Field(message, field);
}

void SetPokemonData_Pokeball_RawValue(PokemonData *message, int32_t value) {
  GPBDescriptor *descriptor = [PokemonData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonData_FieldNumber_Pokeball];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PokemonDisplay

@implementation PokemonDisplay

@dynamic costume;
@dynamic gender;
@dynamic shiny;
@dynamic form;

typedef struct PokemonDisplay__storage_ {
  uint32_t _has_storage_[1];
  Costume costume;
  Gender gender;
  Form form;
} PokemonDisplay__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "costume",
        .dataTypeSpecific.enumDescFunc = Costume_EnumDescriptor,
        .number = PokemonDisplay_FieldNumber_Costume,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PokemonDisplay__storage_, costume),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "gender",
        .dataTypeSpecific.enumDescFunc = Gender_EnumDescriptor,
        .number = PokemonDisplay_FieldNumber_Gender,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PokemonDisplay__storage_, gender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "shiny",
        .dataTypeSpecific.className = NULL,
        .number = PokemonDisplay_FieldNumber_Shiny,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "form",
        .dataTypeSpecific.enumDescFunc = Form_EnumDescriptor,
        .number = PokemonDisplay_FieldNumber_Form,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PokemonDisplay__storage_, form),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PokemonDisplay class]
                                     rootClass:[PogoprotosDataRoot class]
                                          file:PogoprotosDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PokemonDisplay__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PokemonDisplay_Costume_RawValue(PokemonDisplay *message) {
  GPBDescriptor *descriptor = [PokemonDisplay descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonDisplay_FieldNumber_Costume];
  return GPBGetMessageInt32Field(message, field);
}

void SetPokemonDisplay_Costume_RawValue(PokemonDisplay *message, int32_t value) {
  GPBDescriptor *descriptor = [PokemonDisplay descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonDisplay_FieldNumber_Costume];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PokemonDisplay_Gender_RawValue(PokemonDisplay *message) {
  GPBDescriptor *descriptor = [PokemonDisplay descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonDisplay_FieldNumber_Gender];
  return GPBGetMessageInt32Field(message, field);
}

void SetPokemonDisplay_Gender_RawValue(PokemonDisplay *message, int32_t value) {
  GPBDescriptor *descriptor = [PokemonDisplay descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonDisplay_FieldNumber_Gender];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PokemonDisplay_Form_RawValue(PokemonDisplay *message) {
  GPBDescriptor *descriptor = [PokemonDisplay descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonDisplay_FieldNumber_Form];
  return GPBGetMessageInt32Field(message, field);
}

void SetPokemonDisplay_Form_RawValue(PokemonDisplay *message, int32_t value) {
  GPBDescriptor *descriptor = [PokemonDisplay descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonDisplay_FieldNumber_Form];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RedeemPasscodeReward

@implementation RedeemPasscodeReward

@dynamic itemsArray, itemsArray_Count;
@dynamic avatarItemsArray, avatarItemsArray_Count;
@dynamic eggPokemonArray, eggPokemonArray_Count;
@dynamic pokemonArray, pokemonArray_Count;
@dynamic pokeCandyArray, pokeCandyArray_Count;
@dynamic stardust;
@dynamic pokecoins;
@dynamic badgesArray, badgesArray_Count;

typedef struct RedeemPasscodeReward__storage_ {
  uint32_t _has_storage_[1];
  int32_t stardust;
  int32_t pokecoins;
  NSMutableArray *itemsArray;
  NSMutableArray *avatarItemsArray;
  NSMutableArray *eggPokemonArray;
  NSMutableArray *pokemonArray;
  NSMutableArray *pokeCandyArray;
  GPBEnumArray *badgesArray;
} RedeemPasscodeReward__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RedeemedItem),
        .number = RedeemPasscodeReward_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedeemPasscodeReward__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "avatarItemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RedeemedAvatarItem),
        .number = RedeemPasscodeReward_FieldNumber_AvatarItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedeemPasscodeReward__storage_, avatarItemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "eggPokemonArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PokemonData),
        .number = RedeemPasscodeReward_FieldNumber_EggPokemonArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedeemPasscodeReward__storage_, eggPokemonArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pokemonArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PokemonData),
        .number = RedeemPasscodeReward_FieldNumber_PokemonArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedeemPasscodeReward__storage_, pokemonArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pokeCandyArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PokeCandy),
        .number = RedeemPasscodeReward_FieldNumber_PokeCandyArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedeemPasscodeReward__storage_, pokeCandyArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stardust",
        .dataTypeSpecific.className = NULL,
        .number = RedeemPasscodeReward_FieldNumber_Stardust,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedeemPasscodeReward__storage_, stardust),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pokecoins",
        .dataTypeSpecific.className = NULL,
        .number = RedeemPasscodeReward_FieldNumber_Pokecoins,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedeemPasscodeReward__storage_, pokecoins),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "badgesArray",
        .dataTypeSpecific.enumDescFunc = GymBadgeType_EnumDescriptor,
        .number = RedeemPasscodeReward_FieldNumber_BadgesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RedeemPasscodeReward__storage_, badgesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedeemPasscodeReward class]
                                     rootClass:[PogoprotosDataRoot class]
                                          file:PogoprotosDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedeemPasscodeReward__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
