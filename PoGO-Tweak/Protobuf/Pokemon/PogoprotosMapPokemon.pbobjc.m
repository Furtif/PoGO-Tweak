// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Map.Pokemon.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PogoprotosMapPokemon.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PogoprotosMapPokemonRoot

@implementation PogoprotosMapPokemonRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PogoprotosMapPokemonRoot_FileDescriptor

static GPBFileDescriptor *PogoprotosMapPokemonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Map.Pokemon"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - LobbyPokemon

@implementation LobbyPokemon

@dynamic id_p;
@dynamic pokedexId;
@dynamic cp;
@dynamic percentHealth;

typedef struct LobbyPokemon__storage_ {
  uint32_t _has_storage_[1];
  PokemonId pokedexId;
  int32_t cp;
  float percentHealth;
  int64_t id_p;
} LobbyPokemon__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = LobbyPokemon_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LobbyPokemon__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pokedexId",
        .dataTypeSpecific.enumDescFunc = PokemonId_EnumDescriptor,
        .number = LobbyPokemon_FieldNumber_PokedexId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LobbyPokemon__storage_, pokedexId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cp",
        .dataTypeSpecific.className = NULL,
        .number = LobbyPokemon_FieldNumber_Cp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LobbyPokemon__storage_, cp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "percentHealth",
        .dataTypeSpecific.className = NULL,
        .number = LobbyPokemon_FieldNumber_PercentHealth,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LobbyPokemon__storage_, percentHealth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LobbyPokemon class]
                                     rootClass:[PogoprotosMapPokemonRoot class]
                                          file:PogoprotosMapPokemonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LobbyPokemon__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t LobbyPokemon_PokedexId_RawValue(LobbyPokemon *message) {
  GPBDescriptor *descriptor = [LobbyPokemon descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LobbyPokemon_FieldNumber_PokedexId];
  return GPBGetMessageInt32Field(message, field);
}

void SetLobbyPokemon_PokedexId_RawValue(LobbyPokemon *message, int32_t value) {
  GPBDescriptor *descriptor = [LobbyPokemon descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LobbyPokemon_FieldNumber_PokedexId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - MapPokemon

@implementation MapPokemon

@dynamic spawnPointId;
@dynamic encounterId;
@dynamic pokemonId;
@dynamic expirationTimestampMs;
@dynamic latitude;
@dynamic longitude;
@dynamic hasPokemonDisplay, pokemonDisplay;

typedef struct MapPokemon__storage_ {
  uint32_t _has_storage_[1];
  PokemonId pokemonId;
  NSString *spawnPointId;
  PokemonDisplay *pokemonDisplay;
  uint64_t encounterId;
  int64_t expirationTimestampMs;
  double latitude;
  double longitude;
} MapPokemon__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spawnPointId",
        .dataTypeSpecific.className = NULL,
        .number = MapPokemon_FieldNumber_SpawnPointId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MapPokemon__storage_, spawnPointId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "encounterId",
        .dataTypeSpecific.className = NULL,
        .number = MapPokemon_FieldNumber_EncounterId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MapPokemon__storage_, encounterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
      },
      {
        .name = "pokemonId",
        .dataTypeSpecific.enumDescFunc = PokemonId_EnumDescriptor,
        .number = MapPokemon_FieldNumber_PokemonId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MapPokemon__storage_, pokemonId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "expirationTimestampMs",
        .dataTypeSpecific.className = NULL,
        .number = MapPokemon_FieldNumber_ExpirationTimestampMs,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MapPokemon__storage_, expirationTimestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = MapPokemon_FieldNumber_Latitude,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MapPokemon__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = MapPokemon_FieldNumber_Longitude,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MapPokemon__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "pokemonDisplay",
        .dataTypeSpecific.className = GPBStringifySymbol(PokemonDisplay),
        .number = MapPokemon_FieldNumber_PokemonDisplay,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MapPokemon__storage_, pokemonDisplay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MapPokemon class]
                                     rootClass:[PogoprotosMapPokemonRoot class]
                                          file:PogoprotosMapPokemonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MapPokemon__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MapPokemon_PokemonId_RawValue(MapPokemon *message) {
  GPBDescriptor *descriptor = [MapPokemon descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MapPokemon_FieldNumber_PokemonId];
  return GPBGetMessageInt32Field(message, field);
}

void SetMapPokemon_PokemonId_RawValue(MapPokemon *message, int32_t value) {
  GPBDescriptor *descriptor = [MapPokemon descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MapPokemon_FieldNumber_PokemonId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - MotivatedPokemon

@implementation MotivatedPokemon

@dynamic hasPokemon, pokemon;
@dynamic deployMs;
@dynamic cpWhenDeployed;
@dynamic motivationNow;
@dynamic cpNow;
@dynamic berryValue;
@dynamic feedCooldownDurationMillis;
@dynamic foodValueArray, foodValueArray_Count;

typedef struct MotivatedPokemon__storage_ {
  uint32_t _has_storage_[1];
  int32_t cpWhenDeployed;
  int32_t cpNow;
  float berryValue;
  PokemonData *pokemon;
  NSMutableArray *foodValueArray;
  int64_t deployMs;
  double motivationNow;
  int64_t feedCooldownDurationMillis;
} MotivatedPokemon__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pokemon",
        .dataTypeSpecific.className = GPBStringifySymbol(PokemonData),
        .number = MotivatedPokemon_FieldNumber_Pokemon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MotivatedPokemon__storage_, pokemon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deployMs",
        .dataTypeSpecific.className = NULL,
        .number = MotivatedPokemon_FieldNumber_DeployMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MotivatedPokemon__storage_, deployMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cpWhenDeployed",
        .dataTypeSpecific.className = NULL,
        .number = MotivatedPokemon_FieldNumber_CpWhenDeployed,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MotivatedPokemon__storage_, cpWhenDeployed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "motivationNow",
        .dataTypeSpecific.className = NULL,
        .number = MotivatedPokemon_FieldNumber_MotivationNow,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MotivatedPokemon__storage_, motivationNow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "cpNow",
        .dataTypeSpecific.className = NULL,
        .number = MotivatedPokemon_FieldNumber_CpNow,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MotivatedPokemon__storage_, cpNow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "berryValue",
        .dataTypeSpecific.className = NULL,
        .number = MotivatedPokemon_FieldNumber_BerryValue,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MotivatedPokemon__storage_, berryValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "feedCooldownDurationMillis",
        .dataTypeSpecific.className = NULL,
        .number = MotivatedPokemon_FieldNumber_FeedCooldownDurationMillis,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MotivatedPokemon__storage_, feedCooldownDurationMillis),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "foodValueArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FoodValue),
        .number = MotivatedPokemon_FieldNumber_FoodValueArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MotivatedPokemon__storage_, foodValueArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MotivatedPokemon class]
                                     rootClass:[PogoprotosMapPokemonRoot class]
                                          file:PogoprotosMapPokemonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MotivatedPokemon__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NearbyPokemon

@implementation NearbyPokemon

@dynamic pokemonId;
@dynamic distanceInMeters;
@dynamic encounterId;
@dynamic fortId;
@dynamic fortImageURL;
@dynamic hasPokemonDisplay, pokemonDisplay;

typedef struct NearbyPokemon__storage_ {
  uint32_t _has_storage_[1];
  PokemonId pokemonId;
  float distanceInMeters;
  NSString *fortId;
  NSString *fortImageURL;
  PokemonDisplay *pokemonDisplay;
  uint64_t encounterId;
} NearbyPokemon__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pokemonId",
        .dataTypeSpecific.enumDescFunc = PokemonId_EnumDescriptor,
        .number = NearbyPokemon_FieldNumber_PokemonId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NearbyPokemon__storage_, pokemonId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "distanceInMeters",
        .dataTypeSpecific.className = NULL,
        .number = NearbyPokemon_FieldNumber_DistanceInMeters,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NearbyPokemon__storage_, distanceInMeters),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "encounterId",
        .dataTypeSpecific.className = NULL,
        .number = NearbyPokemon_FieldNumber_EncounterId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NearbyPokemon__storage_, encounterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
      },
      {
        .name = "fortId",
        .dataTypeSpecific.className = NULL,
        .number = NearbyPokemon_FieldNumber_FortId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NearbyPokemon__storage_, fortId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fortImageURL",
        .dataTypeSpecific.className = NULL,
        .number = NearbyPokemon_FieldNumber_FortImageURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NearbyPokemon__storage_, fortImageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pokemonDisplay",
        .dataTypeSpecific.className = GPBStringifySymbol(PokemonDisplay),
        .number = NearbyPokemon_FieldNumber_PokemonDisplay,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(NearbyPokemon__storage_, pokemonDisplay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NearbyPokemon class]
                                     rootClass:[PogoprotosMapPokemonRoot class]
                                          file:PogoprotosMapPokemonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NearbyPokemon__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005\004\245\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t NearbyPokemon_PokemonId_RawValue(NearbyPokemon *message) {
  GPBDescriptor *descriptor = [NearbyPokemon descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NearbyPokemon_FieldNumber_PokemonId];
  return GPBGetMessageInt32Field(message, field);
}

void SetNearbyPokemon_PokemonId_RawValue(NearbyPokemon *message, int32_t value) {
  GPBDescriptor *descriptor = [NearbyPokemon descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NearbyPokemon_FieldNumber_PokemonId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - WildPokemon

@implementation WildPokemon

@dynamic encounterId;
@dynamic lastModifiedTimestampMs;
@dynamic latitude;
@dynamic longitude;
@dynamic spawnPointId;
@dynamic hasPokemonData, pokemonData;
@dynamic timeTillHiddenMs;

typedef struct WildPokemon__storage_ {
  uint32_t _has_storage_[1];
  int32_t timeTillHiddenMs;
  NSString *spawnPointId;
  PokemonData *pokemonData;
  uint64_t encounterId;
  int64_t lastModifiedTimestampMs;
  double latitude;
  double longitude;
} WildPokemon__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "encounterId",
        .dataTypeSpecific.className = NULL,
        .number = WildPokemon_FieldNumber_EncounterId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WildPokemon__storage_, encounterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
      },
      {
        .name = "lastModifiedTimestampMs",
        .dataTypeSpecific.className = NULL,
        .number = WildPokemon_FieldNumber_LastModifiedTimestampMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WildPokemon__storage_, lastModifiedTimestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = WildPokemon_FieldNumber_Latitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WildPokemon__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = WildPokemon_FieldNumber_Longitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WildPokemon__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "spawnPointId",
        .dataTypeSpecific.className = NULL,
        .number = WildPokemon_FieldNumber_SpawnPointId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WildPokemon__storage_, spawnPointId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pokemonData",
        .dataTypeSpecific.className = GPBStringifySymbol(PokemonData),
        .number = WildPokemon_FieldNumber_PokemonData,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(WildPokemon__storage_, pokemonData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timeTillHiddenMs",
        .dataTypeSpecific.className = NULL,
        .number = WildPokemon_FieldNumber_TimeTillHiddenMs,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(WildPokemon__storage_, timeTillHiddenMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WildPokemon class]
                                     rootClass:[PogoprotosMapPokemonRoot class]
                                          file:PogoprotosMapPokemonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WildPokemon__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
