// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Networking.Requests.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PogoprotosNetworkingRequests.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PogoprotosNetworkingRequestsRoot

@implementation PogoprotosNetworkingRequestsRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PogoprotosNetworkingRequestsRoot_FileDescriptor

static GPBFileDescriptor *PogoprotosNetworkingRequestsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Networking.Requests"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum RequestType

GPBEnumDescriptor *RequestType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "MethodUnset\000GetPlayer\000GetInventory\000Downl"
        "oadSettings\000DownloadItemTemplates\000Downlo"
        "adRemoteConfigVersion\000RegisterBackground"
        "Device\000FortSearch\000Encounter\000CatchPokemon"
        "\000FortDetails\000GetMapObjects\000FortDeployPok"
        "emon\000FortRecallPokemon\000ReleasePokemon\000Us"
        "eItemPotion\000UseItemCapture\000UseItemFlee\000U"
        "seItemRevive\000GetPlayerProfile\000EvolvePoke"
        "mon\000GetHatchedEggs\000EncounterTutorialComp"
        "lete\000LevelUpRewards\000CheckAwardedBadges\000U"
        "seItemGym\000GetGymDetails\000StartGymBattle\000A"
        "ttackGym\000RecycleInventoryItem\000CollectDai"
        "lyBonus\000UseItemXpBoost\000UseItemEggIncubat"
        "or\000UseIncense\000GetIncensePokemon\000IncenseE"
        "ncounter\000AddFortModifier\000DiskEncounter\000C"
        "ollectDailyDefenderBonus\000UpgradePokemon\000"
        "SetFavoritePokemon\000NicknamePokemon\000Equip"
        "Badge\000SetContactSettings\000SetBuddyPokemon"
        "\000GetBuddyWalked\000UseItemEncounter\000GymDepl"
        "oy\000GymGetInfo\000GymStartSession\000GymBattleA"
        "ttack\000JoinLobby\000LeaveLobby\000SetLobbyVisib"
        "ility\000SetLobbyPokemon\000GetRaidDetails\000Gym"
        "FeedPokemon\000StartRaidBattle\000AttackRaid\000G"
        "etAssetDigest\000GetDownloadUrls\000ClaimCoden"
        "ame\000SetAvatar\000SetPlayerTeam\000MarkTutorial"
        "Complete\000CheckChallenge\000VerifyChallenge\000"
        "Echo\000SfidaRegistration\000SfidaActionLog\000Sf"
        "idaCertification\000SfidaUpdate\000SfidaAction"
        "\000SfidaDowser\000SfidaCapture\000ListAvatarCust"
        "omizations\000SetAvatarItemAsViewed\000GetInbo"
        "x\000ListGymBadges\000GetGymBadgeDetails\000UseIt"
        "emMoveReroll\000UseItemRareCandy\000RegisterPu"
        "shNotification\000UnregisterPushNotificatio"
        "n\000UpdateNotificationStatus\000OptOutPushNot"
        "ificationCategory\000";
    static const int32_t values[] = {
        RequestType_MethodUnset,
        RequestType_GetPlayer,
        RequestType_GetInventory,
        RequestType_DownloadSettings,
        RequestType_DownloadItemTemplates,
        RequestType_DownloadRemoteConfigVersion,
        RequestType_RegisterBackgroundDevice,
        RequestType_FortSearch,
        RequestType_Encounter,
        RequestType_CatchPokemon,
        RequestType_FortDetails,
        RequestType_GetMapObjects,
        RequestType_FortDeployPokemon,
        RequestType_FortRecallPokemon,
        RequestType_ReleasePokemon,
        RequestType_UseItemPotion,
        RequestType_UseItemCapture,
        RequestType_UseItemFlee,
        RequestType_UseItemRevive,
        RequestType_GetPlayerProfile,
        RequestType_EvolvePokemon,
        RequestType_GetHatchedEggs,
        RequestType_EncounterTutorialComplete,
        RequestType_LevelUpRewards,
        RequestType_CheckAwardedBadges,
        RequestType_UseItemGym,
        RequestType_GetGymDetails,
        RequestType_StartGymBattle,
        RequestType_AttackGym,
        RequestType_RecycleInventoryItem,
        RequestType_CollectDailyBonus,
        RequestType_UseItemXpBoost,
        RequestType_UseItemEggIncubator,
        RequestType_UseIncense,
        RequestType_GetIncensePokemon,
        RequestType_IncenseEncounter,
        RequestType_AddFortModifier,
        RequestType_DiskEncounter,
        RequestType_CollectDailyDefenderBonus,
        RequestType_UpgradePokemon,
        RequestType_SetFavoritePokemon,
        RequestType_NicknamePokemon,
        RequestType_EquipBadge,
        RequestType_SetContactSettings,
        RequestType_SetBuddyPokemon,
        RequestType_GetBuddyWalked,
        RequestType_UseItemEncounter,
        RequestType_GymDeploy,
        RequestType_GymGetInfo,
        RequestType_GymStartSession,
        RequestType_GymBattleAttack,
        RequestType_JoinLobby,
        RequestType_LeaveLobby,
        RequestType_SetLobbyVisibility,
        RequestType_SetLobbyPokemon,
        RequestType_GetRaidDetails,
        RequestType_GymFeedPokemon,
        RequestType_StartRaidBattle,
        RequestType_AttackRaid,
        RequestType_GetAssetDigest,
        RequestType_GetDownloadUrls,
        RequestType_ClaimCodename,
        RequestType_SetAvatar,
        RequestType_SetPlayerTeam,
        RequestType_MarkTutorialComplete,
        RequestType_CheckChallenge,
        RequestType_VerifyChallenge,
        RequestType_Echo,
        RequestType_SfidaRegistration,
        RequestType_SfidaActionLog,
        RequestType_SfidaCertification,
        RequestType_SfidaUpdate,
        RequestType_SfidaAction,
        RequestType_SfidaDowser,
        RequestType_SfidaCapture,
        RequestType_ListAvatarCustomizations,
        RequestType_SetAvatarItemAsViewed,
        RequestType_GetInbox,
        RequestType_ListGymBadges,
        RequestType_GetGymBadgeDetails,
        RequestType_UseItemMoveReroll,
        RequestType_UseItemRareCandy,
        RequestType_RegisterPushNotification,
        RequestType_UnregisterPushNotification,
        RequestType_UpdateNotificationStatus,
        RequestType_OptOutPushNotificationCategory,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RequestType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RequestType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RequestType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RequestType_MethodUnset:
    case RequestType_GetPlayer:
    case RequestType_GetInventory:
    case RequestType_DownloadSettings:
    case RequestType_DownloadItemTemplates:
    case RequestType_DownloadRemoteConfigVersion:
    case RequestType_RegisterBackgroundDevice:
    case RequestType_FortSearch:
    case RequestType_Encounter:
    case RequestType_CatchPokemon:
    case RequestType_FortDetails:
    case RequestType_GetMapObjects:
    case RequestType_FortDeployPokemon:
    case RequestType_FortRecallPokemon:
    case RequestType_ReleasePokemon:
    case RequestType_UseItemPotion:
    case RequestType_UseItemCapture:
    case RequestType_UseItemFlee:
    case RequestType_UseItemRevive:
    case RequestType_GetPlayerProfile:
    case RequestType_EvolvePokemon:
    case RequestType_GetHatchedEggs:
    case RequestType_EncounterTutorialComplete:
    case RequestType_LevelUpRewards:
    case RequestType_CheckAwardedBadges:
    case RequestType_UseItemGym:
    case RequestType_GetGymDetails:
    case RequestType_StartGymBattle:
    case RequestType_AttackGym:
    case RequestType_RecycleInventoryItem:
    case RequestType_CollectDailyBonus:
    case RequestType_UseItemXpBoost:
    case RequestType_UseItemEggIncubator:
    case RequestType_UseIncense:
    case RequestType_GetIncensePokemon:
    case RequestType_IncenseEncounter:
    case RequestType_AddFortModifier:
    case RequestType_DiskEncounter:
    case RequestType_CollectDailyDefenderBonus:
    case RequestType_UpgradePokemon:
    case RequestType_SetFavoritePokemon:
    case RequestType_NicknamePokemon:
    case RequestType_EquipBadge:
    case RequestType_SetContactSettings:
    case RequestType_SetBuddyPokemon:
    case RequestType_GetBuddyWalked:
    case RequestType_UseItemEncounter:
    case RequestType_GymDeploy:
    case RequestType_GymGetInfo:
    case RequestType_GymStartSession:
    case RequestType_GymBattleAttack:
    case RequestType_JoinLobby:
    case RequestType_LeaveLobby:
    case RequestType_SetLobbyVisibility:
    case RequestType_SetLobbyPokemon:
    case RequestType_GetRaidDetails:
    case RequestType_GymFeedPokemon:
    case RequestType_StartRaidBattle:
    case RequestType_AttackRaid:
    case RequestType_GetAssetDigest:
    case RequestType_GetDownloadUrls:
    case RequestType_ClaimCodename:
    case RequestType_SetAvatar:
    case RequestType_SetPlayerTeam:
    case RequestType_MarkTutorialComplete:
    case RequestType_CheckChallenge:
    case RequestType_VerifyChallenge:
    case RequestType_Echo:
    case RequestType_SfidaRegistration:
    case RequestType_SfidaActionLog:
    case RequestType_SfidaCertification:
    case RequestType_SfidaUpdate:
    case RequestType_SfidaAction:
    case RequestType_SfidaDowser:
    case RequestType_SfidaCapture:
    case RequestType_ListAvatarCustomizations:
    case RequestType_SetAvatarItemAsViewed:
    case RequestType_GetInbox:
    case RequestType_ListGymBadges:
    case RequestType_GetGymBadgeDetails:
    case RequestType_UseItemMoveReroll:
    case RequestType_UseItemRareCandy:
    case RequestType_RegisterPushNotification:
    case RequestType_UnregisterPushNotification:
    case RequestType_UpdateNotificationStatus:
    case RequestType_OptOutPushNotificationCategory:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Request

@implementation Request

@dynamic requestType;
@dynamic requestMessage;

typedef struct Request__storage_ {
  uint32_t _has_storage_[1];
  RequestType requestType;
  NSData *requestMessage;
} Request__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestType",
        .dataTypeSpecific.enumDescFunc = RequestType_EnumDescriptor,
        .number = Request_FieldNumber_RequestType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Request__storage_, requestType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "requestMessage",
        .dataTypeSpecific.className = NULL,
        .number = Request_FieldNumber_RequestMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Request__storage_, requestMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Request class]
                                     rootClass:[PogoprotosNetworkingRequestsRoot class]
                                          file:PogoprotosNetworkingRequestsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Request__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Request_RequestType_RawValue(Request *message) {
  GPBDescriptor *descriptor = [Request descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Request_FieldNumber_RequestType];
  return GPBGetMessageInt32Field(message, field);
}

void SetRequest_RequestType_RawValue(Request *message, int32_t value) {
  GPBDescriptor *descriptor = [Request descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Request_FieldNumber_RequestType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
