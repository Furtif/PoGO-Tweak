// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Data.Quests.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PogoprotosDataQuests.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PogoprotosDataQuestsRoot

@implementation PogoprotosDataQuestsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PogoprotosDataQuestsRoot_FileDescriptor

static GPBFileDescriptor *PogoprotosDataQuestsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Data.Quests"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DailyQuest

@implementation DailyQuest

@dynamic currentPeriodBucket;
@dynamic currentStreakCount;

typedef struct DailyQuest__storage_ {
  uint32_t _has_storage_[1];
  int32_t currentPeriodBucket;
  int32_t currentStreakCount;
} DailyQuest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currentPeriodBucket",
        .dataTypeSpecific.className = NULL,
        .number = DailyQuest_FieldNumber_CurrentPeriodBucket,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DailyQuest__storage_, currentPeriodBucket),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "currentStreakCount",
        .dataTypeSpecific.className = NULL,
        .number = DailyQuest_FieldNumber_CurrentStreakCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DailyQuest__storage_, currentStreakCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DailyQuest class]
                                     rootClass:[PogoprotosDataQuestsRoot class]
                                          file:PogoprotosDataQuestsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DailyQuest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Quest

@implementation Quest

@dynamic questType;
@dynamic hasDailyQuest, dailyQuest;

typedef struct Quest__storage_ {
  uint32_t _has_storage_[1];
  QuestType questType;
  DailyQuest *dailyQuest;
} Quest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "questType",
        .dataTypeSpecific.enumDescFunc = QuestType_EnumDescriptor,
        .number = Quest_FieldNumber_QuestType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Quest__storage_, questType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "dailyQuest",
        .dataTypeSpecific.className = GPBStringifySymbol(DailyQuest),
        .number = Quest_FieldNumber_DailyQuest,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Quest__storage_, dailyQuest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Quest class]
                                     rootClass:[PogoprotosDataQuestsRoot class]
                                          file:PogoprotosDataQuestsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Quest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Quest_QuestType_RawValue(Quest *message) {
  GPBDescriptor *descriptor = [Quest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Quest_FieldNumber_QuestType];
  return GPBGetMessageInt32Field(message, field);
}

void SetQuest_QuestType_RawValue(Quest *message, int32_t value) {
  GPBDescriptor *descriptor = [Quest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Quest_FieldNumber_QuestType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
