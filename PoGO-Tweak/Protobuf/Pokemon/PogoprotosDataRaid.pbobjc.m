// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Data.Raid.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PogoprotosDataRaid.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PogoprotosDataRaidRoot

@implementation PogoprotosDataRaidRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PogoprotosDataRaidRoot_FileDescriptor

static GPBFileDescriptor *PogoprotosDataRaidRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Data.Raid"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - EventInfo

@implementation EventInfo

@dynamic imageURL;
@dynamic iconURL;
@dynamic nameKey;

typedef struct EventInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *imageURL;
  NSString *iconURL;
  NSString *nameKey;
} EventInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imageURL",
        .dataTypeSpecific.className = NULL,
        .number = EventInfo_FieldNumber_ImageURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EventInfo__storage_, imageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconURL",
        .dataTypeSpecific.className = NULL,
        .number = EventInfo_FieldNumber_IconURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EventInfo__storage_, iconURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nameKey",
        .dataTypeSpecific.className = NULL,
        .number = EventInfo_FieldNumber_NameKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EventInfo__storage_, nameKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EventInfo class]
                                     rootClass:[PogoprotosDataRaidRoot class]
                                          file:PogoprotosDataRaidRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EventInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\005\241!!\000\002\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Participation

@implementation Participation

@dynamic individualDamagePokeballs;
@dynamic teamDamagePokeballs;
@dynamic gymOwnershipPokeballs;
@dynamic basePokeballs;
@dynamic bluePercentage;
@dynamic redPercentage;
@dynamic yellowPercentage;
@dynamic bonusItemMultiplier;

typedef struct Participation__storage_ {
  uint32_t _has_storage_[1];
  int32_t individualDamagePokeballs;
  int32_t teamDamagePokeballs;
  int32_t gymOwnershipPokeballs;
  int32_t basePokeballs;
  float bonusItemMultiplier;
  double bluePercentage;
  double redPercentage;
  double yellowPercentage;
} Participation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "individualDamagePokeballs",
        .dataTypeSpecific.className = NULL,
        .number = Participation_FieldNumber_IndividualDamagePokeballs,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Participation__storage_, individualDamagePokeballs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "teamDamagePokeballs",
        .dataTypeSpecific.className = NULL,
        .number = Participation_FieldNumber_TeamDamagePokeballs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Participation__storage_, teamDamagePokeballs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gymOwnershipPokeballs",
        .dataTypeSpecific.className = NULL,
        .number = Participation_FieldNumber_GymOwnershipPokeballs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Participation__storage_, gymOwnershipPokeballs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "basePokeballs",
        .dataTypeSpecific.className = NULL,
        .number = Participation_FieldNumber_BasePokeballs,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Participation__storage_, basePokeballs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bluePercentage",
        .dataTypeSpecific.className = NULL,
        .number = Participation_FieldNumber_BluePercentage,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Participation__storage_, bluePercentage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "redPercentage",
        .dataTypeSpecific.className = NULL,
        .number = Participation_FieldNumber_RedPercentage,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Participation__storage_, redPercentage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "yellowPercentage",
        .dataTypeSpecific.className = NULL,
        .number = Participation_FieldNumber_YellowPercentage,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Participation__storage_, yellowPercentage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "bonusItemMultiplier",
        .dataTypeSpecific.className = NULL,
        .number = Participation_FieldNumber_BonusItemMultiplier,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Participation__storage_, bonusItemMultiplier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Participation class]
                                     rootClass:[PogoprotosDataRaidRoot class]
                                          file:PogoprotosDataRaidRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Participation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PlayerRaidInfo

@implementation PlayerRaidInfo

@dynamic totalCompletedRaids;
@dynamic totalCompletedLegendaryRaids;
@dynamic raidsArray, raidsArray_Count;

typedef struct PlayerRaidInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t totalCompletedRaids;
  int32_t totalCompletedLegendaryRaids;
  NSMutableArray *raidsArray;
} PlayerRaidInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "totalCompletedRaids",
        .dataTypeSpecific.className = NULL,
        .number = PlayerRaidInfo_FieldNumber_TotalCompletedRaids,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PlayerRaidInfo__storage_, totalCompletedRaids),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "totalCompletedLegendaryRaids",
        .dataTypeSpecific.className = NULL,
        .number = PlayerRaidInfo_FieldNumber_TotalCompletedLegendaryRaids,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PlayerRaidInfo__storage_, totalCompletedLegendaryRaids),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "raidsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Raid),
        .number = PlayerRaidInfo_FieldNumber_RaidsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PlayerRaidInfo__storage_, raidsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlayerRaidInfo class]
                                     rootClass:[PogoprotosDataRaidRoot class]
                                          file:PogoprotosDataRaidRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlayerRaidInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Raid

@implementation Raid

@dynamic raidSeed;
@dynamic startedMs;
@dynamic completedMs;
@dynamic encounterPokemonId;
@dynamic completedBattle;
@dynamic receivedRewards;
@dynamic finishedEncounter;

typedef struct Raid__storage_ {
  uint32_t _has_storage_[1];
  PokemonId encounterPokemonId;
  int64_t raidSeed;
  int64_t startedMs;
  int64_t completedMs;
} Raid__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "raidSeed",
        .dataTypeSpecific.className = NULL,
        .number = Raid_FieldNumber_RaidSeed,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Raid__storage_, raidSeed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "startedMs",
        .dataTypeSpecific.className = NULL,
        .number = Raid_FieldNumber_StartedMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Raid__storage_, startedMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "completedMs",
        .dataTypeSpecific.className = NULL,
        .number = Raid_FieldNumber_CompletedMs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Raid__storage_, completedMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "encounterPokemonId",
        .dataTypeSpecific.enumDescFunc = PokemonId_EnumDescriptor,
        .number = Raid_FieldNumber_EncounterPokemonId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Raid__storage_, encounterPokemonId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "completedBattle",
        .dataTypeSpecific.className = NULL,
        .number = Raid_FieldNumber_CompletedBattle,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "receivedRewards",
        .dataTypeSpecific.className = NULL,
        .number = Raid_FieldNumber_ReceivedRewards,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "finishedEncounter",
        .dataTypeSpecific.className = NULL,
        .number = Raid_FieldNumber_FinishedEncounter,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Raid class]
                                     rootClass:[PogoprotosDataRaidRoot class]
                                          file:PogoprotosDataRaidRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Raid__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Raid_EncounterPokemonId_RawValue(Raid *message) {
  GPBDescriptor *descriptor = [Raid descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Raid_FieldNumber_EncounterPokemonId];
  return GPBGetMessageInt32Field(message, field);
}

void SetRaid_EncounterPokemonId_RawValue(Raid *message, int32_t value) {
  GPBDescriptor *descriptor = [Raid descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Raid_FieldNumber_EncounterPokemonId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RaidEncounter

@implementation RaidEncounter

@dynamic hasPokemon, pokemon;
@dynamic encounterId;
@dynamic spawnpointId;
@dynamic hasCaptureProbabilities, captureProbabilities;
@dynamic throwsRemaining;
@dynamic raidLevel;
@dynamic fortId;

typedef struct RaidEncounter__storage_ {
  uint32_t _has_storage_[1];
  int32_t throwsRemaining;
  RaidLevel raidLevel;
  PokemonData *pokemon;
  NSString *spawnpointId;
  CaptureProbability *captureProbabilities;
  NSString *fortId;
  int64_t encounterId;
} RaidEncounter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pokemon",
        .dataTypeSpecific.className = GPBStringifySymbol(PokemonData),
        .number = RaidEncounter_FieldNumber_Pokemon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RaidEncounter__storage_, pokemon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "encounterId",
        .dataTypeSpecific.className = NULL,
        .number = RaidEncounter_FieldNumber_EncounterId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RaidEncounter__storage_, encounterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "spawnpointId",
        .dataTypeSpecific.className = NULL,
        .number = RaidEncounter_FieldNumber_SpawnpointId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RaidEncounter__storage_, spawnpointId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "captureProbabilities",
        .dataTypeSpecific.className = GPBStringifySymbol(CaptureProbability),
        .number = RaidEncounter_FieldNumber_CaptureProbabilities,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RaidEncounter__storage_, captureProbabilities),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "throwsRemaining",
        .dataTypeSpecific.className = NULL,
        .number = RaidEncounter_FieldNumber_ThrowsRemaining,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RaidEncounter__storage_, throwsRemaining),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "raidLevel",
        .dataTypeSpecific.enumDescFunc = RaidLevel_EnumDescriptor,
        .number = RaidEncounter_FieldNumber_RaidLevel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RaidEncounter__storage_, raidLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fortId",
        .dataTypeSpecific.className = NULL,
        .number = RaidEncounter_FieldNumber_FortId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RaidEncounter__storage_, fortId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RaidEncounter class]
                                     rootClass:[PogoprotosDataRaidRoot class]
                                          file:PogoprotosDataRaidRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RaidEncounter__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RaidEncounter_RaidLevel_RawValue(RaidEncounter *message) {
  GPBDescriptor *descriptor = [RaidEncounter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RaidEncounter_FieldNumber_RaidLevel];
  return GPBGetMessageInt32Field(message, field);
}

void SetRaidEncounter_RaidLevel_RawValue(RaidEncounter *message, int32_t value) {
  GPBDescriptor *descriptor = [RaidEncounter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RaidEncounter_FieldNumber_RaidLevel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RaidInfo

@implementation RaidInfo

@dynamic raidSeed;
@dynamic raidSpawnMs;
@dynamic raidBattleMs;
@dynamic raidEndMs;
@dynamic hasRaidPokemon, raidPokemon;
@dynamic raidLevel;
@dynamic complete;
@dynamic isExclusive;
@dynamic isRaidHidden;

typedef struct RaidInfo__storage_ {
  uint32_t _has_storage_[1];
  RaidLevel raidLevel;
  PokemonData *raidPokemon;
  int64_t raidSeed;
  int64_t raidSpawnMs;
  int64_t raidBattleMs;
  int64_t raidEndMs;
} RaidInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "raidSeed",
        .dataTypeSpecific.className = NULL,
        .number = RaidInfo_FieldNumber_RaidSeed,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RaidInfo__storage_, raidSeed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "raidSpawnMs",
        .dataTypeSpecific.className = NULL,
        .number = RaidInfo_FieldNumber_RaidSpawnMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RaidInfo__storage_, raidSpawnMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "raidBattleMs",
        .dataTypeSpecific.className = NULL,
        .number = RaidInfo_FieldNumber_RaidBattleMs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RaidInfo__storage_, raidBattleMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "raidEndMs",
        .dataTypeSpecific.className = NULL,
        .number = RaidInfo_FieldNumber_RaidEndMs,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RaidInfo__storage_, raidEndMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "raidPokemon",
        .dataTypeSpecific.className = GPBStringifySymbol(PokemonData),
        .number = RaidInfo_FieldNumber_RaidPokemon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RaidInfo__storage_, raidPokemon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "raidLevel",
        .dataTypeSpecific.enumDescFunc = RaidLevel_EnumDescriptor,
        .number = RaidInfo_FieldNumber_RaidLevel,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RaidInfo__storage_, raidLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "complete",
        .dataTypeSpecific.className = NULL,
        .number = RaidInfo_FieldNumber_Complete,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isExclusive",
        .dataTypeSpecific.className = NULL,
        .number = RaidInfo_FieldNumber_IsExclusive,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isRaidHidden",
        .dataTypeSpecific.className = NULL,
        .number = RaidInfo_FieldNumber_IsRaidHidden,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RaidInfo class]
                                     rootClass:[PogoprotosDataRaidRoot class]
                                          file:PogoprotosDataRaidRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RaidInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RaidInfo_RaidLevel_RawValue(RaidInfo *message) {
  GPBDescriptor *descriptor = [RaidInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RaidInfo_FieldNumber_RaidLevel];
  return GPBGetMessageInt32Field(message, field);
}

void SetRaidInfo_RaidLevel_RawValue(RaidInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [RaidInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RaidInfo_FieldNumber_RaidLevel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
