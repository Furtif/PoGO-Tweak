// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Data.Gym.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PogoprotosDataGym.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PogoprotosDataGymRoot

@implementation PogoprotosDataGymRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PogoprotosDataGymRoot_FileDescriptor

static GPBFileDescriptor *PogoprotosDataGymRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Data.Gym"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GymMembership

@implementation GymMembership

@dynamic hasPokemonData, pokemonData;
@dynamic hasTrainerPublicProfile, trainerPublicProfile;
@dynamic hasTrainingPokemon, trainingPokemon;

typedef struct GymMembership__storage_ {
  uint32_t _has_storage_[1];
  PokemonData *pokemonData;
  PlayerPublicProfile *trainerPublicProfile;
  PokemonData *trainingPokemon;
} GymMembership__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pokemonData",
        .dataTypeSpecific.className = GPBStringifySymbol(PokemonData),
        .number = GymMembership_FieldNumber_PokemonData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GymMembership__storage_, pokemonData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "trainerPublicProfile",
        .dataTypeSpecific.className = GPBStringifySymbol(PlayerPublicProfile),
        .number = GymMembership_FieldNumber_TrainerPublicProfile,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GymMembership__storage_, trainerPublicProfile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "trainingPokemon",
        .dataTypeSpecific.className = GPBStringifySymbol(PokemonData),
        .number = GymMembership_FieldNumber_TrainingPokemon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GymMembership__storage_, trainingPokemon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GymMembership class]
                                     rootClass:[PogoprotosDataGymRoot class]
                                          file:PogoprotosDataGymRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GymMembership__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GymState

@implementation GymState

@dynamic hasFortData, fortData;
@dynamic membershipsArray, membershipsArray_Count;
@dynamic deployLockout;

typedef struct GymState__storage_ {
  uint32_t _has_storage_[1];
  FortData *fortData;
  NSMutableArray *membershipsArray;
} GymState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fortData",
        .dataTypeSpecific.className = GPBStringifySymbol(FortData),
        .number = GymState_FieldNumber_FortData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GymState__storage_, fortData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "membershipsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GymMembership),
        .number = GymState_FieldNumber_MembershipsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GymState__storage_, membershipsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deployLockout",
        .dataTypeSpecific.className = NULL,
        .number = GymState_FieldNumber_DeployLockout,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GymState class]
                                     rootClass:[PogoprotosDataGymRoot class]
                                          file:PogoprotosDataGymRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GymState__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
