// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Enums.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PogoprotosEnums.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PogoprotosEnumsRoot

@implementation PogoprotosEnumsRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum ActivityType

GPBEnumDescriptor *ActivityType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ActivityUnknown\000ActivityCatchPokemon\000Act"
        "ivityCatchLegendPokemon\000ActivityFleePoke"
        "mon\000ActivityDefeatFort\000ActivityEvolvePok"
        "emon\000ActivityHatchEgg\000ActivityWalkKm\000Act"
        "ivityPokedexEntryNew\000ActivityCatchFirstT"
        "hrow\000ActivityCatchNiceThrow\000ActivityCatc"
        "hGreatThrow\000ActivityCatchExcellentThrow\000"
        "ActivityCatchCurveball\000ActivityCatchFirs"
        "tCatchOfDay\000ActivityCatchMilestone\000Activ"
        "ityTrainPokemon\000ActivitySearchFort\000Activ"
        "ityReleasePokemon\000ActivityHatchEggSmallB"
        "onus\000ActivityHatchEggMediumBonus\000Activit"
        "yHatchEggLargeBonus\000ActivityDefeatGymDef"
        "ender\000ActivityDefeatGymLeader\000ActivityCa"
        "tchFirstCatchStreakBonus\000ActivitySearchF"
        "ortFirstOfTheDay\000ActivitySearchFortStrea"
        "kBonus\000";
    static const int32_t values[] = {
        ActivityType_ActivityUnknown,
        ActivityType_ActivityCatchPokemon,
        ActivityType_ActivityCatchLegendPokemon,
        ActivityType_ActivityFleePokemon,
        ActivityType_ActivityDefeatFort,
        ActivityType_ActivityEvolvePokemon,
        ActivityType_ActivityHatchEgg,
        ActivityType_ActivityWalkKm,
        ActivityType_ActivityPokedexEntryNew,
        ActivityType_ActivityCatchFirstThrow,
        ActivityType_ActivityCatchNiceThrow,
        ActivityType_ActivityCatchGreatThrow,
        ActivityType_ActivityCatchExcellentThrow,
        ActivityType_ActivityCatchCurveball,
        ActivityType_ActivityCatchFirstCatchOfDay,
        ActivityType_ActivityCatchMilestone,
        ActivityType_ActivityTrainPokemon,
        ActivityType_ActivitySearchFort,
        ActivityType_ActivityReleasePokemon,
        ActivityType_ActivityHatchEggSmallBonus,
        ActivityType_ActivityHatchEggMediumBonus,
        ActivityType_ActivityHatchEggLargeBonus,
        ActivityType_ActivityDefeatGymDefender,
        ActivityType_ActivityDefeatGymLeader,
        ActivityType_ActivityCatchFirstCatchStreakBonus,
        ActivityType_ActivitySearchFortFirstOfTheDay,
        ActivityType_ActivitySearchFortStreakBonus,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ActivityType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ActivityType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ActivityType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ActivityType_ActivityUnknown:
    case ActivityType_ActivityCatchPokemon:
    case ActivityType_ActivityCatchLegendPokemon:
    case ActivityType_ActivityFleePokemon:
    case ActivityType_ActivityDefeatFort:
    case ActivityType_ActivityEvolvePokemon:
    case ActivityType_ActivityHatchEgg:
    case ActivityType_ActivityWalkKm:
    case ActivityType_ActivityPokedexEntryNew:
    case ActivityType_ActivityCatchFirstThrow:
    case ActivityType_ActivityCatchNiceThrow:
    case ActivityType_ActivityCatchGreatThrow:
    case ActivityType_ActivityCatchExcellentThrow:
    case ActivityType_ActivityCatchCurveball:
    case ActivityType_ActivityCatchFirstCatchOfDay:
    case ActivityType_ActivityCatchMilestone:
    case ActivityType_ActivityTrainPokemon:
    case ActivityType_ActivitySearchFort:
    case ActivityType_ActivityReleasePokemon:
    case ActivityType_ActivityHatchEggSmallBonus:
    case ActivityType_ActivityHatchEggMediumBonus:
    case ActivityType_ActivityHatchEggLargeBonus:
    case ActivityType_ActivityDefeatGymDefender:
    case ActivityType_ActivityDefeatGymLeader:
    case ActivityType_ActivityCatchFirstCatchStreakBonus:
    case ActivityType_ActivitySearchFortFirstOfTheDay:
    case ActivityType_ActivitySearchFortStreakBonus:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum BadgeType

GPBEnumDescriptor *BadgeType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "BadgeUnset\000BadgeTravelKm\000BadgePokedexEnt"
        "ries\000BadgeCaptureTotal\000BadgeDefeatedFort"
        "\000BadgeEvolvedTotal\000BadgeHatchedTotal\000Bad"
        "geEncounteredTotal\000BadgePokestopsVisited"
        "\000BadgeUniquePokestops\000BadgePokeballThrow"
        "n\000BadgeBigMagikarp\000BadgeDeployedTotal\000Ba"
        "dgeBattleAttackWon\000BadgeBattleTrainingWo"
        "n\000BadgeBattleDefendWon\000BadgePrestigeRais"
        "ed\000BadgePrestigeDropped\000BadgeTypeNormal\000"
        "BadgeTypeFighting\000BadgeTypeFlying\000BadgeT"
        "ypePoison\000BadgeTypeGround\000BadgeTypeRock\000"
        "BadgeTypeBug\000BadgeTypeGhost\000BadgeTypeSte"
        "el\000BadgeTypeFire\000BadgeTypeWater\000BadgeTyp"
        "eGrass\000BadgeTypeElectric\000BadgeTypePsychi"
        "c\000BadgeTypeIce\000BadgeTypeDragon\000BadgeType"
        "Dark\000BadgeTypeFairy\000BadgeSmallRattata\000Ba"
        "dgePikachu\000BadgeUnown\000BadgePokedexEntrie"
        "sGen2\000";
    static const int32_t values[] = {
        BadgeType_BadgeUnset,
        BadgeType_BadgeTravelKm,
        BadgeType_BadgePokedexEntries,
        BadgeType_BadgeCaptureTotal,
        BadgeType_BadgeDefeatedFort,
        BadgeType_BadgeEvolvedTotal,
        BadgeType_BadgeHatchedTotal,
        BadgeType_BadgeEncounteredTotal,
        BadgeType_BadgePokestopsVisited,
        BadgeType_BadgeUniquePokestops,
        BadgeType_BadgePokeballThrown,
        BadgeType_BadgeBigMagikarp,
        BadgeType_BadgeDeployedTotal,
        BadgeType_BadgeBattleAttackWon,
        BadgeType_BadgeBattleTrainingWon,
        BadgeType_BadgeBattleDefendWon,
        BadgeType_BadgePrestigeRaised,
        BadgeType_BadgePrestigeDropped,
        BadgeType_BadgeTypeNormal,
        BadgeType_BadgeTypeFighting,
        BadgeType_BadgeTypeFlying,
        BadgeType_BadgeTypePoison,
        BadgeType_BadgeTypeGround,
        BadgeType_BadgeTypeRock,
        BadgeType_BadgeTypeBug,
        BadgeType_BadgeTypeGhost,
        BadgeType_BadgeTypeSteel,
        BadgeType_BadgeTypeFire,
        BadgeType_BadgeTypeWater,
        BadgeType_BadgeTypeGrass,
        BadgeType_BadgeTypeElectric,
        BadgeType_BadgeTypePsychic,
        BadgeType_BadgeTypeIce,
        BadgeType_BadgeTypeDragon,
        BadgeType_BadgeTypeDark,
        BadgeType_BadgeTypeFairy,
        BadgeType_BadgeSmallRattata,
        BadgeType_BadgePikachu,
        BadgeType_BadgeUnown,
        BadgeType_BadgePokedexEntriesGen2,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BadgeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BadgeType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BadgeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case BadgeType_BadgeUnset:
    case BadgeType_BadgeTravelKm:
    case BadgeType_BadgePokedexEntries:
    case BadgeType_BadgeCaptureTotal:
    case BadgeType_BadgeDefeatedFort:
    case BadgeType_BadgeEvolvedTotal:
    case BadgeType_BadgeHatchedTotal:
    case BadgeType_BadgeEncounteredTotal:
    case BadgeType_BadgePokestopsVisited:
    case BadgeType_BadgeUniquePokestops:
    case BadgeType_BadgePokeballThrown:
    case BadgeType_BadgeBigMagikarp:
    case BadgeType_BadgeDeployedTotal:
    case BadgeType_BadgeBattleAttackWon:
    case BadgeType_BadgeBattleTrainingWon:
    case BadgeType_BadgeBattleDefendWon:
    case BadgeType_BadgePrestigeRaised:
    case BadgeType_BadgePrestigeDropped:
    case BadgeType_BadgeTypeNormal:
    case BadgeType_BadgeTypeFighting:
    case BadgeType_BadgeTypeFlying:
    case BadgeType_BadgeTypePoison:
    case BadgeType_BadgeTypeGround:
    case BadgeType_BadgeTypeRock:
    case BadgeType_BadgeTypeBug:
    case BadgeType_BadgeTypeGhost:
    case BadgeType_BadgeTypeSteel:
    case BadgeType_BadgeTypeFire:
    case BadgeType_BadgeTypeWater:
    case BadgeType_BadgeTypeGrass:
    case BadgeType_BadgeTypeElectric:
    case BadgeType_BadgeTypePsychic:
    case BadgeType_BadgeTypeIce:
    case BadgeType_BadgeTypeDragon:
    case BadgeType_BadgeTypeDark:
    case BadgeType_BadgeTypeFairy:
    case BadgeType_BadgeSmallRattata:
    case BadgeType_BadgePikachu:
    case BadgeType_BadgeUnown:
    case BadgeType_BadgePokedexEntriesGen2:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CameraInterpolation

GPBEnumDescriptor *CameraInterpolation_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "CamInterpCut\000CamInterpLinear\000CamInterpSm"
        "ooth\000CamInterpSmoothRotLinearMove\000CamInt"
        "erpDepends\000";
    static const int32_t values[] = {
        CameraInterpolation_CamInterpCut,
        CameraInterpolation_CamInterpLinear,
        CameraInterpolation_CamInterpSmooth,
        CameraInterpolation_CamInterpSmoothRotLinearMove,
        CameraInterpolation_CamInterpDepends,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CameraInterpolation)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CameraInterpolation_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CameraInterpolation_IsValidValue(int32_t value__) {
  switch (value__) {
    case CameraInterpolation_CamInterpCut:
    case CameraInterpolation_CamInterpLinear:
    case CameraInterpolation_CamInterpSmooth:
    case CameraInterpolation_CamInterpSmoothRotLinearMove:
    case CameraInterpolation_CamInterpDepends:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CameraTarget

GPBEnumDescriptor *CameraTarget_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "CamTargetAttacker\000CamTargetAttackerEdge\000"
        "CamTargetAttackerGround\000CamTargetDefende"
        "r\000CamTargetDefenderEdge\000CamTargetDefende"
        "rGround\000CamTargetAttackerDefender\000CamTar"
        "getAttackerDefenderEdge\000CamTargetDefende"
        "rAttacker\000CamTargetDefenderAttackerEdge\000"
        "CamTargetAttackerDefenderMirror\000CamTarge"
        "tShoulderAttackerDefender\000CamTargetShoul"
        "derAttackerDefenderMirror\000CamTargetAttac"
        "kerDefenderWorld\000";
    static const int32_t values[] = {
        CameraTarget_CamTargetAttacker,
        CameraTarget_CamTargetAttackerEdge,
        CameraTarget_CamTargetAttackerGround,
        CameraTarget_CamTargetDefender,
        CameraTarget_CamTargetDefenderEdge,
        CameraTarget_CamTargetDefenderGround,
        CameraTarget_CamTargetAttackerDefender,
        CameraTarget_CamTargetAttackerDefenderEdge,
        CameraTarget_CamTargetDefenderAttacker,
        CameraTarget_CamTargetDefenderAttackerEdge,
        CameraTarget_CamTargetAttackerDefenderMirror,
        CameraTarget_CamTargetShoulderAttackerDefender,
        CameraTarget_CamTargetShoulderAttackerDefenderMirror,
        CameraTarget_CamTargetAttackerDefenderWorld,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CameraTarget)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CameraTarget_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CameraTarget_IsValidValue(int32_t value__) {
  switch (value__) {
    case CameraTarget_CamTargetAttacker:
    case CameraTarget_CamTargetAttackerEdge:
    case CameraTarget_CamTargetAttackerGround:
    case CameraTarget_CamTargetDefender:
    case CameraTarget_CamTargetDefenderEdge:
    case CameraTarget_CamTargetDefenderGround:
    case CameraTarget_CamTargetAttackerDefender:
    case CameraTarget_CamTargetAttackerDefenderEdge:
    case CameraTarget_CamTargetDefenderAttacker:
    case CameraTarget_CamTargetDefenderAttackerEdge:
    case CameraTarget_CamTargetAttackerDefenderMirror:
    case CameraTarget_CamTargetShoulderAttackerDefender:
    case CameraTarget_CamTargetShoulderAttackerDefenderMirror:
    case CameraTarget_CamTargetAttackerDefenderWorld:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Costume

GPBEnumDescriptor *Costume_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "CostumeUnset\000Holiday2016\000Anniversary\000";
    static const int32_t values[] = {
        Costume_CostumeUnset,
        Costume_Holiday2016,
        Costume_Anniversary,
    };
    static const char *extraTextFormatInfo = "\001\001g\204\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Costume)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Costume_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Costume_IsValidValue(int32_t value__) {
  switch (value__) {
    case Costume_CostumeUnset:
    case Costume_Holiday2016:
    case Costume_Anniversary:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum EncounterType

GPBEnumDescriptor *EncounterType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "SpawnPoint\000Incense\000Disk\000";
    static const int32_t values[] = {
        EncounterType_SpawnPoint,
        EncounterType_Incense,
        EncounterType_Disk,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(EncounterType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:EncounterType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL EncounterType_IsValidValue(int32_t value__) {
  switch (value__) {
    case EncounterType_SpawnPoint:
    case EncounterType_Incense:
    case EncounterType_Disk:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Filter

GPBEnumDescriptor *Filter_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "UnsetFilter\000All\000Default\000Owned\000Featured\000P"
        "urchasable\000Unlockable\000";
    static const int32_t values[] = {
        Filter_UnsetFilter,
        Filter_All,
        Filter_Default,
        Filter_Owned,
        Filter_Featured,
        Filter_Purchasable,
        Filter_Unlockable,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Filter)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Filter_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Filter_IsValidValue(int32_t value__) {
  switch (value__) {
    case Filter_UnsetFilter:
    case Filter_All:
    case Filter_Default:
    case Filter_Owned:
    case Filter_Featured:
    case Filter_Purchasable:
    case Filter_Unlockable:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Form

GPBEnumDescriptor *Form_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "FormUnset\000UnownA\000UnownB\000UnownC\000UnownD\000Un"
        "ownE\000UnownF\000UnownG\000UnownH\000UnownI\000UnownJ\000"
        "UnownK\000UnownL\000UnownM\000UnownN\000UnownO\000Unown"
        "P\000UnownQ\000UnownR\000UnownS\000UnownT\000UnownU\000Uno"
        "wnV\000UnownW\000UnownX\000UnownY\000UnownZ\000UnownExc"
        "lamationPoint\000UnownQuestionMark\000";
    static const int32_t values[] = {
        Form_FormUnset,
        Form_UnownA,
        Form_UnownB,
        Form_UnownC,
        Form_UnownD,
        Form_UnownE,
        Form_UnownF,
        Form_UnownG,
        Form_UnownH,
        Form_UnownI,
        Form_UnownJ,
        Form_UnownK,
        Form_UnownL,
        Form_UnownM,
        Form_UnownN,
        Form_UnownO,
        Form_UnownP,
        Form_UnownQ,
        Form_UnownR,
        Form_UnownS,
        Form_UnownT,
        Form_UnownU,
        Form_UnownV,
        Form_UnownW,
        Form_UnownX,
        Form_UnownY,
        Form_UnownZ,
        Form_UnownExclamationPoint,
        Form_UnownQuestionMark,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Form)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Form_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Form_IsValidValue(int32_t value__) {
  switch (value__) {
    case Form_FormUnset:
    case Form_UnownA:
    case Form_UnownB:
    case Form_UnownC:
    case Form_UnownD:
    case Form_UnownE:
    case Form_UnownF:
    case Form_UnownG:
    case Form_UnownH:
    case Form_UnownI:
    case Form_UnownJ:
    case Form_UnownK:
    case Form_UnownL:
    case Form_UnownM:
    case Form_UnownN:
    case Form_UnownO:
    case Form_UnownP:
    case Form_UnownQ:
    case Form_UnownR:
    case Form_UnownS:
    case Form_UnownT:
    case Form_UnownU:
    case Form_UnownV:
    case Form_UnownW:
    case Form_UnownX:
    case Form_UnownY:
    case Form_UnownZ:
    case Form_UnownExclamationPoint:
    case Form_UnownQuestionMark:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Gender

GPBEnumDescriptor *Gender_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "GenderUnset\000Male\000Female\000Genderless\000";
    static const int32_t values[] = {
        Gender_GenderUnset,
        Gender_Male,
        Gender_Female,
        Gender_Genderless,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Gender)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Gender_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Gender_IsValidValue(int32_t value__) {
  switch (value__) {
    case Gender_GenderUnset:
    case Gender_Male:
    case Gender_Female:
    case Gender_Genderless:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum HoloIapItemCategory

GPBEnumDescriptor *HoloIapItemCategory_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "IapCategoryNone\000IapCategoryBundle\000IapCat"
        "egoryItems\000IapCategoryUpgrades\000IapCatego"
        "ryPokecoins\000IapCategoryAvatar\000";
    static const int32_t values[] = {
        HoloIapItemCategory_IapCategoryNone,
        HoloIapItemCategory_IapCategoryBundle,
        HoloIapItemCategory_IapCategoryItems,
        HoloIapItemCategory_IapCategoryUpgrades,
        HoloIapItemCategory_IapCategoryPokecoins,
        HoloIapItemCategory_IapCategoryAvatar,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(HoloIapItemCategory)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:HoloIapItemCategory_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL HoloIapItemCategory_IsValidValue(int32_t value__) {
  switch (value__) {
    case HoloIapItemCategory_IapCategoryNone:
    case HoloIapItemCategory_IapCategoryBundle:
    case HoloIapItemCategory_IapCategoryItems:
    case HoloIapItemCategory_IapCategoryUpgrades:
    case HoloIapItemCategory_IapCategoryPokecoins:
    case HoloIapItemCategory_IapCategoryAvatar:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ItemCategory

GPBEnumDescriptor *ItemCategory_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ItemCategoryNone\000ItemCategoryPokeball\000It"
        "emCategoryFood\000ItemCategoryMedicine\000Item"
        "CategoryBoost\000ItemCategoryUtilites\000ItemC"
        "ategoryCamera\000ItemCategoryDisk\000ItemCateg"
        "oryIncubator\000ItemCategoryIncense\000ItemCat"
        "egoryXpBoost\000ItemCategoryInventoryUpgrad"
        "e\000ItemCategoryEvolutionRequirement\000";
    static const int32_t values[] = {
        ItemCategory_ItemCategoryNone,
        ItemCategory_ItemCategoryPokeball,
        ItemCategory_ItemCategoryFood,
        ItemCategory_ItemCategoryMedicine,
        ItemCategory_ItemCategoryBoost,
        ItemCategory_ItemCategoryUtilites,
        ItemCategory_ItemCategoryCamera,
        ItemCategory_ItemCategoryDisk,
        ItemCategory_ItemCategoryIncubator,
        ItemCategory_ItemCategoryIncense,
        ItemCategory_ItemCategoryXpBoost,
        ItemCategory_ItemCategoryInventoryUpgrade,
        ItemCategory_ItemCategoryEvolutionRequirement,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ItemCategory)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ItemCategory_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ItemCategory_IsValidValue(int32_t value__) {
  switch (value__) {
    case ItemCategory_ItemCategoryNone:
    case ItemCategory_ItemCategoryPokeball:
    case ItemCategory_ItemCategoryFood:
    case ItemCategory_ItemCategoryMedicine:
    case ItemCategory_ItemCategoryBoost:
    case ItemCategory_ItemCategoryUtilites:
    case ItemCategory_ItemCategoryCamera:
    case ItemCategory_ItemCategoryDisk:
    case ItemCategory_ItemCategoryIncubator:
    case ItemCategory_ItemCategoryIncense:
    case ItemCategory_ItemCategoryXpBoost:
    case ItemCategory_ItemCategoryInventoryUpgrade:
    case ItemCategory_ItemCategoryEvolutionRequirement:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ItemEffect

GPBEnumDescriptor *ItemEffect_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ItemEffectNone\000ItemEffectCapNoFlee\000ItemE"
        "ffectCapNoMovement\000ItemEffectCapNoThreat"
        "\000ItemEffectCapTargetMax\000ItemEffectCapTar"
        "getSlow\000ItemEffectCapChanceNight\000ItemEff"
        "ectCapChanceTrainer\000ItemEffectCapChanceF"
        "irstThrow\000ItemEffectCapChanceLegend\000Item"
        "EffectCapChanceHeavy\000ItemEffectCapChance"
        "Repeat\000ItemEffectCapChanceMultiThrow\000Ite"
        "mEffectCapChanceAlways\000ItemEffectCapChan"
        "ceSingleThrow\000ItemEffectCandyAward\000";
    static const int32_t values[] = {
        ItemEffect_ItemEffectNone,
        ItemEffect_ItemEffectCapNoFlee,
        ItemEffect_ItemEffectCapNoMovement,
        ItemEffect_ItemEffectCapNoThreat,
        ItemEffect_ItemEffectCapTargetMax,
        ItemEffect_ItemEffectCapTargetSlow,
        ItemEffect_ItemEffectCapChanceNight,
        ItemEffect_ItemEffectCapChanceTrainer,
        ItemEffect_ItemEffectCapChanceFirstThrow,
        ItemEffect_ItemEffectCapChanceLegend,
        ItemEffect_ItemEffectCapChanceHeavy,
        ItemEffect_ItemEffectCapChanceRepeat,
        ItemEffect_ItemEffectCapChanceMultiThrow,
        ItemEffect_ItemEffectCapChanceAlways,
        ItemEffect_ItemEffectCapChanceSingleThrow,
        ItemEffect_ItemEffectCandyAward,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ItemEffect)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ItemEffect_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ItemEffect_IsValidValue(int32_t value__) {
  switch (value__) {
    case ItemEffect_ItemEffectNone:
    case ItemEffect_ItemEffectCapNoFlee:
    case ItemEffect_ItemEffectCapNoMovement:
    case ItemEffect_ItemEffectCapNoThreat:
    case ItemEffect_ItemEffectCapTargetMax:
    case ItemEffect_ItemEffectCapTargetSlow:
    case ItemEffect_ItemEffectCapChanceNight:
    case ItemEffect_ItemEffectCapChanceTrainer:
    case ItemEffect_ItemEffectCapChanceFirstThrow:
    case ItemEffect_ItemEffectCapChanceLegend:
    case ItemEffect_ItemEffectCapChanceHeavy:
    case ItemEffect_ItemEffectCapChanceRepeat:
    case ItemEffect_ItemEffectCapChanceMultiThrow:
    case ItemEffect_ItemEffectCapChanceAlways:
    case ItemEffect_ItemEffectCapChanceSingleThrow:
    case ItemEffect_ItemEffectCandyAward:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum NotificationState

GPBEnumDescriptor *NotificationState_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "UnsetState\000Listed\000Viewed\000Deleted\000";
    static const int32_t values[] = {
        NotificationState_UnsetState,
        NotificationState_Listed,
        NotificationState_Viewed,
        NotificationState_Deleted,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(NotificationState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:NotificationState_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL NotificationState_IsValidValue(int32_t value__) {
  switch (value__) {
    case NotificationState_UnsetState:
    case NotificationState_Listed:
    case NotificationState_Viewed:
    case NotificationState_Deleted:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Platform

GPBEnumDescriptor *Platform_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unset\000Ios\000Android\000Osx\000Windows\000AppleWatch"
        "\000";
    static const int32_t values[] = {
        Platform_Unset,
        Platform_Ios,
        Platform_Android,
        Platform_Osx,
        Platform_Windows,
        Platform_AppleWatch,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Platform)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Platform_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Platform_IsValidValue(int32_t value__) {
  switch (value__) {
    case Platform_Unset:
    case Platform_Ios:
    case Platform_Android:
    case Platform_Osx:
    case Platform_Windows:
    case Platform_AppleWatch:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PokemonFamilyId

GPBEnumDescriptor *PokemonFamilyId_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "FamilyUnset\000FamilyBulbasaur\000FamilyCharma"
        "nder\000FamilySquirtle\000FamilyCaterpie\000Famil"
        "yWeedle\000FamilyPidgey\000FamilyRattata\000Famil"
        "ySpearow\000FamilyEkans\000FamilyPikachu\000Famil"
        "ySandshrew\000FamilyNidoranFemale\000FamilyNid"
        "oranMale\000FamilyClefairy\000FamilyVulpix\000Fam"
        "ilyJigglypuff\000FamilyZubat\000FamilyOddish\000F"
        "amilyParas\000FamilyVenonat\000FamilyDiglett\000F"
        "amilyMeowth\000FamilyPsyduck\000FamilyMankey\000F"
        "amilyGrowlithe\000FamilyPoliwag\000FamilyAbra\000"
        "FamilyMachop\000FamilyBellsprout\000FamilyTent"
        "acool\000FamilyGeodude\000FamilyPonyta\000FamilyS"
        "lowpoke\000FamilyMagnemite\000FamilyFarfetchd\000"
        "FamilyDoduo\000FamilySeel\000FamilyGrimer\000Fami"
        "lyShellder\000FamilyGastly\000FamilyOnix\000Famil"
        "yDrowzee\000FamilyHypno\000FamilyKrabby\000Family"
        "Voltorb\000FamilyExeggcute\000FamilyCubone\000Fam"
        "ilyHitmonlee\000FamilyHitmonchan\000FamilyLick"
        "itung\000FamilyKoffing\000FamilyRhyhorn\000Family"
        "Chansey\000FamilyTangela\000FamilyKangaskhan\000F"
        "amilyHorsea\000FamilyGoldeen\000FamilyStaryu\000F"
        "amilyMrMime\000FamilyScyther\000FamilyJynx\000Fam"
        "ilyElectabuzz\000FamilyMagmar\000FamilyPinsir\000"
        "FamilyTauros\000FamilyMagikarp\000FamilyLapras"
        "\000FamilyDitto\000FamilyEevee\000FamilyPorygon\000F"
        "amilyOmanyte\000FamilyKabuto\000FamilyAerodact"
        "yl\000FamilySnorlax\000FamilyArticuno\000FamilyZa"
        "pdos\000FamilyMoltres\000FamilyDratini\000FamilyM"
        "ewtwo\000FamilyMew\000FamilyChikorita\000FamilyCy"
        "ndaquil\000FamilyTotodile\000FamilySentret\000Fam"
        "ilyHoothoot\000FamilyLedyba\000FamilySpinarak\000"
        "FamilyChinchou\000FamilyTogepi\000FamilyNatu\000F"
        "amilyMareep\000FamilyMarill\000FamilySudowoodo"
        "\000FamilyHoppip\000FamilyAipom\000FamilySunkern\000"
        "FamilyYanma\000FamilyWooper\000FamilyMurkrow\000F"
        "amilyMisdreavus\000FamilyUnown\000FamilyWobbuf"
        "fet\000FamilyGirafarig\000FamilyPineco\000FamilyD"
        "unsparce\000FamilyGligar\000FamilySnubbull\000Fam"
        "ilyQwilfish\000FamilyShuckle\000FamilyHeracros"
        "s\000FamilySneasel\000FamilyTeddiursa\000FamilySl"
        "ugma\000FamilySwinub\000FamilyCorsola\000FamilyRe"
        "moraid\000FamilyDelibird\000FamilyMantine\000Fami"
        "lySkarmory\000FamilyHoundour\000FamilyPhanpy\000F"
        "amilyStantler\000FamilySmeargle\000FamilyTyrog"
        "ue\000FamilyMiltank\000FamilyRaikou\000FamilyEnte"
        "i\000FamilySuicune\000FamilyLarvitar\000FamilyLug"
        "ia\000FamilyHoOh\000FamilyCelebi\000";
    static const int32_t values[] = {
        PokemonFamilyId_FamilyUnset,
        PokemonFamilyId_FamilyBulbasaur,
        PokemonFamilyId_FamilyCharmander,
        PokemonFamilyId_FamilySquirtle,
        PokemonFamilyId_FamilyCaterpie,
        PokemonFamilyId_FamilyWeedle,
        PokemonFamilyId_FamilyPidgey,
        PokemonFamilyId_FamilyRattata,
        PokemonFamilyId_FamilySpearow,
        PokemonFamilyId_FamilyEkans,
        PokemonFamilyId_FamilyPikachu,
        PokemonFamilyId_FamilySandshrew,
        PokemonFamilyId_FamilyNidoranFemale,
        PokemonFamilyId_FamilyNidoranMale,
        PokemonFamilyId_FamilyClefairy,
        PokemonFamilyId_FamilyVulpix,
        PokemonFamilyId_FamilyJigglypuff,
        PokemonFamilyId_FamilyZubat,
        PokemonFamilyId_FamilyOddish,
        PokemonFamilyId_FamilyParas,
        PokemonFamilyId_FamilyVenonat,
        PokemonFamilyId_FamilyDiglett,
        PokemonFamilyId_FamilyMeowth,
        PokemonFamilyId_FamilyPsyduck,
        PokemonFamilyId_FamilyMankey,
        PokemonFamilyId_FamilyGrowlithe,
        PokemonFamilyId_FamilyPoliwag,
        PokemonFamilyId_FamilyAbra,
        PokemonFamilyId_FamilyMachop,
        PokemonFamilyId_FamilyBellsprout,
        PokemonFamilyId_FamilyTentacool,
        PokemonFamilyId_FamilyGeodude,
        PokemonFamilyId_FamilyPonyta,
        PokemonFamilyId_FamilySlowpoke,
        PokemonFamilyId_FamilyMagnemite,
        PokemonFamilyId_FamilyFarfetchd,
        PokemonFamilyId_FamilyDoduo,
        PokemonFamilyId_FamilySeel,
        PokemonFamilyId_FamilyGrimer,
        PokemonFamilyId_FamilyShellder,
        PokemonFamilyId_FamilyGastly,
        PokemonFamilyId_FamilyOnix,
        PokemonFamilyId_FamilyDrowzee,
        PokemonFamilyId_FamilyHypno,
        PokemonFamilyId_FamilyKrabby,
        PokemonFamilyId_FamilyVoltorb,
        PokemonFamilyId_FamilyExeggcute,
        PokemonFamilyId_FamilyCubone,
        PokemonFamilyId_FamilyHitmonlee,
        PokemonFamilyId_FamilyHitmonchan,
        PokemonFamilyId_FamilyLickitung,
        PokemonFamilyId_FamilyKoffing,
        PokemonFamilyId_FamilyRhyhorn,
        PokemonFamilyId_FamilyChansey,
        PokemonFamilyId_FamilyTangela,
        PokemonFamilyId_FamilyKangaskhan,
        PokemonFamilyId_FamilyHorsea,
        PokemonFamilyId_FamilyGoldeen,
        PokemonFamilyId_FamilyStaryu,
        PokemonFamilyId_FamilyMrMime,
        PokemonFamilyId_FamilyScyther,
        PokemonFamilyId_FamilyJynx,
        PokemonFamilyId_FamilyElectabuzz,
        PokemonFamilyId_FamilyMagmar,
        PokemonFamilyId_FamilyPinsir,
        PokemonFamilyId_FamilyTauros,
        PokemonFamilyId_FamilyMagikarp,
        PokemonFamilyId_FamilyLapras,
        PokemonFamilyId_FamilyDitto,
        PokemonFamilyId_FamilyEevee,
        PokemonFamilyId_FamilyPorygon,
        PokemonFamilyId_FamilyOmanyte,
        PokemonFamilyId_FamilyKabuto,
        PokemonFamilyId_FamilyAerodactyl,
        PokemonFamilyId_FamilySnorlax,
        PokemonFamilyId_FamilyArticuno,
        PokemonFamilyId_FamilyZapdos,
        PokemonFamilyId_FamilyMoltres,
        PokemonFamilyId_FamilyDratini,
        PokemonFamilyId_FamilyMewtwo,
        PokemonFamilyId_FamilyMew,
        PokemonFamilyId_FamilyChikorita,
        PokemonFamilyId_FamilyCyndaquil,
        PokemonFamilyId_FamilyTotodile,
        PokemonFamilyId_FamilySentret,
        PokemonFamilyId_FamilyHoothoot,
        PokemonFamilyId_FamilyLedyba,
        PokemonFamilyId_FamilySpinarak,
        PokemonFamilyId_FamilyChinchou,
        PokemonFamilyId_FamilyTogepi,
        PokemonFamilyId_FamilyNatu,
        PokemonFamilyId_FamilyMareep,
        PokemonFamilyId_FamilyMarill,
        PokemonFamilyId_FamilySudowoodo,
        PokemonFamilyId_FamilyHoppip,
        PokemonFamilyId_FamilyAipom,
        PokemonFamilyId_FamilySunkern,
        PokemonFamilyId_FamilyYanma,
        PokemonFamilyId_FamilyWooper,
        PokemonFamilyId_FamilyMurkrow,
        PokemonFamilyId_FamilyMisdreavus,
        PokemonFamilyId_FamilyUnown,
        PokemonFamilyId_FamilyWobbuffet,
        PokemonFamilyId_FamilyGirafarig,
        PokemonFamilyId_FamilyPineco,
        PokemonFamilyId_FamilyDunsparce,
        PokemonFamilyId_FamilyGligar,
        PokemonFamilyId_FamilySnubbull,
        PokemonFamilyId_FamilyQwilfish,
        PokemonFamilyId_FamilyShuckle,
        PokemonFamilyId_FamilyHeracross,
        PokemonFamilyId_FamilySneasel,
        PokemonFamilyId_FamilyTeddiursa,
        PokemonFamilyId_FamilySlugma,
        PokemonFamilyId_FamilySwinub,
        PokemonFamilyId_FamilyCorsola,
        PokemonFamilyId_FamilyRemoraid,
        PokemonFamilyId_FamilyDelibird,
        PokemonFamilyId_FamilyMantine,
        PokemonFamilyId_FamilySkarmory,
        PokemonFamilyId_FamilyHoundour,
        PokemonFamilyId_FamilyPhanpy,
        PokemonFamilyId_FamilyStantler,
        PokemonFamilyId_FamilySmeargle,
        PokemonFamilyId_FamilyTyrogue,
        PokemonFamilyId_FamilyMiltank,
        PokemonFamilyId_FamilyRaikou,
        PokemonFamilyId_FamilyEntei,
        PokemonFamilyId_FamilySuicune,
        PokemonFamilyId_FamilyLarvitar,
        PokemonFamilyId_FamilyLugia,
        PokemonFamilyId_FamilyHoOh,
        PokemonFamilyId_FamilyCelebi,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PokemonFamilyId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PokemonFamilyId_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PokemonFamilyId_IsValidValue(int32_t value__) {
  switch (value__) {
    case PokemonFamilyId_FamilyUnset:
    case PokemonFamilyId_FamilyBulbasaur:
    case PokemonFamilyId_FamilyCharmander:
    case PokemonFamilyId_FamilySquirtle:
    case PokemonFamilyId_FamilyCaterpie:
    case PokemonFamilyId_FamilyWeedle:
    case PokemonFamilyId_FamilyPidgey:
    case PokemonFamilyId_FamilyRattata:
    case PokemonFamilyId_FamilySpearow:
    case PokemonFamilyId_FamilyEkans:
    case PokemonFamilyId_FamilyPikachu:
    case PokemonFamilyId_FamilySandshrew:
    case PokemonFamilyId_FamilyNidoranFemale:
    case PokemonFamilyId_FamilyNidoranMale:
    case PokemonFamilyId_FamilyClefairy:
    case PokemonFamilyId_FamilyVulpix:
    case PokemonFamilyId_FamilyJigglypuff:
    case PokemonFamilyId_FamilyZubat:
    case PokemonFamilyId_FamilyOddish:
    case PokemonFamilyId_FamilyParas:
    case PokemonFamilyId_FamilyVenonat:
    case PokemonFamilyId_FamilyDiglett:
    case PokemonFamilyId_FamilyMeowth:
    case PokemonFamilyId_FamilyPsyduck:
    case PokemonFamilyId_FamilyMankey:
    case PokemonFamilyId_FamilyGrowlithe:
    case PokemonFamilyId_FamilyPoliwag:
    case PokemonFamilyId_FamilyAbra:
    case PokemonFamilyId_FamilyMachop:
    case PokemonFamilyId_FamilyBellsprout:
    case PokemonFamilyId_FamilyTentacool:
    case PokemonFamilyId_FamilyGeodude:
    case PokemonFamilyId_FamilyPonyta:
    case PokemonFamilyId_FamilySlowpoke:
    case PokemonFamilyId_FamilyMagnemite:
    case PokemonFamilyId_FamilyFarfetchd:
    case PokemonFamilyId_FamilyDoduo:
    case PokemonFamilyId_FamilySeel:
    case PokemonFamilyId_FamilyGrimer:
    case PokemonFamilyId_FamilyShellder:
    case PokemonFamilyId_FamilyGastly:
    case PokemonFamilyId_FamilyOnix:
    case PokemonFamilyId_FamilyDrowzee:
    case PokemonFamilyId_FamilyHypno:
    case PokemonFamilyId_FamilyKrabby:
    case PokemonFamilyId_FamilyVoltorb:
    case PokemonFamilyId_FamilyExeggcute:
    case PokemonFamilyId_FamilyCubone:
    case PokemonFamilyId_FamilyHitmonlee:
    case PokemonFamilyId_FamilyHitmonchan:
    case PokemonFamilyId_FamilyLickitung:
    case PokemonFamilyId_FamilyKoffing:
    case PokemonFamilyId_FamilyRhyhorn:
    case PokemonFamilyId_FamilyChansey:
    case PokemonFamilyId_FamilyTangela:
    case PokemonFamilyId_FamilyKangaskhan:
    case PokemonFamilyId_FamilyHorsea:
    case PokemonFamilyId_FamilyGoldeen:
    case PokemonFamilyId_FamilyStaryu:
    case PokemonFamilyId_FamilyMrMime:
    case PokemonFamilyId_FamilyScyther:
    case PokemonFamilyId_FamilyJynx:
    case PokemonFamilyId_FamilyElectabuzz:
    case PokemonFamilyId_FamilyMagmar:
    case PokemonFamilyId_FamilyPinsir:
    case PokemonFamilyId_FamilyTauros:
    case PokemonFamilyId_FamilyMagikarp:
    case PokemonFamilyId_FamilyLapras:
    case PokemonFamilyId_FamilyDitto:
    case PokemonFamilyId_FamilyEevee:
    case PokemonFamilyId_FamilyPorygon:
    case PokemonFamilyId_FamilyOmanyte:
    case PokemonFamilyId_FamilyKabuto:
    case PokemonFamilyId_FamilyAerodactyl:
    case PokemonFamilyId_FamilySnorlax:
    case PokemonFamilyId_FamilyArticuno:
    case PokemonFamilyId_FamilyZapdos:
    case PokemonFamilyId_FamilyMoltres:
    case PokemonFamilyId_FamilyDratini:
    case PokemonFamilyId_FamilyMewtwo:
    case PokemonFamilyId_FamilyMew:
    case PokemonFamilyId_FamilyChikorita:
    case PokemonFamilyId_FamilyCyndaquil:
    case PokemonFamilyId_FamilyTotodile:
    case PokemonFamilyId_FamilySentret:
    case PokemonFamilyId_FamilyHoothoot:
    case PokemonFamilyId_FamilyLedyba:
    case PokemonFamilyId_FamilySpinarak:
    case PokemonFamilyId_FamilyChinchou:
    case PokemonFamilyId_FamilyTogepi:
    case PokemonFamilyId_FamilyNatu:
    case PokemonFamilyId_FamilyMareep:
    case PokemonFamilyId_FamilyMarill:
    case PokemonFamilyId_FamilySudowoodo:
    case PokemonFamilyId_FamilyHoppip:
    case PokemonFamilyId_FamilyAipom:
    case PokemonFamilyId_FamilySunkern:
    case PokemonFamilyId_FamilyYanma:
    case PokemonFamilyId_FamilyWooper:
    case PokemonFamilyId_FamilyMurkrow:
    case PokemonFamilyId_FamilyMisdreavus:
    case PokemonFamilyId_FamilyUnown:
    case PokemonFamilyId_FamilyWobbuffet:
    case PokemonFamilyId_FamilyGirafarig:
    case PokemonFamilyId_FamilyPineco:
    case PokemonFamilyId_FamilyDunsparce:
    case PokemonFamilyId_FamilyGligar:
    case PokemonFamilyId_FamilySnubbull:
    case PokemonFamilyId_FamilyQwilfish:
    case PokemonFamilyId_FamilyShuckle:
    case PokemonFamilyId_FamilyHeracross:
    case PokemonFamilyId_FamilySneasel:
    case PokemonFamilyId_FamilyTeddiursa:
    case PokemonFamilyId_FamilySlugma:
    case PokemonFamilyId_FamilySwinub:
    case PokemonFamilyId_FamilyCorsola:
    case PokemonFamilyId_FamilyRemoraid:
    case PokemonFamilyId_FamilyDelibird:
    case PokemonFamilyId_FamilyMantine:
    case PokemonFamilyId_FamilySkarmory:
    case PokemonFamilyId_FamilyHoundour:
    case PokemonFamilyId_FamilyPhanpy:
    case PokemonFamilyId_FamilyStantler:
    case PokemonFamilyId_FamilySmeargle:
    case PokemonFamilyId_FamilyTyrogue:
    case PokemonFamilyId_FamilyMiltank:
    case PokemonFamilyId_FamilyRaikou:
    case PokemonFamilyId_FamilyEntei:
    case PokemonFamilyId_FamilySuicune:
    case PokemonFamilyId_FamilyLarvitar:
    case PokemonFamilyId_FamilyLugia:
    case PokemonFamilyId_FamilyHoOh:
    case PokemonFamilyId_FamilyCelebi:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PokemonId

GPBEnumDescriptor *PokemonId_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Missingno\000Bulbasaur\000Ivysaur\000Venusaur\000Cha"
        "rmander\000Charmeleon\000Charizard\000Squirtle\000Wa"
        "rtortle\000Blastoise\000Caterpie\000Metapod\000Butte"
        "rfree\000Weedle\000Kakuna\000Beedrill\000Pidgey\000Pidg"
        "eotto\000Pidgeot\000Rattata\000Raticate\000Spearow\000F"
        "earow\000Ekans\000Arbok\000Pikachu\000Raichu\000Sandshr"
        "ew\000Sandslash\000NidoranFemale\000Nidorina\000Nido"
        "queen\000NidoranMale\000Nidorino\000Nidoking\000Clef"
        "airy\000Clefable\000Vulpix\000Ninetales\000Jigglypuf"
        "f\000Wigglytuff\000Zubat\000Golbat\000Oddish\000Gloom\000V"
        "ileplume\000Paras\000Parasect\000Venonat\000Venomoth"
        "\000Diglett\000Dugtrio\000Meowth\000Persian\000Psyduck\000"
        "Golduck\000Mankey\000Primeape\000Growlithe\000Arcani"
        "ne\000Poliwag\000Poliwhirl\000Poliwrath\000Abra\000Kada"
        "bra\000Alakazam\000Machop\000Machoke\000Machamp\000Bell"
        "sprout\000Weepinbell\000Victreebel\000Tentacool\000T"
        "entacruel\000Geodude\000Graveler\000Golem\000Ponyta\000"
        "Rapidash\000Slowpoke\000Slowbro\000Magnemite\000Magn"
        "eton\000Farfetchd\000Doduo\000Dodrio\000Seel\000Dewgong"
        "\000Grimer\000Muk\000Shellder\000Cloyster\000Gastly\000Hau"
        "nter\000Gengar\000Onix\000Drowzee\000Hypno\000Krabby\000Ki"
        "ngler\000Voltorb\000Electrode\000Exeggcute\000Exeggu"
        "tor\000Cubone\000Marowak\000Hitmonlee\000Hitmonchan\000"
        "Lickitung\000Koffing\000Weezing\000Rhyhorn\000Rhydon"
        "\000Chansey\000Tangela\000Kangaskhan\000Horsea\000Seadr"
        "a\000Goldeen\000Seaking\000Staryu\000Starmie\000MrMime\000"
        "Scyther\000Jynx\000Electabuzz\000Magmar\000Pinsir\000Ta"
        "uros\000Magikarp\000Gyarados\000Lapras\000Ditto\000Eeve"
        "e\000Vaporeon\000Jolteon\000Flareon\000Porygon\000Omany"
        "te\000Omastar\000Kabuto\000Kabutops\000Aerodactyl\000Sn"
        "orlax\000Articuno\000Zapdos\000Moltres\000Dratini\000Dr"
        "agonair\000Dragonite\000Mewtwo\000Mew\000Chikorita\000B"
        "ayleef\000Meganium\000Cyndaquil\000Quilava\000Typhlo"
        "sion\000Totodile\000Croconaw\000Feraligatr\000Sentre"
        "t\000Furret\000Hoothoot\000Noctowl\000Ledyba\000Ledian\000"
        "Spinarak\000Ariados\000Crobat\000Chinchou\000Lanturn"
        "\000Pichu\000Cleffa\000Igglybuff\000Togepi\000Togetic\000N"
        "atu\000Xatu\000Mareep\000Flaaffy\000Ampharos\000Belloss"
        "om\000Marill\000Azumarill\000Sudowoodo\000Politoed\000H"
        "oppip\000Skiploom\000Jumpluff\000Aipom\000Sunkern\000Su"
        "nflora\000Yanma\000Wooper\000Quagsire\000Espeon\000Umbr"
        "eon\000Murkrow\000Slowking\000Misdreavus\000Unown\000Wo"
        "bbuffet\000Girafarig\000Pineco\000Forretress\000Duns"
        "parce\000Gligar\000Steelix\000Snubbull\000Granbull\000Q"
        "wilfish\000Scizor\000Shuckle\000Heracross\000Sneasel"
        "\000Teddiursa\000Ursaring\000Slugma\000Magcargo\000Swin"
        "ub\000Piloswine\000Corsola\000Remoraid\000Octillery\000"
        "Delibird\000Mantine\000Skarmory\000Houndour\000Hound"
        "oom\000Kingdra\000Phanpy\000Donphan\000Porygon2\000Stan"
        "tler\000Smeargle\000Tyrogue\000Hitmontop\000Smoochum"
        "\000Elekid\000Magby\000Miltank\000Blissey\000Raikou\000Ent"
        "ei\000Suicune\000Larvitar\000Pupitar\000Tyranitar\000Lu"
        "gia\000HoOh\000Celebi\000";
    static const int32_t values[] = {
        PokemonId_Missingno,
        PokemonId_Bulbasaur,
        PokemonId_Ivysaur,
        PokemonId_Venusaur,
        PokemonId_Charmander,
        PokemonId_Charmeleon,
        PokemonId_Charizard,
        PokemonId_Squirtle,
        PokemonId_Wartortle,
        PokemonId_Blastoise,
        PokemonId_Caterpie,
        PokemonId_Metapod,
        PokemonId_Butterfree,
        PokemonId_Weedle,
        PokemonId_Kakuna,
        PokemonId_Beedrill,
        PokemonId_Pidgey,
        PokemonId_Pidgeotto,
        PokemonId_Pidgeot,
        PokemonId_Rattata,
        PokemonId_Raticate,
        PokemonId_Spearow,
        PokemonId_Fearow,
        PokemonId_Ekans,
        PokemonId_Arbok,
        PokemonId_Pikachu,
        PokemonId_Raichu,
        PokemonId_Sandshrew,
        PokemonId_Sandslash,
        PokemonId_NidoranFemale,
        PokemonId_Nidorina,
        PokemonId_Nidoqueen,
        PokemonId_NidoranMale,
        PokemonId_Nidorino,
        PokemonId_Nidoking,
        PokemonId_Clefairy,
        PokemonId_Clefable,
        PokemonId_Vulpix,
        PokemonId_Ninetales,
        PokemonId_Jigglypuff,
        PokemonId_Wigglytuff,
        PokemonId_Zubat,
        PokemonId_Golbat,
        PokemonId_Oddish,
        PokemonId_Gloom,
        PokemonId_Vileplume,
        PokemonId_Paras,
        PokemonId_Parasect,
        PokemonId_Venonat,
        PokemonId_Venomoth,
        PokemonId_Diglett,
        PokemonId_Dugtrio,
        PokemonId_Meowth,
        PokemonId_Persian,
        PokemonId_Psyduck,
        PokemonId_Golduck,
        PokemonId_Mankey,
        PokemonId_Primeape,
        PokemonId_Growlithe,
        PokemonId_Arcanine,
        PokemonId_Poliwag,
        PokemonId_Poliwhirl,
        PokemonId_Poliwrath,
        PokemonId_Abra,
        PokemonId_Kadabra,
        PokemonId_Alakazam,
        PokemonId_Machop,
        PokemonId_Machoke,
        PokemonId_Machamp,
        PokemonId_Bellsprout,
        PokemonId_Weepinbell,
        PokemonId_Victreebel,
        PokemonId_Tentacool,
        PokemonId_Tentacruel,
        PokemonId_Geodude,
        PokemonId_Graveler,
        PokemonId_Golem,
        PokemonId_Ponyta,
        PokemonId_Rapidash,
        PokemonId_Slowpoke,
        PokemonId_Slowbro,
        PokemonId_Magnemite,
        PokemonId_Magneton,
        PokemonId_Farfetchd,
        PokemonId_Doduo,
        PokemonId_Dodrio,
        PokemonId_Seel,
        PokemonId_Dewgong,
        PokemonId_Grimer,
        PokemonId_Muk,
        PokemonId_Shellder,
        PokemonId_Cloyster,
        PokemonId_Gastly,
        PokemonId_Haunter,
        PokemonId_Gengar,
        PokemonId_Onix,
        PokemonId_Drowzee,
        PokemonId_Hypno,
        PokemonId_Krabby,
        PokemonId_Kingler,
        PokemonId_Voltorb,
        PokemonId_Electrode,
        PokemonId_Exeggcute,
        PokemonId_Exeggutor,
        PokemonId_Cubone,
        PokemonId_Marowak,
        PokemonId_Hitmonlee,
        PokemonId_Hitmonchan,
        PokemonId_Lickitung,
        PokemonId_Koffing,
        PokemonId_Weezing,
        PokemonId_Rhyhorn,
        PokemonId_Rhydon,
        PokemonId_Chansey,
        PokemonId_Tangela,
        PokemonId_Kangaskhan,
        PokemonId_Horsea,
        PokemonId_Seadra,
        PokemonId_Goldeen,
        PokemonId_Seaking,
        PokemonId_Staryu,
        PokemonId_Starmie,
        PokemonId_MrMime,
        PokemonId_Scyther,
        PokemonId_Jynx,
        PokemonId_Electabuzz,
        PokemonId_Magmar,
        PokemonId_Pinsir,
        PokemonId_Tauros,
        PokemonId_Magikarp,
        PokemonId_Gyarados,
        PokemonId_Lapras,
        PokemonId_Ditto,
        PokemonId_Eevee,
        PokemonId_Vaporeon,
        PokemonId_Jolteon,
        PokemonId_Flareon,
        PokemonId_Porygon,
        PokemonId_Omanyte,
        PokemonId_Omastar,
        PokemonId_Kabuto,
        PokemonId_Kabutops,
        PokemonId_Aerodactyl,
        PokemonId_Snorlax,
        PokemonId_Articuno,
        PokemonId_Zapdos,
        PokemonId_Moltres,
        PokemonId_Dratini,
        PokemonId_Dragonair,
        PokemonId_Dragonite,
        PokemonId_Mewtwo,
        PokemonId_Mew,
        PokemonId_Chikorita,
        PokemonId_Bayleef,
        PokemonId_Meganium,
        PokemonId_Cyndaquil,
        PokemonId_Quilava,
        PokemonId_Typhlosion,
        PokemonId_Totodile,
        PokemonId_Croconaw,
        PokemonId_Feraligatr,
        PokemonId_Sentret,
        PokemonId_Furret,
        PokemonId_Hoothoot,
        PokemonId_Noctowl,
        PokemonId_Ledyba,
        PokemonId_Ledian,
        PokemonId_Spinarak,
        PokemonId_Ariados,
        PokemonId_Crobat,
        PokemonId_Chinchou,
        PokemonId_Lanturn,
        PokemonId_Pichu,
        PokemonId_Cleffa,
        PokemonId_Igglybuff,
        PokemonId_Togepi,
        PokemonId_Togetic,
        PokemonId_Natu,
        PokemonId_Xatu,
        PokemonId_Mareep,
        PokemonId_Flaaffy,
        PokemonId_Ampharos,
        PokemonId_Bellossom,
        PokemonId_Marill,
        PokemonId_Azumarill,
        PokemonId_Sudowoodo,
        PokemonId_Politoed,
        PokemonId_Hoppip,
        PokemonId_Skiploom,
        PokemonId_Jumpluff,
        PokemonId_Aipom,
        PokemonId_Sunkern,
        PokemonId_Sunflora,
        PokemonId_Yanma,
        PokemonId_Wooper,
        PokemonId_Quagsire,
        PokemonId_Espeon,
        PokemonId_Umbreon,
        PokemonId_Murkrow,
        PokemonId_Slowking,
        PokemonId_Misdreavus,
        PokemonId_Unown,
        PokemonId_Wobbuffet,
        PokemonId_Girafarig,
        PokemonId_Pineco,
        PokemonId_Forretress,
        PokemonId_Dunsparce,
        PokemonId_Gligar,
        PokemonId_Steelix,
        PokemonId_Snubbull,
        PokemonId_Granbull,
        PokemonId_Qwilfish,
        PokemonId_Scizor,
        PokemonId_Shuckle,
        PokemonId_Heracross,
        PokemonId_Sneasel,
        PokemonId_Teddiursa,
        PokemonId_Ursaring,
        PokemonId_Slugma,
        PokemonId_Magcargo,
        PokemonId_Swinub,
        PokemonId_Piloswine,
        PokemonId_Corsola,
        PokemonId_Remoraid,
        PokemonId_Octillery,
        PokemonId_Delibird,
        PokemonId_Mantine,
        PokemonId_Skarmory,
        PokemonId_Houndour,
        PokemonId_Houndoom,
        PokemonId_Kingdra,
        PokemonId_Phanpy,
        PokemonId_Donphan,
        PokemonId_Porygon2,
        PokemonId_Stantler,
        PokemonId_Smeargle,
        PokemonId_Tyrogue,
        PokemonId_Hitmontop,
        PokemonId_Smoochum,
        PokemonId_Elekid,
        PokemonId_Magby,
        PokemonId_Miltank,
        PokemonId_Blissey,
        PokemonId_Raikou,
        PokemonId_Entei,
        PokemonId_Suicune,
        PokemonId_Larvitar,
        PokemonId_Pupitar,
        PokemonId_Tyranitar,
        PokemonId_Lugia,
        PokemonId_HoOh,
        PokemonId_Celebi,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PokemonId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PokemonId_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PokemonId_IsValidValue(int32_t value__) {
  switch (value__) {
    case PokemonId_Missingno:
    case PokemonId_Bulbasaur:
    case PokemonId_Ivysaur:
    case PokemonId_Venusaur:
    case PokemonId_Charmander:
    case PokemonId_Charmeleon:
    case PokemonId_Charizard:
    case PokemonId_Squirtle:
    case PokemonId_Wartortle:
    case PokemonId_Blastoise:
    case PokemonId_Caterpie:
    case PokemonId_Metapod:
    case PokemonId_Butterfree:
    case PokemonId_Weedle:
    case PokemonId_Kakuna:
    case PokemonId_Beedrill:
    case PokemonId_Pidgey:
    case PokemonId_Pidgeotto:
    case PokemonId_Pidgeot:
    case PokemonId_Rattata:
    case PokemonId_Raticate:
    case PokemonId_Spearow:
    case PokemonId_Fearow:
    case PokemonId_Ekans:
    case PokemonId_Arbok:
    case PokemonId_Pikachu:
    case PokemonId_Raichu:
    case PokemonId_Sandshrew:
    case PokemonId_Sandslash:
    case PokemonId_NidoranFemale:
    case PokemonId_Nidorina:
    case PokemonId_Nidoqueen:
    case PokemonId_NidoranMale:
    case PokemonId_Nidorino:
    case PokemonId_Nidoking:
    case PokemonId_Clefairy:
    case PokemonId_Clefable:
    case PokemonId_Vulpix:
    case PokemonId_Ninetales:
    case PokemonId_Jigglypuff:
    case PokemonId_Wigglytuff:
    case PokemonId_Zubat:
    case PokemonId_Golbat:
    case PokemonId_Oddish:
    case PokemonId_Gloom:
    case PokemonId_Vileplume:
    case PokemonId_Paras:
    case PokemonId_Parasect:
    case PokemonId_Venonat:
    case PokemonId_Venomoth:
    case PokemonId_Diglett:
    case PokemonId_Dugtrio:
    case PokemonId_Meowth:
    case PokemonId_Persian:
    case PokemonId_Psyduck:
    case PokemonId_Golduck:
    case PokemonId_Mankey:
    case PokemonId_Primeape:
    case PokemonId_Growlithe:
    case PokemonId_Arcanine:
    case PokemonId_Poliwag:
    case PokemonId_Poliwhirl:
    case PokemonId_Poliwrath:
    case PokemonId_Abra:
    case PokemonId_Kadabra:
    case PokemonId_Alakazam:
    case PokemonId_Machop:
    case PokemonId_Machoke:
    case PokemonId_Machamp:
    case PokemonId_Bellsprout:
    case PokemonId_Weepinbell:
    case PokemonId_Victreebel:
    case PokemonId_Tentacool:
    case PokemonId_Tentacruel:
    case PokemonId_Geodude:
    case PokemonId_Graveler:
    case PokemonId_Golem:
    case PokemonId_Ponyta:
    case PokemonId_Rapidash:
    case PokemonId_Slowpoke:
    case PokemonId_Slowbro:
    case PokemonId_Magnemite:
    case PokemonId_Magneton:
    case PokemonId_Farfetchd:
    case PokemonId_Doduo:
    case PokemonId_Dodrio:
    case PokemonId_Seel:
    case PokemonId_Dewgong:
    case PokemonId_Grimer:
    case PokemonId_Muk:
    case PokemonId_Shellder:
    case PokemonId_Cloyster:
    case PokemonId_Gastly:
    case PokemonId_Haunter:
    case PokemonId_Gengar:
    case PokemonId_Onix:
    case PokemonId_Drowzee:
    case PokemonId_Hypno:
    case PokemonId_Krabby:
    case PokemonId_Kingler:
    case PokemonId_Voltorb:
    case PokemonId_Electrode:
    case PokemonId_Exeggcute:
    case PokemonId_Exeggutor:
    case PokemonId_Cubone:
    case PokemonId_Marowak:
    case PokemonId_Hitmonlee:
    case PokemonId_Hitmonchan:
    case PokemonId_Lickitung:
    case PokemonId_Koffing:
    case PokemonId_Weezing:
    case PokemonId_Rhyhorn:
    case PokemonId_Rhydon:
    case PokemonId_Chansey:
    case PokemonId_Tangela:
    case PokemonId_Kangaskhan:
    case PokemonId_Horsea:
    case PokemonId_Seadra:
    case PokemonId_Goldeen:
    case PokemonId_Seaking:
    case PokemonId_Staryu:
    case PokemonId_Starmie:
    case PokemonId_MrMime:
    case PokemonId_Scyther:
    case PokemonId_Jynx:
    case PokemonId_Electabuzz:
    case PokemonId_Magmar:
    case PokemonId_Pinsir:
    case PokemonId_Tauros:
    case PokemonId_Magikarp:
    case PokemonId_Gyarados:
    case PokemonId_Lapras:
    case PokemonId_Ditto:
    case PokemonId_Eevee:
    case PokemonId_Vaporeon:
    case PokemonId_Jolteon:
    case PokemonId_Flareon:
    case PokemonId_Porygon:
    case PokemonId_Omanyte:
    case PokemonId_Omastar:
    case PokemonId_Kabuto:
    case PokemonId_Kabutops:
    case PokemonId_Aerodactyl:
    case PokemonId_Snorlax:
    case PokemonId_Articuno:
    case PokemonId_Zapdos:
    case PokemonId_Moltres:
    case PokemonId_Dratini:
    case PokemonId_Dragonair:
    case PokemonId_Dragonite:
    case PokemonId_Mewtwo:
    case PokemonId_Mew:
    case PokemonId_Chikorita:
    case PokemonId_Bayleef:
    case PokemonId_Meganium:
    case PokemonId_Cyndaquil:
    case PokemonId_Quilava:
    case PokemonId_Typhlosion:
    case PokemonId_Totodile:
    case PokemonId_Croconaw:
    case PokemonId_Feraligatr:
    case PokemonId_Sentret:
    case PokemonId_Furret:
    case PokemonId_Hoothoot:
    case PokemonId_Noctowl:
    case PokemonId_Ledyba:
    case PokemonId_Ledian:
    case PokemonId_Spinarak:
    case PokemonId_Ariados:
    case PokemonId_Crobat:
    case PokemonId_Chinchou:
    case PokemonId_Lanturn:
    case PokemonId_Pichu:
    case PokemonId_Cleffa:
    case PokemonId_Igglybuff:
    case PokemonId_Togepi:
    case PokemonId_Togetic:
    case PokemonId_Natu:
    case PokemonId_Xatu:
    case PokemonId_Mareep:
    case PokemonId_Flaaffy:
    case PokemonId_Ampharos:
    case PokemonId_Bellossom:
    case PokemonId_Marill:
    case PokemonId_Azumarill:
    case PokemonId_Sudowoodo:
    case PokemonId_Politoed:
    case PokemonId_Hoppip:
    case PokemonId_Skiploom:
    case PokemonId_Jumpluff:
    case PokemonId_Aipom:
    case PokemonId_Sunkern:
    case PokemonId_Sunflora:
    case PokemonId_Yanma:
    case PokemonId_Wooper:
    case PokemonId_Quagsire:
    case PokemonId_Espeon:
    case PokemonId_Umbreon:
    case PokemonId_Murkrow:
    case PokemonId_Slowking:
    case PokemonId_Misdreavus:
    case PokemonId_Unown:
    case PokemonId_Wobbuffet:
    case PokemonId_Girafarig:
    case PokemonId_Pineco:
    case PokemonId_Forretress:
    case PokemonId_Dunsparce:
    case PokemonId_Gligar:
    case PokemonId_Steelix:
    case PokemonId_Snubbull:
    case PokemonId_Granbull:
    case PokemonId_Qwilfish:
    case PokemonId_Scizor:
    case PokemonId_Shuckle:
    case PokemonId_Heracross:
    case PokemonId_Sneasel:
    case PokemonId_Teddiursa:
    case PokemonId_Ursaring:
    case PokemonId_Slugma:
    case PokemonId_Magcargo:
    case PokemonId_Swinub:
    case PokemonId_Piloswine:
    case PokemonId_Corsola:
    case PokemonId_Remoraid:
    case PokemonId_Octillery:
    case PokemonId_Delibird:
    case PokemonId_Mantine:
    case PokemonId_Skarmory:
    case PokemonId_Houndour:
    case PokemonId_Houndoom:
    case PokemonId_Kingdra:
    case PokemonId_Phanpy:
    case PokemonId_Donphan:
    case PokemonId_Porygon2:
    case PokemonId_Stantler:
    case PokemonId_Smeargle:
    case PokemonId_Tyrogue:
    case PokemonId_Hitmontop:
    case PokemonId_Smoochum:
    case PokemonId_Elekid:
    case PokemonId_Magby:
    case PokemonId_Miltank:
    case PokemonId_Blissey:
    case PokemonId_Raikou:
    case PokemonId_Entei:
    case PokemonId_Suicune:
    case PokemonId_Larvitar:
    case PokemonId_Pupitar:
    case PokemonId_Tyranitar:
    case PokemonId_Lugia:
    case PokemonId_HoOh:
    case PokemonId_Celebi:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PokemonMove

GPBEnumDescriptor *PokemonMove_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "MoveUnset\000ThunderShock\000QuickAttack\000Scrat"
        "ch\000Ember\000VineWhip\000Tackle\000RazorLeaf\000TakeD"
        "own\000WaterGun\000Bite\000Pound\000DoubleSlap\000Wrap\000"
        "HyperBeam\000Lick\000DarkPulse\000Smog\000Sludge\000Met"
        "alClaw\000ViceGrip\000FlameWheel\000Megahorn\000Wing"
        "Attack\000Flamethrower\000SuckerPunch\000Dig\000LowK"
        "ick\000CrossChop\000PsychoCut\000Psybeam\000Earthqua"
        "ke\000StoneEdge\000IcePunch\000HeartStamp\000Dischar"
        "ge\000FlashCannon\000Peck\000DrillPeck\000IceBeam\000Bl"
        "izzard\000AirSlash\000HeatWave\000Twineedle\000Poiso"
        "nJab\000AerialAce\000DrillRun\000PetalBlizzard\000Me"
        "gaDrain\000BugBuzz\000PoisonFang\000NightSlash\000Sl"
        "ash\000BubbleBeam\000Submission\000KarateChop\000Low"
        "Sweep\000AquaJet\000AquaTail\000SeedBomb\000Psyshock"
        "\000RockThrow\000AncientPower\000RockTomb\000RockSli"
        "de\000PowerGem\000ShadowSneak\000ShadowPunch\000Shad"
        "owClaw\000OminousWind\000ShadowBall\000BulletPunc"
        "h\000MagnetBomb\000SteelWing\000IronHead\000Paraboli"
        "cCharge\000Spark\000ThunderPunch\000Thunder\000Thund"
        "erbolt\000Twister\000DragonBreath\000DragonPulse\000"
        "DragonClaw\000DisarmingVoice\000DrainingKiss\000D"
        "azzlingGleam\000Moonblast\000PlayRough\000CrossPo"
        "ison\000SludgeBomb\000SludgeWave\000GunkShot\000MudS"
        "hot\000BoneClub\000Bulldoze\000MudBomb\000FuryCutter"
        "\000BugBite\000SignalBeam\000XScissor\000FlameCharge"
        "\000FlameBurst\000FireBlast\000Brine\000WaterPulse\000S"
        "cald\000HydroPump\000Psychic\000Psystrike\000IceShar"
        "d\000IcyWind\000FrostBreath\000Absorb\000GigaDrain\000F"
        "irePunch\000SolarBeam\000LeafBlade\000PowerWhip\000S"
        "plash\000Acid\000AirCutter\000Hurricane\000BrickBrea"
        "k\000Cut\000Swift\000HornAttack\000Stomp\000Headbutt\000Hy"
        "perFang\000Slam\000BodySlam\000Rest\000Struggle\000Scal"
        "dBlastoise\000HydroPumpBlastoise\000WrapGreen\000"
        "WrapPink\000FuryCutterFast\000BugBiteFast\000Bite"
        "Fast\000SuckerPunchFast\000DragonBreathFast\000Th"
        "underShockFast\000SparkFast\000LowKickFast\000Kar"
        "ateChopFast\000EmberFast\000WingAttackFast\000Pec"
        "kFast\000LickFast\000ShadowClawFast\000VineWhipFa"
        "st\000RazorLeafFast\000MudShotFast\000IceShardFas"
        "t\000FrostBreathFast\000QuickAttackFast\000Scratc"
        "hFast\000TackleFast\000PoundFast\000CutFast\000Poiso"
        "nJabFast\000AcidFast\000PsychoCutFast\000RockThro"
        "wFast\000MetalClawFast\000BulletPunchFast\000Wate"
        "rGunFast\000SplashFast\000WaterGunFastBlastois"
        "e\000MudSlapFast\000ZenHeadbuttFast\000ConfusionF"
        "ast\000PoisonStingFast\000BubbleFast\000FeintAtta"
        "ckFast\000SteelWingFast\000FireFangFast\000RockSm"
        "ashFast\000TransformFast\000CounterFast\000Powder"
        "SnowFast\000CloseCombat\000DynamicPunch\000FocusB"
        "last\000AuroraBeam\000ChargeBeamFast\000VoltSwitc"
        "hFast\000WildCharge\000ZapCannon\000DragonTailFas"
        "t\000Avalanche\000AirSlashFast\000BraveBird\000SkyAt"
        "tack\000SandTomb\000RockBlast\000InfestationFast\000"
        "StruggleBugFast\000SilverWind\000AstonishFast\000"
        "HexFast\000NightShade\000IronTailFast\000GyroBall"
        "\000HeavySlam\000FireSpinFast\000Overheat\000BulletS"
        "eedFast\000GrassKnot\000EnergyBall\000Extrasensor"
        "yFast\000Futuresight\000MirrorCoat\000Outrage\000Sna"
        "rlFast\000Crunch\000FoulPlay\000HiddenPowerFast\000";
    static const int32_t values[] = {
        PokemonMove_MoveUnset,
        PokemonMove_ThunderShock,
        PokemonMove_QuickAttack,
        PokemonMove_Scratch,
        PokemonMove_Ember,
        PokemonMove_VineWhip,
        PokemonMove_Tackle,
        PokemonMove_RazorLeaf,
        PokemonMove_TakeDown,
        PokemonMove_WaterGun,
        PokemonMove_Bite,
        PokemonMove_Pound,
        PokemonMove_DoubleSlap,
        PokemonMove_Wrap,
        PokemonMove_HyperBeam,
        PokemonMove_Lick,
        PokemonMove_DarkPulse,
        PokemonMove_Smog,
        PokemonMove_Sludge,
        PokemonMove_MetalClaw,
        PokemonMove_ViceGrip,
        PokemonMove_FlameWheel,
        PokemonMove_Megahorn,
        PokemonMove_WingAttack,
        PokemonMove_Flamethrower,
        PokemonMove_SuckerPunch,
        PokemonMove_Dig,
        PokemonMove_LowKick,
        PokemonMove_CrossChop,
        PokemonMove_PsychoCut,
        PokemonMove_Psybeam,
        PokemonMove_Earthquake,
        PokemonMove_StoneEdge,
        PokemonMove_IcePunch,
        PokemonMove_HeartStamp,
        PokemonMove_Discharge,
        PokemonMove_FlashCannon,
        PokemonMove_Peck,
        PokemonMove_DrillPeck,
        PokemonMove_IceBeam,
        PokemonMove_Blizzard,
        PokemonMove_AirSlash,
        PokemonMove_HeatWave,
        PokemonMove_Twineedle,
        PokemonMove_PoisonJab,
        PokemonMove_AerialAce,
        PokemonMove_DrillRun,
        PokemonMove_PetalBlizzard,
        PokemonMove_MegaDrain,
        PokemonMove_BugBuzz,
        PokemonMove_PoisonFang,
        PokemonMove_NightSlash,
        PokemonMove_Slash,
        PokemonMove_BubbleBeam,
        PokemonMove_Submission,
        PokemonMove_KarateChop,
        PokemonMove_LowSweep,
        PokemonMove_AquaJet,
        PokemonMove_AquaTail,
        PokemonMove_SeedBomb,
        PokemonMove_Psyshock,
        PokemonMove_RockThrow,
        PokemonMove_AncientPower,
        PokemonMove_RockTomb,
        PokemonMove_RockSlide,
        PokemonMove_PowerGem,
        PokemonMove_ShadowSneak,
        PokemonMove_ShadowPunch,
        PokemonMove_ShadowClaw,
        PokemonMove_OminousWind,
        PokemonMove_ShadowBall,
        PokemonMove_BulletPunch,
        PokemonMove_MagnetBomb,
        PokemonMove_SteelWing,
        PokemonMove_IronHead,
        PokemonMove_ParabolicCharge,
        PokemonMove_Spark,
        PokemonMove_ThunderPunch,
        PokemonMove_Thunder,
        PokemonMove_Thunderbolt,
        PokemonMove_Twister,
        PokemonMove_DragonBreath,
        PokemonMove_DragonPulse,
        PokemonMove_DragonClaw,
        PokemonMove_DisarmingVoice,
        PokemonMove_DrainingKiss,
        PokemonMove_DazzlingGleam,
        PokemonMove_Moonblast,
        PokemonMove_PlayRough,
        PokemonMove_CrossPoison,
        PokemonMove_SludgeBomb,
        PokemonMove_SludgeWave,
        PokemonMove_GunkShot,
        PokemonMove_MudShot,
        PokemonMove_BoneClub,
        PokemonMove_Bulldoze,
        PokemonMove_MudBomb,
        PokemonMove_FuryCutter,
        PokemonMove_BugBite,
        PokemonMove_SignalBeam,
        PokemonMove_XScissor,
        PokemonMove_FlameCharge,
        PokemonMove_FlameBurst,
        PokemonMove_FireBlast,
        PokemonMove_Brine,
        PokemonMove_WaterPulse,
        PokemonMove_Scald,
        PokemonMove_HydroPump,
        PokemonMove_Psychic,
        PokemonMove_Psystrike,
        PokemonMove_IceShard,
        PokemonMove_IcyWind,
        PokemonMove_FrostBreath,
        PokemonMove_Absorb,
        PokemonMove_GigaDrain,
        PokemonMove_FirePunch,
        PokemonMove_SolarBeam,
        PokemonMove_LeafBlade,
        PokemonMove_PowerWhip,
        PokemonMove_Splash,
        PokemonMove_Acid,
        PokemonMove_AirCutter,
        PokemonMove_Hurricane,
        PokemonMove_BrickBreak,
        PokemonMove_Cut,
        PokemonMove_Swift,
        PokemonMove_HornAttack,
        PokemonMove_Stomp,
        PokemonMove_Headbutt,
        PokemonMove_HyperFang,
        PokemonMove_Slam,
        PokemonMove_BodySlam,
        PokemonMove_Rest,
        PokemonMove_Struggle,
        PokemonMove_ScaldBlastoise,
        PokemonMove_HydroPumpBlastoise,
        PokemonMove_WrapGreen,
        PokemonMove_WrapPink,
        PokemonMove_FuryCutterFast,
        PokemonMove_BugBiteFast,
        PokemonMove_BiteFast,
        PokemonMove_SuckerPunchFast,
        PokemonMove_DragonBreathFast,
        PokemonMove_ThunderShockFast,
        PokemonMove_SparkFast,
        PokemonMove_LowKickFast,
        PokemonMove_KarateChopFast,
        PokemonMove_EmberFast,
        PokemonMove_WingAttackFast,
        PokemonMove_PeckFast,
        PokemonMove_LickFast,
        PokemonMove_ShadowClawFast,
        PokemonMove_VineWhipFast,
        PokemonMove_RazorLeafFast,
        PokemonMove_MudShotFast,
        PokemonMove_IceShardFast,
        PokemonMove_FrostBreathFast,
        PokemonMove_QuickAttackFast,
        PokemonMove_ScratchFast,
        PokemonMove_TackleFast,
        PokemonMove_PoundFast,
        PokemonMove_CutFast,
        PokemonMove_PoisonJabFast,
        PokemonMove_AcidFast,
        PokemonMove_PsychoCutFast,
        PokemonMove_RockThrowFast,
        PokemonMove_MetalClawFast,
        PokemonMove_BulletPunchFast,
        PokemonMove_WaterGunFast,
        PokemonMove_SplashFast,
        PokemonMove_WaterGunFastBlastoise,
        PokemonMove_MudSlapFast,
        PokemonMove_ZenHeadbuttFast,
        PokemonMove_ConfusionFast,
        PokemonMove_PoisonStingFast,
        PokemonMove_BubbleFast,
        PokemonMove_FeintAttackFast,
        PokemonMove_SteelWingFast,
        PokemonMove_FireFangFast,
        PokemonMove_RockSmashFast,
        PokemonMove_TransformFast,
        PokemonMove_CounterFast,
        PokemonMove_PowderSnowFast,
        PokemonMove_CloseCombat,
        PokemonMove_DynamicPunch,
        PokemonMove_FocusBlast,
        PokemonMove_AuroraBeam,
        PokemonMove_ChargeBeamFast,
        PokemonMove_VoltSwitchFast,
        PokemonMove_WildCharge,
        PokemonMove_ZapCannon,
        PokemonMove_DragonTailFast,
        PokemonMove_Avalanche,
        PokemonMove_AirSlashFast,
        PokemonMove_BraveBird,
        PokemonMove_SkyAttack,
        PokemonMove_SandTomb,
        PokemonMove_RockBlast,
        PokemonMove_InfestationFast,
        PokemonMove_StruggleBugFast,
        PokemonMove_SilverWind,
        PokemonMove_AstonishFast,
        PokemonMove_HexFast,
        PokemonMove_NightShade,
        PokemonMove_IronTailFast,
        PokemonMove_GyroBall,
        PokemonMove_HeavySlam,
        PokemonMove_FireSpinFast,
        PokemonMove_Overheat,
        PokemonMove_BulletSeedFast,
        PokemonMove_GrassKnot,
        PokemonMove_EnergyBall,
        PokemonMove_ExtrasensoryFast,
        PokemonMove_Futuresight,
        PokemonMove_MirrorCoat,
        PokemonMove_Outrage,
        PokemonMove_SnarlFast,
        PokemonMove_Crunch,
        PokemonMove_FoulPlay,
        PokemonMove_HiddenPowerFast,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PokemonMove)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PokemonMove_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PokemonMove_IsValidValue(int32_t value__) {
  switch (value__) {
    case PokemonMove_MoveUnset:
    case PokemonMove_ThunderShock:
    case PokemonMove_QuickAttack:
    case PokemonMove_Scratch:
    case PokemonMove_Ember:
    case PokemonMove_VineWhip:
    case PokemonMove_Tackle:
    case PokemonMove_RazorLeaf:
    case PokemonMove_TakeDown:
    case PokemonMove_WaterGun:
    case PokemonMove_Bite:
    case PokemonMove_Pound:
    case PokemonMove_DoubleSlap:
    case PokemonMove_Wrap:
    case PokemonMove_HyperBeam:
    case PokemonMove_Lick:
    case PokemonMove_DarkPulse:
    case PokemonMove_Smog:
    case PokemonMove_Sludge:
    case PokemonMove_MetalClaw:
    case PokemonMove_ViceGrip:
    case PokemonMove_FlameWheel:
    case PokemonMove_Megahorn:
    case PokemonMove_WingAttack:
    case PokemonMove_Flamethrower:
    case PokemonMove_SuckerPunch:
    case PokemonMove_Dig:
    case PokemonMove_LowKick:
    case PokemonMove_CrossChop:
    case PokemonMove_PsychoCut:
    case PokemonMove_Psybeam:
    case PokemonMove_Earthquake:
    case PokemonMove_StoneEdge:
    case PokemonMove_IcePunch:
    case PokemonMove_HeartStamp:
    case PokemonMove_Discharge:
    case PokemonMove_FlashCannon:
    case PokemonMove_Peck:
    case PokemonMove_DrillPeck:
    case PokemonMove_IceBeam:
    case PokemonMove_Blizzard:
    case PokemonMove_AirSlash:
    case PokemonMove_HeatWave:
    case PokemonMove_Twineedle:
    case PokemonMove_PoisonJab:
    case PokemonMove_AerialAce:
    case PokemonMove_DrillRun:
    case PokemonMove_PetalBlizzard:
    case PokemonMove_MegaDrain:
    case PokemonMove_BugBuzz:
    case PokemonMove_PoisonFang:
    case PokemonMove_NightSlash:
    case PokemonMove_Slash:
    case PokemonMove_BubbleBeam:
    case PokemonMove_Submission:
    case PokemonMove_KarateChop:
    case PokemonMove_LowSweep:
    case PokemonMove_AquaJet:
    case PokemonMove_AquaTail:
    case PokemonMove_SeedBomb:
    case PokemonMove_Psyshock:
    case PokemonMove_RockThrow:
    case PokemonMove_AncientPower:
    case PokemonMove_RockTomb:
    case PokemonMove_RockSlide:
    case PokemonMove_PowerGem:
    case PokemonMove_ShadowSneak:
    case PokemonMove_ShadowPunch:
    case PokemonMove_ShadowClaw:
    case PokemonMove_OminousWind:
    case PokemonMove_ShadowBall:
    case PokemonMove_BulletPunch:
    case PokemonMove_MagnetBomb:
    case PokemonMove_SteelWing:
    case PokemonMove_IronHead:
    case PokemonMove_ParabolicCharge:
    case PokemonMove_Spark:
    case PokemonMove_ThunderPunch:
    case PokemonMove_Thunder:
    case PokemonMove_Thunderbolt:
    case PokemonMove_Twister:
    case PokemonMove_DragonBreath:
    case PokemonMove_DragonPulse:
    case PokemonMove_DragonClaw:
    case PokemonMove_DisarmingVoice:
    case PokemonMove_DrainingKiss:
    case PokemonMove_DazzlingGleam:
    case PokemonMove_Moonblast:
    case PokemonMove_PlayRough:
    case PokemonMove_CrossPoison:
    case PokemonMove_SludgeBomb:
    case PokemonMove_SludgeWave:
    case PokemonMove_GunkShot:
    case PokemonMove_MudShot:
    case PokemonMove_BoneClub:
    case PokemonMove_Bulldoze:
    case PokemonMove_MudBomb:
    case PokemonMove_FuryCutter:
    case PokemonMove_BugBite:
    case PokemonMove_SignalBeam:
    case PokemonMove_XScissor:
    case PokemonMove_FlameCharge:
    case PokemonMove_FlameBurst:
    case PokemonMove_FireBlast:
    case PokemonMove_Brine:
    case PokemonMove_WaterPulse:
    case PokemonMove_Scald:
    case PokemonMove_HydroPump:
    case PokemonMove_Psychic:
    case PokemonMove_Psystrike:
    case PokemonMove_IceShard:
    case PokemonMove_IcyWind:
    case PokemonMove_FrostBreath:
    case PokemonMove_Absorb:
    case PokemonMove_GigaDrain:
    case PokemonMove_FirePunch:
    case PokemonMove_SolarBeam:
    case PokemonMove_LeafBlade:
    case PokemonMove_PowerWhip:
    case PokemonMove_Splash:
    case PokemonMove_Acid:
    case PokemonMove_AirCutter:
    case PokemonMove_Hurricane:
    case PokemonMove_BrickBreak:
    case PokemonMove_Cut:
    case PokemonMove_Swift:
    case PokemonMove_HornAttack:
    case PokemonMove_Stomp:
    case PokemonMove_Headbutt:
    case PokemonMove_HyperFang:
    case PokemonMove_Slam:
    case PokemonMove_BodySlam:
    case PokemonMove_Rest:
    case PokemonMove_Struggle:
    case PokemonMove_ScaldBlastoise:
    case PokemonMove_HydroPumpBlastoise:
    case PokemonMove_WrapGreen:
    case PokemonMove_WrapPink:
    case PokemonMove_FuryCutterFast:
    case PokemonMove_BugBiteFast:
    case PokemonMove_BiteFast:
    case PokemonMove_SuckerPunchFast:
    case PokemonMove_DragonBreathFast:
    case PokemonMove_ThunderShockFast:
    case PokemonMove_SparkFast:
    case PokemonMove_LowKickFast:
    case PokemonMove_KarateChopFast:
    case PokemonMove_EmberFast:
    case PokemonMove_WingAttackFast:
    case PokemonMove_PeckFast:
    case PokemonMove_LickFast:
    case PokemonMove_ShadowClawFast:
    case PokemonMove_VineWhipFast:
    case PokemonMove_RazorLeafFast:
    case PokemonMove_MudShotFast:
    case PokemonMove_IceShardFast:
    case PokemonMove_FrostBreathFast:
    case PokemonMove_QuickAttackFast:
    case PokemonMove_ScratchFast:
    case PokemonMove_TackleFast:
    case PokemonMove_PoundFast:
    case PokemonMove_CutFast:
    case PokemonMove_PoisonJabFast:
    case PokemonMove_AcidFast:
    case PokemonMove_PsychoCutFast:
    case PokemonMove_RockThrowFast:
    case PokemonMove_MetalClawFast:
    case PokemonMove_BulletPunchFast:
    case PokemonMove_WaterGunFast:
    case PokemonMove_SplashFast:
    case PokemonMove_WaterGunFastBlastoise:
    case PokemonMove_MudSlapFast:
    case PokemonMove_ZenHeadbuttFast:
    case PokemonMove_ConfusionFast:
    case PokemonMove_PoisonStingFast:
    case PokemonMove_BubbleFast:
    case PokemonMove_FeintAttackFast:
    case PokemonMove_SteelWingFast:
    case PokemonMove_FireFangFast:
    case PokemonMove_RockSmashFast:
    case PokemonMove_TransformFast:
    case PokemonMove_CounterFast:
    case PokemonMove_PowderSnowFast:
    case PokemonMove_CloseCombat:
    case PokemonMove_DynamicPunch:
    case PokemonMove_FocusBlast:
    case PokemonMove_AuroraBeam:
    case PokemonMove_ChargeBeamFast:
    case PokemonMove_VoltSwitchFast:
    case PokemonMove_WildCharge:
    case PokemonMove_ZapCannon:
    case PokemonMove_DragonTailFast:
    case PokemonMove_Avalanche:
    case PokemonMove_AirSlashFast:
    case PokemonMove_BraveBird:
    case PokemonMove_SkyAttack:
    case PokemonMove_SandTomb:
    case PokemonMove_RockBlast:
    case PokemonMove_InfestationFast:
    case PokemonMove_StruggleBugFast:
    case PokemonMove_SilverWind:
    case PokemonMove_AstonishFast:
    case PokemonMove_HexFast:
    case PokemonMove_NightShade:
    case PokemonMove_IronTailFast:
    case PokemonMove_GyroBall:
    case PokemonMove_HeavySlam:
    case PokemonMove_FireSpinFast:
    case PokemonMove_Overheat:
    case PokemonMove_BulletSeedFast:
    case PokemonMove_GrassKnot:
    case PokemonMove_EnergyBall:
    case PokemonMove_ExtrasensoryFast:
    case PokemonMove_Futuresight:
    case PokemonMove_MirrorCoat:
    case PokemonMove_Outrage:
    case PokemonMove_SnarlFast:
    case PokemonMove_Crunch:
    case PokemonMove_FoulPlay:
    case PokemonMove_HiddenPowerFast:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PokemonMovementType

GPBEnumDescriptor *PokemonMovementType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "MovementStatic\000MovementJump\000MovementVert"
        "ical\000MovementPsychic\000MovementElectric\000Mo"
        "vementFlying\000MovementHovering\000";
    static const int32_t values[] = {
        PokemonMovementType_MovementStatic,
        PokemonMovementType_MovementJump,
        PokemonMovementType_MovementVertical,
        PokemonMovementType_MovementPsychic,
        PokemonMovementType_MovementElectric,
        PokemonMovementType_MovementFlying,
        PokemonMovementType_MovementHovering,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PokemonMovementType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PokemonMovementType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PokemonMovementType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PokemonMovementType_MovementStatic:
    case PokemonMovementType_MovementJump:
    case PokemonMovementType_MovementVertical:
    case PokemonMovementType_MovementPsychic:
    case PokemonMovementType_MovementElectric:
    case PokemonMovementType_MovementFlying:
    case PokemonMovementType_MovementHovering:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PokemonRarity

GPBEnumDescriptor *PokemonRarity_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "PokemonRarityNormal\000PokemonRarityLegenda"
        "ry\000PokemonRarityMythic\000";
    static const int32_t values[] = {
        PokemonRarity_PokemonRarityNormal,
        PokemonRarity_PokemonRarityLegendary,
        PokemonRarity_PokemonRarityMythic,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PokemonRarity)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PokemonRarity_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PokemonRarity_IsValidValue(int32_t value__) {
  switch (value__) {
    case PokemonRarity_PokemonRarityNormal:
    case PokemonRarity_PokemonRarityLegendary:
    case PokemonRarity_PokemonRarityMythic:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PokemonType

GPBEnumDescriptor *PokemonType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "PokemonTypeNone\000PokemonTypeNormal\000Pokemo"
        "nTypeFighting\000PokemonTypeFlying\000PokemonT"
        "ypePoison\000PokemonTypeGround\000PokemonTypeR"
        "ock\000PokemonTypeBug\000PokemonTypeGhost\000Poke"
        "monTypeSteel\000PokemonTypeFire\000PokemonType"
        "Water\000PokemonTypeGrass\000PokemonTypeElectr"
        "ic\000PokemonTypePsychic\000PokemonTypeIce\000Pok"
        "emonTypeDragon\000PokemonTypeDark\000PokemonTy"
        "peFairy\000";
    static const int32_t values[] = {
        PokemonType_PokemonTypeNone,
        PokemonType_PokemonTypeNormal,
        PokemonType_PokemonTypeFighting,
        PokemonType_PokemonTypeFlying,
        PokemonType_PokemonTypePoison,
        PokemonType_PokemonTypeGround,
        PokemonType_PokemonTypeRock,
        PokemonType_PokemonTypeBug,
        PokemonType_PokemonTypeGhost,
        PokemonType_PokemonTypeSteel,
        PokemonType_PokemonTypeFire,
        PokemonType_PokemonTypeWater,
        PokemonType_PokemonTypeGrass,
        PokemonType_PokemonTypeElectric,
        PokemonType_PokemonTypePsychic,
        PokemonType_PokemonTypeIce,
        PokemonType_PokemonTypeDragon,
        PokemonType_PokemonTypeDark,
        PokemonType_PokemonTypeFairy,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PokemonType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PokemonType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PokemonType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PokemonType_PokemonTypeNone:
    case PokemonType_PokemonTypeNormal:
    case PokemonType_PokemonTypeFighting:
    case PokemonType_PokemonTypeFlying:
    case PokemonType_PokemonTypePoison:
    case PokemonType_PokemonTypeGround:
    case PokemonType_PokemonTypeRock:
    case PokemonType_PokemonTypeBug:
    case PokemonType_PokemonTypeGhost:
    case PokemonType_PokemonTypeSteel:
    case PokemonType_PokemonTypeFire:
    case PokemonType_PokemonTypeWater:
    case PokemonType_PokemonTypeGrass:
    case PokemonType_PokemonTypeElectric:
    case PokemonType_PokemonTypePsychic:
    case PokemonType_PokemonTypeIce:
    case PokemonType_PokemonTypeDragon:
    case PokemonType_PokemonTypeDark:
    case PokemonType_PokemonTypeFairy:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum QuestType

GPBEnumDescriptor *QuestType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "QuestUnknownType\000QuestFirstCatchOfTheDay"
        "\000QuestFirstPokestopOfTheDay\000";
    static const int32_t values[] = {
        QuestType_QuestUnknownType,
        QuestType_QuestFirstCatchOfTheDay,
        QuestType_QuestFirstPokestopOfTheDay,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(QuestType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:QuestType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL QuestType_IsValidValue(int32_t value__) {
  switch (value__) {
    case QuestType_QuestUnknownType:
    case QuestType_QuestFirstCatchOfTheDay:
    case QuestType_QuestFirstPokestopOfTheDay:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Slot

GPBEnumDescriptor *Slot_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "UnsetSlot\000Hair\000Shirt\000Pants\000Hat\000Shoes\000Eye"
        "s\000Backpack\000Gloves\000Socks\000Belt\000Glasses\000Nec"
        "klace\000";
    static const int32_t values[] = {
        Slot_UnsetSlot,
        Slot_Hair,
        Slot_Shirt,
        Slot_Pants,
        Slot_Hat,
        Slot_Shoes,
        Slot_Eyes,
        Slot_Backpack,
        Slot_Gloves,
        Slot_Socks,
        Slot_Belt,
        Slot_Glasses,
        Slot_Necklace,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Slot)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Slot_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Slot_IsValidValue(int32_t value__) {
  switch (value__) {
    case Slot_UnsetSlot:
    case Slot_Hair:
    case Slot_Shirt:
    case Slot_Pants:
    case Slot_Hat:
    case Slot_Shoes:
    case Slot_Eyes:
    case Slot_Backpack:
    case Slot_Gloves:
    case Slot_Socks:
    case Slot_Belt:
    case Slot_Glasses:
    case Slot_Necklace:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum TeamColor

GPBEnumDescriptor *TeamColor_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Neutral\000Blue\000Red\000Yellow\000";
    static const int32_t values[] = {
        TeamColor_Neutral,
        TeamColor_Blue,
        TeamColor_Red,
        TeamColor_Yellow,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TeamColor)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TeamColor_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TeamColor_IsValidValue(int32_t value__) {
  switch (value__) {
    case TeamColor_Neutral:
    case TeamColor_Blue:
    case TeamColor_Red:
    case TeamColor_Yellow:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum TutorialState

GPBEnumDescriptor *TutorialState_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "LegalScreen\000AvatarSelection\000AccountCreat"
        "ion\000PokemonCapture\000NameSelection\000Pokemon"
        "Berry\000UseItem\000FirstTimeExperienceComplet"
        "e\000PokestopTutorial\000GymTutorial\000";
    static const int32_t values[] = {
        TutorialState_LegalScreen,
        TutorialState_AvatarSelection,
        TutorialState_AccountCreation,
        TutorialState_PokemonCapture,
        TutorialState_NameSelection,
        TutorialState_PokemonBerry,
        TutorialState_UseItem,
        TutorialState_FirstTimeExperienceComplete,
        TutorialState_PokestopTutorial,
        TutorialState_GymTutorial,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TutorialState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TutorialState_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TutorialState_IsValidValue(int32_t value__) {
  switch (value__) {
    case TutorialState_LegalScreen:
    case TutorialState_AvatarSelection:
    case TutorialState_AccountCreation:
    case TutorialState_PokemonCapture:
    case TutorialState_NameSelection:
    case TutorialState_PokemonBerry:
    case TutorialState_UseItem:
    case TutorialState_FirstTimeExperienceComplete:
    case TutorialState_PokestopTutorial:
    case TutorialState_GymTutorial:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
