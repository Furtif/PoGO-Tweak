// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Data.Logs.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PogoprotosDataLogs.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - PogoprotosDataLogsRoot

@implementation PogoprotosDataLogsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PogoprotosDataLogsRoot_FileDescriptor

static GPBFileDescriptor *PogoprotosDataLogsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Data.Logs"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ActionLogEntry

@implementation ActionLogEntry

@dynamic actionOneOfCase;
@dynamic timestampMs;
@dynamic sfida;
@dynamic catchPokemon;
@dynamic fortSearch;
@dynamic buddyPokemon;

typedef struct ActionLogEntry__storage_ {
  uint32_t _has_storage_[2];
  CatchPokemonLogEntry *catchPokemon;
  FortSearchLogEntry *fortSearch;
  BuddyPokemonLogEntry *buddyPokemon;
  int64_t timestampMs;
} ActionLogEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestampMs",
        .dataTypeSpecific.className = NULL,
        .number = ActionLogEntry_FieldNumber_TimestampMs,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ActionLogEntry__storage_, timestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sfida",
        .dataTypeSpecific.className = NULL,
        .number = ActionLogEntry_FieldNumber_Sfida,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "catchPokemon",
        .dataTypeSpecific.className = GPBStringifySymbol(CatchPokemonLogEntry),
        .number = ActionLogEntry_FieldNumber_CatchPokemon,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ActionLogEntry__storage_, catchPokemon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fortSearch",
        .dataTypeSpecific.className = GPBStringifySymbol(FortSearchLogEntry),
        .number = ActionLogEntry_FieldNumber_FortSearch,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ActionLogEntry__storage_, fortSearch),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "buddyPokemon",
        .dataTypeSpecific.className = GPBStringifySymbol(BuddyPokemonLogEntry),
        .number = ActionLogEntry_FieldNumber_BuddyPokemon,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ActionLogEntry__storage_, buddyPokemon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ActionLogEntry class]
                                     rootClass:[PogoprotosDataLogsRoot class]
                                          file:PogoprotosDataLogsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ActionLogEntry__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "action",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ActionLogEntry_ClearActionOneOfCase(ActionLogEntry *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - BuddyPokemonLogEntry

@implementation BuddyPokemonLogEntry

@dynamic result;
@dynamic pokemonId;
@dynamic amount;
@dynamic hasPokemonDisplay, pokemonDisplay;
@dynamic pokemon;

typedef struct BuddyPokemonLogEntry__storage_ {
  uint32_t _has_storage_[1];
  BuddyPokemonLogEntry_Result result;
  PokemonId pokemonId;
  int32_t amount;
  PokemonDisplay *pokemonDisplay;
  uint64_t pokemon;
} BuddyPokemonLogEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = BuddyPokemonLogEntry_Result_EnumDescriptor,
        .number = BuddyPokemonLogEntry_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BuddyPokemonLogEntry__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "pokemonId",
        .dataTypeSpecific.enumDescFunc = PokemonId_EnumDescriptor,
        .number = BuddyPokemonLogEntry_FieldNumber_PokemonId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BuddyPokemonLogEntry__storage_, pokemonId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = BuddyPokemonLogEntry_FieldNumber_Amount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BuddyPokemonLogEntry__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pokemonDisplay",
        .dataTypeSpecific.className = GPBStringifySymbol(PokemonDisplay),
        .number = BuddyPokemonLogEntry_FieldNumber_PokemonDisplay,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BuddyPokemonLogEntry__storage_, pokemonDisplay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pokemon",
        .dataTypeSpecific.className = NULL,
        .number = BuddyPokemonLogEntry_FieldNumber_Pokemon,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BuddyPokemonLogEntry__storage_, pokemon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BuddyPokemonLogEntry class]
                                     rootClass:[PogoprotosDataLogsRoot class]
                                          file:PogoprotosDataLogsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BuddyPokemonLogEntry__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t BuddyPokemonLogEntry_Result_RawValue(BuddyPokemonLogEntry *message) {
  GPBDescriptor *descriptor = [BuddyPokemonLogEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BuddyPokemonLogEntry_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetBuddyPokemonLogEntry_Result_RawValue(BuddyPokemonLogEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [BuddyPokemonLogEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BuddyPokemonLogEntry_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t BuddyPokemonLogEntry_PokemonId_RawValue(BuddyPokemonLogEntry *message) {
  GPBDescriptor *descriptor = [BuddyPokemonLogEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BuddyPokemonLogEntry_FieldNumber_PokemonId];
  return GPBGetMessageInt32Field(message, field);
}

void SetBuddyPokemonLogEntry_PokemonId_RawValue(BuddyPokemonLogEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [BuddyPokemonLogEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BuddyPokemonLogEntry_FieldNumber_PokemonId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum BuddyPokemonLogEntry_Result

GPBEnumDescriptor *BuddyPokemonLogEntry_Result_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unset\000CandyFound\000";
    static const int32_t values[] = {
        BuddyPokemonLogEntry_Result_Unset,
        BuddyPokemonLogEntry_Result_CandyFound,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BuddyPokemonLogEntry_Result)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BuddyPokemonLogEntry_Result_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BuddyPokemonLogEntry_Result_IsValidValue(int32_t value__) {
  switch (value__) {
    case BuddyPokemonLogEntry_Result_Unset:
    case BuddyPokemonLogEntry_Result_CandyFound:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - CatchPokemonLogEntry

@implementation CatchPokemonLogEntry

@dynamic result;
@dynamic pokemonId;
@dynamic combatPoints;
@dynamic pokemonDataId;
@dynamic hasPokemonDisplay, pokemonDisplay;

typedef struct CatchPokemonLogEntry__storage_ {
  uint32_t _has_storage_[1];
  CatchPokemonLogEntry_Result result;
  PokemonId pokemonId;
  int32_t combatPoints;
  PokemonDisplay *pokemonDisplay;
  uint64_t pokemonDataId;
} CatchPokemonLogEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = CatchPokemonLogEntry_Result_EnumDescriptor,
        .number = CatchPokemonLogEntry_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CatchPokemonLogEntry__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "pokemonId",
        .dataTypeSpecific.enumDescFunc = PokemonId_EnumDescriptor,
        .number = CatchPokemonLogEntry_FieldNumber_PokemonId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CatchPokemonLogEntry__storage_, pokemonId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "combatPoints",
        .dataTypeSpecific.className = NULL,
        .number = CatchPokemonLogEntry_FieldNumber_CombatPoints,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CatchPokemonLogEntry__storage_, combatPoints),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pokemonDataId",
        .dataTypeSpecific.className = NULL,
        .number = CatchPokemonLogEntry_FieldNumber_PokemonDataId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CatchPokemonLogEntry__storage_, pokemonDataId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
      },
      {
        .name = "pokemonDisplay",
        .dataTypeSpecific.className = GPBStringifySymbol(PokemonDisplay),
        .number = CatchPokemonLogEntry_FieldNumber_PokemonDisplay,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CatchPokemonLogEntry__storage_, pokemonDisplay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CatchPokemonLogEntry class]
                                     rootClass:[PogoprotosDataLogsRoot class]
                                          file:PogoprotosDataLogsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CatchPokemonLogEntry__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CatchPokemonLogEntry_Result_RawValue(CatchPokemonLogEntry *message) {
  GPBDescriptor *descriptor = [CatchPokemonLogEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CatchPokemonLogEntry_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetCatchPokemonLogEntry_Result_RawValue(CatchPokemonLogEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [CatchPokemonLogEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CatchPokemonLogEntry_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t CatchPokemonLogEntry_PokemonId_RawValue(CatchPokemonLogEntry *message) {
  GPBDescriptor *descriptor = [CatchPokemonLogEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CatchPokemonLogEntry_FieldNumber_PokemonId];
  return GPBGetMessageInt32Field(message, field);
}

void SetCatchPokemonLogEntry_PokemonId_RawValue(CatchPokemonLogEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [CatchPokemonLogEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CatchPokemonLogEntry_FieldNumber_PokemonId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum CatchPokemonLogEntry_Result

GPBEnumDescriptor *CatchPokemonLogEntry_Result_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unset\000PokemonCaptured\000PokemonFled\000Pokemo"
        "nHatched\000";
    static const int32_t values[] = {
        CatchPokemonLogEntry_Result_Unset,
        CatchPokemonLogEntry_Result_PokemonCaptured,
        CatchPokemonLogEntry_Result_PokemonFled,
        CatchPokemonLogEntry_Result_PokemonHatched,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CatchPokemonLogEntry_Result)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CatchPokemonLogEntry_Result_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CatchPokemonLogEntry_Result_IsValidValue(int32_t value__) {
  switch (value__) {
    case CatchPokemonLogEntry_Result_Unset:
    case CatchPokemonLogEntry_Result_PokemonCaptured:
    case CatchPokemonLogEntry_Result_PokemonFled:
    case CatchPokemonLogEntry_Result_PokemonHatched:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - FortSearchLogEntry

@implementation FortSearchLogEntry

@dynamic result;
@dynamic fortId;
@dynamic itemsArray, itemsArray_Count;
@dynamic eggs;
@dynamic pokemonEggsArray, pokemonEggsArray_Count;

typedef struct FortSearchLogEntry__storage_ {
  uint32_t _has_storage_[1];
  FortSearchLogEntry_Result result;
  int32_t eggs;
  NSString *fortId;
  NSMutableArray *itemsArray;
  NSMutableArray *pokemonEggsArray;
} FortSearchLogEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = FortSearchLogEntry_Result_EnumDescriptor,
        .number = FortSearchLogEntry_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FortSearchLogEntry__storage_, result),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fortId",
        .dataTypeSpecific.className = NULL,
        .number = FortSearchLogEntry_FieldNumber_FortId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FortSearchLogEntry__storage_, fortId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ItemData),
        .number = FortSearchLogEntry_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FortSearchLogEntry__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "eggs",
        .dataTypeSpecific.className = NULL,
        .number = FortSearchLogEntry_FieldNumber_Eggs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FortSearchLogEntry__storage_, eggs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pokemonEggsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PokemonData),
        .number = FortSearchLogEntry_FieldNumber_PokemonEggsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FortSearchLogEntry__storage_, pokemonEggsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FortSearchLogEntry class]
                                     rootClass:[PogoprotosDataLogsRoot class]
                                          file:PogoprotosDataLogsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FortSearchLogEntry__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FortSearchLogEntry_Result_RawValue(FortSearchLogEntry *message) {
  GPBDescriptor *descriptor = [FortSearchLogEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FortSearchLogEntry_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetFortSearchLogEntry_Result_RawValue(FortSearchLogEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [FortSearchLogEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FortSearchLogEntry_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum FortSearchLogEntry_Result

GPBEnumDescriptor *FortSearchLogEntry_Result_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unset\000Success\000";
    static const int32_t values[] = {
        FortSearchLogEntry_Result_Unset,
        FortSearchLogEntry_Result_Success,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(FortSearchLogEntry_Result)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:FortSearchLogEntry_Result_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL FortSearchLogEntry_Result_IsValidValue(int32_t value__) {
  switch (value__) {
    case FortSearchLogEntry_Result_Unset:
    case FortSearchLogEntry_Result_Success:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
