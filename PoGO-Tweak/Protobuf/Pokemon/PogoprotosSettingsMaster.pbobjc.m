// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Settings.Master.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PogoprotosSettingsMaster.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PogoprotosSettingsMasterRoot

@implementation PogoprotosSettingsMasterRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PogoprotosSettingsMasterRoot_FileDescriptor

static GPBFileDescriptor *PogoprotosSettingsMasterRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Settings.Master"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - AvatarCustomizationSettings

@implementation AvatarCustomizationSettings

@dynamic enabled;
@dynamic avatarType;
@dynamic slotArray, slotArray_Count;
@dynamic bundleName;
@dynamic assetName;
@dynamic groupName;
@dynamic sortOrder;
@dynamic unlockType;
@dynamic promoTypeArray, promoTypeArray_Count;
@dynamic unlockBadgeType;
@dynamic iapSku;
@dynamic unlockBadgeLevel;
@dynamic iconName;
@dynamic unlockPlayerLevel;

typedef struct AvatarCustomizationSettings__storage_ {
  uint32_t _has_storage_[1];
  PlayerAvatarType avatarType;
  int32_t sortOrder;
  AvatarCustomizationSettings_AvatarCustomizationUnlockType unlockType;
  BadgeType unlockBadgeType;
  int32_t unlockBadgeLevel;
  int32_t unlockPlayerLevel;
  GPBEnumArray *slotArray;
  NSString *bundleName;
  NSString *assetName;
  NSString *groupName;
  GPBEnumArray *promoTypeArray;
  NSString *iapSku;
  NSString *iconName;
} AvatarCustomizationSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "enabled",
        .dataTypeSpecific.className = NULL,
        .number = AvatarCustomizationSettings_FieldNumber_Enabled,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "avatarType",
        .dataTypeSpecific.enumDescFunc = PlayerAvatarType_EnumDescriptor,
        .number = AvatarCustomizationSettings_FieldNumber_AvatarType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AvatarCustomizationSettings__storage_, avatarType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "slotArray",
        .dataTypeSpecific.enumDescFunc = Slot_EnumDescriptor,
        .number = AvatarCustomizationSettings_FieldNumber_SlotArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AvatarCustomizationSettings__storage_, slotArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "bundleName",
        .dataTypeSpecific.className = NULL,
        .number = AvatarCustomizationSettings_FieldNumber_BundleName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AvatarCustomizationSettings__storage_, bundleName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "assetName",
        .dataTypeSpecific.className = NULL,
        .number = AvatarCustomizationSettings_FieldNumber_AssetName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AvatarCustomizationSettings__storage_, assetName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupName",
        .dataTypeSpecific.className = NULL,
        .number = AvatarCustomizationSettings_FieldNumber_GroupName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AvatarCustomizationSettings__storage_, groupName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sortOrder",
        .dataTypeSpecific.className = NULL,
        .number = AvatarCustomizationSettings_FieldNumber_SortOrder,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(AvatarCustomizationSettings__storage_, sortOrder),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "unlockType",
        .dataTypeSpecific.enumDescFunc = AvatarCustomizationSettings_AvatarCustomizationUnlockType_EnumDescriptor,
        .number = AvatarCustomizationSettings_FieldNumber_UnlockType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(AvatarCustomizationSettings__storage_, unlockType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "promoTypeArray",
        .dataTypeSpecific.enumDescFunc = AvatarCustomizationSettings_AvatarCustomizationPromoType_EnumDescriptor,
        .number = AvatarCustomizationSettings_FieldNumber_PromoTypeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AvatarCustomizationSettings__storage_, promoTypeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "unlockBadgeType",
        .dataTypeSpecific.enumDescFunc = BadgeType_EnumDescriptor,
        .number = AvatarCustomizationSettings_FieldNumber_UnlockBadgeType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(AvatarCustomizationSettings__storage_, unlockBadgeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "iapSku",
        .dataTypeSpecific.className = NULL,
        .number = AvatarCustomizationSettings_FieldNumber_IapSku,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(AvatarCustomizationSettings__storage_, iapSku),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unlockBadgeLevel",
        .dataTypeSpecific.className = NULL,
        .number = AvatarCustomizationSettings_FieldNumber_UnlockBadgeLevel,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(AvatarCustomizationSettings__storage_, unlockBadgeLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "iconName",
        .dataTypeSpecific.className = NULL,
        .number = AvatarCustomizationSettings_FieldNumber_IconName,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(AvatarCustomizationSettings__storage_, iconName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unlockPlayerLevel",
        .dataTypeSpecific.className = NULL,
        .number = AvatarCustomizationSettings_FieldNumber_UnlockPlayerLevel,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(AvatarCustomizationSettings__storage_, unlockPlayerLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AvatarCustomizationSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AvatarCustomizationSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AvatarCustomizationSettings_AvatarType_RawValue(AvatarCustomizationSettings *message) {
  GPBDescriptor *descriptor = [AvatarCustomizationSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AvatarCustomizationSettings_FieldNumber_AvatarType];
  return GPBGetMessageInt32Field(message, field);
}

void SetAvatarCustomizationSettings_AvatarType_RawValue(AvatarCustomizationSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [AvatarCustomizationSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AvatarCustomizationSettings_FieldNumber_AvatarType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t AvatarCustomizationSettings_UnlockType_RawValue(AvatarCustomizationSettings *message) {
  GPBDescriptor *descriptor = [AvatarCustomizationSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AvatarCustomizationSettings_FieldNumber_UnlockType];
  return GPBGetMessageInt32Field(message, field);
}

void SetAvatarCustomizationSettings_UnlockType_RawValue(AvatarCustomizationSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [AvatarCustomizationSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AvatarCustomizationSettings_FieldNumber_UnlockType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t AvatarCustomizationSettings_UnlockBadgeType_RawValue(AvatarCustomizationSettings *message) {
  GPBDescriptor *descriptor = [AvatarCustomizationSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AvatarCustomizationSettings_FieldNumber_UnlockBadgeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetAvatarCustomizationSettings_UnlockBadgeType_RawValue(AvatarCustomizationSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [AvatarCustomizationSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AvatarCustomizationSettings_FieldNumber_UnlockBadgeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum AvatarCustomizationSettings_AvatarCustomizationPromoType

GPBEnumDescriptor *AvatarCustomizationSettings_AvatarCustomizationPromoType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "UnsetPromoType\000Sale\000Featured\000";
    static const int32_t values[] = {
        AvatarCustomizationSettings_AvatarCustomizationPromoType_UnsetPromoType,
        AvatarCustomizationSettings_AvatarCustomizationPromoType_Sale,
        AvatarCustomizationSettings_AvatarCustomizationPromoType_Featured,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AvatarCustomizationSettings_AvatarCustomizationPromoType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:AvatarCustomizationSettings_AvatarCustomizationPromoType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL AvatarCustomizationSettings_AvatarCustomizationPromoType_IsValidValue(int32_t value__) {
  switch (value__) {
    case AvatarCustomizationSettings_AvatarCustomizationPromoType_UnsetPromoType:
    case AvatarCustomizationSettings_AvatarCustomizationPromoType_Sale:
    case AvatarCustomizationSettings_AvatarCustomizationPromoType_Featured:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum AvatarCustomizationSettings_AvatarCustomizationUnlockType

GPBEnumDescriptor *AvatarCustomizationSettings_AvatarCustomizationUnlockType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "UnsetUnlockType\000Default\000MedalReward\000IapC"
        "lothing\000LevelReward\000";
    static const int32_t values[] = {
        AvatarCustomizationSettings_AvatarCustomizationUnlockType_UnsetUnlockType,
        AvatarCustomizationSettings_AvatarCustomizationUnlockType_Default,
        AvatarCustomizationSettings_AvatarCustomizationUnlockType_MedalReward,
        AvatarCustomizationSettings_AvatarCustomizationUnlockType_IapClothing,
        AvatarCustomizationSettings_AvatarCustomizationUnlockType_LevelReward,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AvatarCustomizationSettings_AvatarCustomizationUnlockType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:AvatarCustomizationSettings_AvatarCustomizationUnlockType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL AvatarCustomizationSettings_AvatarCustomizationUnlockType_IsValidValue(int32_t value__) {
  switch (value__) {
    case AvatarCustomizationSettings_AvatarCustomizationUnlockType_UnsetUnlockType:
    case AvatarCustomizationSettings_AvatarCustomizationUnlockType_Default:
    case AvatarCustomizationSettings_AvatarCustomizationUnlockType_MedalReward:
    case AvatarCustomizationSettings_AvatarCustomizationUnlockType_IapClothing:
    case AvatarCustomizationSettings_AvatarCustomizationUnlockType_LevelReward:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - BadgeSettings

@implementation BadgeSettings

@dynamic badgeType;
@dynamic badgeRank;
@dynamic targetsArray, targetsArray_Count;
@dynamic captureRewardArray, captureRewardArray_Count;

typedef struct BadgeSettings__storage_ {
  uint32_t _has_storage_[1];
  BadgeType badgeType;
  int32_t badgeRank;
  GPBInt32Array *targetsArray;
  NSMutableArray *captureRewardArray;
} BadgeSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "badgeType",
        .dataTypeSpecific.enumDescFunc = BadgeType_EnumDescriptor,
        .number = BadgeSettings_FieldNumber_BadgeType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BadgeSettings__storage_, badgeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "badgeRank",
        .dataTypeSpecific.className = NULL,
        .number = BadgeSettings_FieldNumber_BadgeRank,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BadgeSettings__storage_, badgeRank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "targetsArray",
        .dataTypeSpecific.className = NULL,
        .number = BadgeSettings_FieldNumber_TargetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BadgeSettings__storage_, targetsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "captureRewardArray",
        .dataTypeSpecific.className = GPBStringifySymbol(BadgeCaptureReward),
        .number = BadgeSettings_FieldNumber_CaptureRewardArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BadgeSettings__storage_, captureRewardArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BadgeSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BadgeSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t BadgeSettings_BadgeType_RawValue(BadgeSettings *message) {
  GPBDescriptor *descriptor = [BadgeSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BadgeSettings_FieldNumber_BadgeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetBadgeSettings_BadgeType_RawValue(BadgeSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [BadgeSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BadgeSettings_FieldNumber_BadgeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - CameraSettings

@implementation CameraSettings

@dynamic nextCamera;
@dynamic interpolationArray, interpolationArray_Count;
@dynamic targetTypeArray, targetTypeArray_Count;
@dynamic easeInSpeedArray, easeInSpeedArray_Count;
@dynamic eastOutSpeedArray, eastOutSpeedArray_Count;
@dynamic durationSecondsArray, durationSecondsArray_Count;
@dynamic waitSecondsArray, waitSecondsArray_Count;
@dynamic transitionSecondsArray, transitionSecondsArray_Count;
@dynamic angleDegreeArray, angleDegreeArray_Count;
@dynamic angleOffsetDegreeArray, angleOffsetDegreeArray_Count;
@dynamic pitchDegreeArray, pitchDegreeArray_Count;
@dynamic pitchOffsetDegreeArray, pitchOffsetDegreeArray_Count;
@dynamic rollDegreeArray, rollDegreeArray_Count;
@dynamic distanceMetersArray, distanceMetersArray_Count;
@dynamic heightPercentArray, heightPercentArray_Count;
@dynamic vertCtrRatioArray, vertCtrRatioArray_Count;

typedef struct CameraSettings__storage_ {
  uint32_t _has_storage_[1];
  NSString *nextCamera;
  GPBEnumArray *interpolationArray;
  GPBEnumArray *targetTypeArray;
  GPBFloatArray *easeInSpeedArray;
  GPBFloatArray *eastOutSpeedArray;
  GPBFloatArray *durationSecondsArray;
  GPBFloatArray *waitSecondsArray;
  GPBFloatArray *transitionSecondsArray;
  GPBFloatArray *angleDegreeArray;
  GPBFloatArray *angleOffsetDegreeArray;
  GPBFloatArray *pitchDegreeArray;
  GPBFloatArray *pitchOffsetDegreeArray;
  GPBFloatArray *rollDegreeArray;
  GPBFloatArray *distanceMetersArray;
  GPBFloatArray *heightPercentArray;
  GPBFloatArray *vertCtrRatioArray;
} CameraSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nextCamera",
        .dataTypeSpecific.className = NULL,
        .number = CameraSettings_FieldNumber_NextCamera,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CameraSettings__storage_, nextCamera),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "interpolationArray",
        .dataTypeSpecific.enumDescFunc = CameraInterpolation_EnumDescriptor,
        .number = CameraSettings_FieldNumber_InterpolationArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraSettings__storage_, interpolationArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "targetTypeArray",
        .dataTypeSpecific.enumDescFunc = CameraTarget_EnumDescriptor,
        .number = CameraSettings_FieldNumber_TargetTypeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraSettings__storage_, targetTypeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "easeInSpeedArray",
        .dataTypeSpecific.className = NULL,
        .number = CameraSettings_FieldNumber_EaseInSpeedArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraSettings__storage_, easeInSpeedArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "eastOutSpeedArray",
        .dataTypeSpecific.className = NULL,
        .number = CameraSettings_FieldNumber_EastOutSpeedArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraSettings__storage_, eastOutSpeedArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "durationSecondsArray",
        .dataTypeSpecific.className = NULL,
        .number = CameraSettings_FieldNumber_DurationSecondsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraSettings__storage_, durationSecondsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "waitSecondsArray",
        .dataTypeSpecific.className = NULL,
        .number = CameraSettings_FieldNumber_WaitSecondsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraSettings__storage_, waitSecondsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "transitionSecondsArray",
        .dataTypeSpecific.className = NULL,
        .number = CameraSettings_FieldNumber_TransitionSecondsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraSettings__storage_, transitionSecondsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "angleDegreeArray",
        .dataTypeSpecific.className = NULL,
        .number = CameraSettings_FieldNumber_AngleDegreeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraSettings__storage_, angleDegreeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "angleOffsetDegreeArray",
        .dataTypeSpecific.className = NULL,
        .number = CameraSettings_FieldNumber_AngleOffsetDegreeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraSettings__storage_, angleOffsetDegreeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "pitchDegreeArray",
        .dataTypeSpecific.className = NULL,
        .number = CameraSettings_FieldNumber_PitchDegreeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraSettings__storage_, pitchDegreeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "pitchOffsetDegreeArray",
        .dataTypeSpecific.className = NULL,
        .number = CameraSettings_FieldNumber_PitchOffsetDegreeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraSettings__storage_, pitchOffsetDegreeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "rollDegreeArray",
        .dataTypeSpecific.className = NULL,
        .number = CameraSettings_FieldNumber_RollDegreeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraSettings__storage_, rollDegreeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "distanceMetersArray",
        .dataTypeSpecific.className = NULL,
        .number = CameraSettings_FieldNumber_DistanceMetersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraSettings__storage_, distanceMetersArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "heightPercentArray",
        .dataTypeSpecific.className = NULL,
        .number = CameraSettings_FieldNumber_HeightPercentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraSettings__storage_, heightPercentArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "vertCtrRatioArray",
        .dataTypeSpecific.className = NULL,
        .number = CameraSettings_FieldNumber_VertCtrRatioArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CameraSettings__storage_, vertCtrRatioArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CameraSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CameraSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EncounterSettings

@implementation EncounterSettings

@dynamic spinBonusThreshold;
@dynamic excellentThrowThreshold;
@dynamic greatThrowThreshold;
@dynamic niceThrowThreshold;
@dynamic milestoneThreshold;

typedef struct EncounterSettings__storage_ {
  uint32_t _has_storage_[1];
  float spinBonusThreshold;
  float excellentThrowThreshold;
  float greatThrowThreshold;
  float niceThrowThreshold;
  int32_t milestoneThreshold;
} EncounterSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spinBonusThreshold",
        .dataTypeSpecific.className = NULL,
        .number = EncounterSettings_FieldNumber_SpinBonusThreshold,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EncounterSettings__storage_, spinBonusThreshold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "excellentThrowThreshold",
        .dataTypeSpecific.className = NULL,
        .number = EncounterSettings_FieldNumber_ExcellentThrowThreshold,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EncounterSettings__storage_, excellentThrowThreshold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "greatThrowThreshold",
        .dataTypeSpecific.className = NULL,
        .number = EncounterSettings_FieldNumber_GreatThrowThreshold,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EncounterSettings__storage_, greatThrowThreshold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "niceThrowThreshold",
        .dataTypeSpecific.className = NULL,
        .number = EncounterSettings_FieldNumber_NiceThrowThreshold,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EncounterSettings__storage_, niceThrowThreshold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "milestoneThreshold",
        .dataTypeSpecific.className = NULL,
        .number = EncounterSettings_FieldNumber_MilestoneThreshold,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(EncounterSettings__storage_, milestoneThreshold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EncounterSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EncounterSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EquippedBadgeSettings

@implementation EquippedBadgeSettings

@dynamic equipBadgeCooldownMs;
@dynamic catchProbabilityBonusArray, catchProbabilityBonusArray_Count;
@dynamic fleeProbabilityBonusArray, fleeProbabilityBonusArray_Count;

typedef struct EquippedBadgeSettings__storage_ {
  uint32_t _has_storage_[1];
  GPBFloatArray *catchProbabilityBonusArray;
  GPBFloatArray *fleeProbabilityBonusArray;
  int64_t equipBadgeCooldownMs;
} EquippedBadgeSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "equipBadgeCooldownMs",
        .dataTypeSpecific.className = NULL,
        .number = EquippedBadgeSettings_FieldNumber_EquipBadgeCooldownMs,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EquippedBadgeSettings__storage_, equipBadgeCooldownMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "catchProbabilityBonusArray",
        .dataTypeSpecific.className = NULL,
        .number = EquippedBadgeSettings_FieldNumber_CatchProbabilityBonusArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EquippedBadgeSettings__storage_, catchProbabilityBonusArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "fleeProbabilityBonusArray",
        .dataTypeSpecific.className = NULL,
        .number = EquippedBadgeSettings_FieldNumber_FleeProbabilityBonusArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EquippedBadgeSettings__storage_, fleeProbabilityBonusArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EquippedBadgeSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EquippedBadgeSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FormSettings

@implementation FormSettings

@dynamic pokemon;
@dynamic formsArray, formsArray_Count;

typedef struct FormSettings__storage_ {
  uint32_t _has_storage_[1];
  PokemonId pokemon;
  NSMutableArray *formsArray;
} FormSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pokemon",
        .dataTypeSpecific.enumDescFunc = PokemonId_EnumDescriptor,
        .number = FormSettings_FieldNumber_Pokemon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FormSettings__storage_, pokemon),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "formsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FormSettings_Form),
        .number = FormSettings_FieldNumber_FormsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FormSettings__storage_, formsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FormSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FormSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FormSettings_Pokemon_RawValue(FormSettings *message) {
  GPBDescriptor *descriptor = [FormSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FormSettings_FieldNumber_Pokemon];
  return GPBGetMessageInt32Field(message, field);
}

void SetFormSettings_Pokemon_RawValue(FormSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [FormSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FormSettings_FieldNumber_Pokemon];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - FormSettings_Form

@implementation FormSettings_Form

@dynamic form;
@dynamic assetBundleValue;

typedef struct FormSettings_Form__storage_ {
  uint32_t _has_storage_[1];
  Form form;
  int32_t assetBundleValue;
} FormSettings_Form__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "form",
        .dataTypeSpecific.enumDescFunc = Form_EnumDescriptor,
        .number = FormSettings_Form_FieldNumber_Form,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FormSettings_Form__storage_, form),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "assetBundleValue",
        .dataTypeSpecific.className = NULL,
        .number = FormSettings_Form_FieldNumber_AssetBundleValue,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FormSettings_Form__storage_, assetBundleValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FormSettings_Form class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FormSettings_Form__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(FormSettings)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FormSettings_Form_Form_RawValue(FormSettings_Form *message) {
  GPBDescriptor *descriptor = [FormSettings_Form descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FormSettings_Form_FieldNumber_Form];
  return GPBGetMessageInt32Field(message, field);
}

void SetFormSettings_Form_Form_RawValue(FormSettings_Form *message, int32_t value) {
  GPBDescriptor *descriptor = [FormSettings_Form descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FormSettings_Form_FieldNumber_Form];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GenderSettings

@implementation GenderSettings

@dynamic pokemon;
@dynamic hasGender, gender;

typedef struct GenderSettings__storage_ {
  uint32_t _has_storage_[1];
  PokemonId pokemon;
  PokemonGenderSettings *gender;
} GenderSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pokemon",
        .dataTypeSpecific.enumDescFunc = PokemonId_EnumDescriptor,
        .number = GenderSettings_FieldNumber_Pokemon,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GenderSettings__storage_, pokemon),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = GPBStringifySymbol(PokemonGenderSettings),
        .number = GenderSettings_FieldNumber_Gender,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GenderSettings__storage_, gender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GenderSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GenderSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GenderSettings_Pokemon_RawValue(GenderSettings *message) {
  GPBDescriptor *descriptor = [GenderSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GenderSettings_FieldNumber_Pokemon];
  return GPBGetMessageInt32Field(message, field);
}

void SetGenderSettings_Pokemon_RawValue(GenderSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [GenderSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GenderSettings_FieldNumber_Pokemon];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GymBattleSettings

@implementation GymBattleSettings

@dynamic energyPerSec;
@dynamic dodgeEnergyCost;
@dynamic retargetSeconds;
@dynamic enemyAttackInterval;
@dynamic attackServerInterval;
@dynamic roundDurationSeconds;
@dynamic bonusTimePerAllySeconds;
@dynamic maximumAttackersPerBattle;
@dynamic sameTypeAttackBonusMultiplier;
@dynamic maximumEnergy;
@dynamic energyDeltaPerHealthLost;
@dynamic dodgeDurationMs;
@dynamic minimumPlayerLevel;
@dynamic swapDurationMs;
@dynamic dodgeDamageReductionPercent;

typedef struct GymBattleSettings__storage_ {
  uint32_t _has_storage_[1];
  float energyPerSec;
  float dodgeEnergyCost;
  float retargetSeconds;
  float enemyAttackInterval;
  float attackServerInterval;
  float roundDurationSeconds;
  float bonusTimePerAllySeconds;
  int32_t maximumAttackersPerBattle;
  float sameTypeAttackBonusMultiplier;
  int32_t maximumEnergy;
  float energyDeltaPerHealthLost;
  int32_t dodgeDurationMs;
  int32_t minimumPlayerLevel;
  int32_t swapDurationMs;
  float dodgeDamageReductionPercent;
} GymBattleSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "energyPerSec",
        .dataTypeSpecific.className = NULL,
        .number = GymBattleSettings_FieldNumber_EnergyPerSec,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GymBattleSettings__storage_, energyPerSec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "dodgeEnergyCost",
        .dataTypeSpecific.className = NULL,
        .number = GymBattleSettings_FieldNumber_DodgeEnergyCost,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GymBattleSettings__storage_, dodgeEnergyCost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "retargetSeconds",
        .dataTypeSpecific.className = NULL,
        .number = GymBattleSettings_FieldNumber_RetargetSeconds,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GymBattleSettings__storage_, retargetSeconds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "enemyAttackInterval",
        .dataTypeSpecific.className = NULL,
        .number = GymBattleSettings_FieldNumber_EnemyAttackInterval,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GymBattleSettings__storage_, enemyAttackInterval),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "attackServerInterval",
        .dataTypeSpecific.className = NULL,
        .number = GymBattleSettings_FieldNumber_AttackServerInterval,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GymBattleSettings__storage_, attackServerInterval),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "roundDurationSeconds",
        .dataTypeSpecific.className = NULL,
        .number = GymBattleSettings_FieldNumber_RoundDurationSeconds,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(GymBattleSettings__storage_, roundDurationSeconds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "bonusTimePerAllySeconds",
        .dataTypeSpecific.className = NULL,
        .number = GymBattleSettings_FieldNumber_BonusTimePerAllySeconds,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GymBattleSettings__storage_, bonusTimePerAllySeconds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "maximumAttackersPerBattle",
        .dataTypeSpecific.className = NULL,
        .number = GymBattleSettings_FieldNumber_MaximumAttackersPerBattle,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GymBattleSettings__storage_, maximumAttackersPerBattle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sameTypeAttackBonusMultiplier",
        .dataTypeSpecific.className = NULL,
        .number = GymBattleSettings_FieldNumber_SameTypeAttackBonusMultiplier,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GymBattleSettings__storage_, sameTypeAttackBonusMultiplier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "maximumEnergy",
        .dataTypeSpecific.className = NULL,
        .number = GymBattleSettings_FieldNumber_MaximumEnergy,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GymBattleSettings__storage_, maximumEnergy),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "energyDeltaPerHealthLost",
        .dataTypeSpecific.className = NULL,
        .number = GymBattleSettings_FieldNumber_EnergyDeltaPerHealthLost,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GymBattleSettings__storage_, energyDeltaPerHealthLost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "dodgeDurationMs",
        .dataTypeSpecific.className = NULL,
        .number = GymBattleSettings_FieldNumber_DodgeDurationMs,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GymBattleSettings__storage_, dodgeDurationMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "minimumPlayerLevel",
        .dataTypeSpecific.className = NULL,
        .number = GymBattleSettings_FieldNumber_MinimumPlayerLevel,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GymBattleSettings__storage_, minimumPlayerLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "swapDurationMs",
        .dataTypeSpecific.className = NULL,
        .number = GymBattleSettings_FieldNumber_SwapDurationMs,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GymBattleSettings__storage_, swapDurationMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dodgeDamageReductionPercent",
        .dataTypeSpecific.className = NULL,
        .number = GymBattleSettings_FieldNumber_DodgeDamageReductionPercent,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(GymBattleSettings__storage_, dodgeDamageReductionPercent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GymBattleSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GymBattleSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GymLevelSettings

@implementation GymLevelSettings

@dynamic requiredExperienceArray, requiredExperienceArray_Count;
@dynamic leaderSlotsArray, leaderSlotsArray_Count;
@dynamic trainerSlotsArray, trainerSlotsArray_Count;
@dynamic searchRollBonusArray, searchRollBonusArray_Count;

typedef struct GymLevelSettings__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32Array *requiredExperienceArray;
  GPBInt32Array *leaderSlotsArray;
  GPBInt32Array *trainerSlotsArray;
  GPBInt32Array *searchRollBonusArray;
} GymLevelSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requiredExperienceArray",
        .dataTypeSpecific.className = NULL,
        .number = GymLevelSettings_FieldNumber_RequiredExperienceArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GymLevelSettings__storage_, requiredExperienceArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "leaderSlotsArray",
        .dataTypeSpecific.className = NULL,
        .number = GymLevelSettings_FieldNumber_LeaderSlotsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GymLevelSettings__storage_, leaderSlotsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "trainerSlotsArray",
        .dataTypeSpecific.className = NULL,
        .number = GymLevelSettings_FieldNumber_TrainerSlotsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GymLevelSettings__storage_, trainerSlotsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "searchRollBonusArray",
        .dataTypeSpecific.className = NULL,
        .number = GymLevelSettings_FieldNumber_SearchRollBonusArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GymLevelSettings__storage_, searchRollBonusArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GymLevelSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GymLevelSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IapItemDisplay

@implementation IapItemDisplay

@dynamic sku;
@dynamic category;
@dynamic sortOrder;
@dynamic itemIdsArray, itemIdsArray_Count;
@dynamic countsArray, countsArray_Count;

typedef struct IapItemDisplay__storage_ {
  uint32_t _has_storage_[1];
  HoloIapItemCategory category;
  int32_t sortOrder;
  NSString *sku;
  GPBEnumArray *itemIdsArray;
  GPBInt32Array *countsArray;
} IapItemDisplay__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sku",
        .dataTypeSpecific.className = NULL,
        .number = IapItemDisplay_FieldNumber_Sku,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IapItemDisplay__storage_, sku),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "category",
        .dataTypeSpecific.enumDescFunc = HoloIapItemCategory_EnumDescriptor,
        .number = IapItemDisplay_FieldNumber_Category,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IapItemDisplay__storage_, category),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sortOrder",
        .dataTypeSpecific.className = NULL,
        .number = IapItemDisplay_FieldNumber_SortOrder,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IapItemDisplay__storage_, sortOrder),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "itemIdsArray",
        .dataTypeSpecific.enumDescFunc = ItemId_EnumDescriptor,
        .number = IapItemDisplay_FieldNumber_ItemIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IapItemDisplay__storage_, itemIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "countsArray",
        .dataTypeSpecific.className = NULL,
        .number = IapItemDisplay_FieldNumber_CountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IapItemDisplay__storage_, countsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IapItemDisplay class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IapItemDisplay__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t IapItemDisplay_Category_RawValue(IapItemDisplay *message) {
  GPBDescriptor *descriptor = [IapItemDisplay descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IapItemDisplay_FieldNumber_Category];
  return GPBGetMessageInt32Field(message, field);
}

void SetIapItemDisplay_Category_RawValue(IapItemDisplay *message, int32_t value) {
  GPBDescriptor *descriptor = [IapItemDisplay descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IapItemDisplay_FieldNumber_Category];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - IapSettings

@implementation IapSettings

@dynamic dailyBonusCoins;
@dynamic dailyDefenderBonusPerPokemonArray, dailyDefenderBonusPerPokemonArray_Count;
@dynamic dailyDefenderBonusMaxDefenders;
@dynamic dailyDefenderBonusCurrencyArray, dailyDefenderBonusCurrencyArray_Count;
@dynamic minTimeBetweenClaimsMs;
@dynamic dailyBonusEnabled;
@dynamic dailyDefenderBonusEnabled;

typedef struct IapSettings__storage_ {
  uint32_t _has_storage_[1];
  int32_t dailyBonusCoins;
  int32_t dailyDefenderBonusMaxDefenders;
  GPBInt32Array *dailyDefenderBonusPerPokemonArray;
  NSMutableArray *dailyDefenderBonusCurrencyArray;
  int64_t minTimeBetweenClaimsMs;
} IapSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dailyBonusCoins",
        .dataTypeSpecific.className = NULL,
        .number = IapSettings_FieldNumber_DailyBonusCoins,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IapSettings__storage_, dailyBonusCoins),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dailyDefenderBonusPerPokemonArray",
        .dataTypeSpecific.className = NULL,
        .number = IapSettings_FieldNumber_DailyDefenderBonusPerPokemonArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IapSettings__storage_, dailyDefenderBonusPerPokemonArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dailyDefenderBonusMaxDefenders",
        .dataTypeSpecific.className = NULL,
        .number = IapSettings_FieldNumber_DailyDefenderBonusMaxDefenders,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IapSettings__storage_, dailyDefenderBonusMaxDefenders),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dailyDefenderBonusCurrencyArray",
        .dataTypeSpecific.className = NULL,
        .number = IapSettings_FieldNumber_DailyDefenderBonusCurrencyArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IapSettings__storage_, dailyDefenderBonusCurrencyArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "minTimeBetweenClaimsMs",
        .dataTypeSpecific.className = NULL,
        .number = IapSettings_FieldNumber_MinTimeBetweenClaimsMs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IapSettings__storage_, minTimeBetweenClaimsMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dailyBonusEnabled",
        .dataTypeSpecific.className = NULL,
        .number = IapSettings_FieldNumber_DailyBonusEnabled,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "dailyDefenderBonusEnabled",
        .dataTypeSpecific.className = NULL,
        .number = IapSettings_FieldNumber_DailyDefenderBonusEnabled,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IapSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IapSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ItemSettings

@implementation ItemSettings

@dynamic itemId;
@dynamic itemType;
@dynamic category;
@dynamic dropFreq;
@dynamic dropTrainerLevel;
@dynamic hasPokeball, pokeball;
@dynamic hasPotion, potion;
@dynamic hasRevive, revive;
@dynamic hasBattle, battle;
@dynamic hasFood, food;
@dynamic hasInventoryUpgrade, inventoryUpgrade;
@dynamic hasXpBoost, xpBoost;
@dynamic hasIncense, incense;
@dynamic hasEggIncubator, eggIncubator;
@dynamic hasFortModifier, fortModifier;

typedef struct ItemSettings__storage_ {
  uint32_t _has_storage_[1];
  ItemId itemId;
  ItemType itemType;
  ItemCategory category;
  float dropFreq;
  int32_t dropTrainerLevel;
  PokeballAttributes *pokeball;
  PotionAttributes *potion;
  ReviveAttributes *revive;
  BattleAttributes *battle;
  FoodAttributes *food;
  InventoryUpgradeAttributes *inventoryUpgrade;
  ExperienceBoostAttributes *xpBoost;
  IncenseAttributes *incense;
  EggIncubatorAttributes *eggIncubator;
  FortModifierAttributes *fortModifier;
} ItemSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemId",
        .dataTypeSpecific.enumDescFunc = ItemId_EnumDescriptor,
        .number = ItemSettings_FieldNumber_ItemId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, itemId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "itemType",
        .dataTypeSpecific.enumDescFunc = ItemType_EnumDescriptor,
        .number = ItemSettings_FieldNumber_ItemType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, itemType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "category",
        .dataTypeSpecific.enumDescFunc = ItemCategory_EnumDescriptor,
        .number = ItemSettings_FieldNumber_Category,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, category),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "dropFreq",
        .dataTypeSpecific.className = NULL,
        .number = ItemSettings_FieldNumber_DropFreq,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, dropFreq),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "dropTrainerLevel",
        .dataTypeSpecific.className = NULL,
        .number = ItemSettings_FieldNumber_DropTrainerLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, dropTrainerLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pokeball",
        .dataTypeSpecific.className = GPBStringifySymbol(PokeballAttributes),
        .number = ItemSettings_FieldNumber_Pokeball,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, pokeball),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "potion",
        .dataTypeSpecific.className = GPBStringifySymbol(PotionAttributes),
        .number = ItemSettings_FieldNumber_Potion,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, potion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "revive",
        .dataTypeSpecific.className = GPBStringifySymbol(ReviveAttributes),
        .number = ItemSettings_FieldNumber_Revive,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, revive),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "battle",
        .dataTypeSpecific.className = GPBStringifySymbol(BattleAttributes),
        .number = ItemSettings_FieldNumber_Battle,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, battle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "food",
        .dataTypeSpecific.className = GPBStringifySymbol(FoodAttributes),
        .number = ItemSettings_FieldNumber_Food,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, food),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inventoryUpgrade",
        .dataTypeSpecific.className = GPBStringifySymbol(InventoryUpgradeAttributes),
        .number = ItemSettings_FieldNumber_InventoryUpgrade,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, inventoryUpgrade),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "xpBoost",
        .dataTypeSpecific.className = GPBStringifySymbol(ExperienceBoostAttributes),
        .number = ItemSettings_FieldNumber_XpBoost,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, xpBoost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "incense",
        .dataTypeSpecific.className = GPBStringifySymbol(IncenseAttributes),
        .number = ItemSettings_FieldNumber_Incense,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, incense),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "eggIncubator",
        .dataTypeSpecific.className = GPBStringifySymbol(EggIncubatorAttributes),
        .number = ItemSettings_FieldNumber_EggIncubator,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, eggIncubator),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fortModifier",
        .dataTypeSpecific.className = GPBStringifySymbol(FortModifierAttributes),
        .number = ItemSettings_FieldNumber_FortModifier,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(ItemSettings__storage_, fortModifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ItemSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ItemSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ItemSettings_ItemId_RawValue(ItemSettings *message) {
  GPBDescriptor *descriptor = [ItemSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ItemSettings_FieldNumber_ItemId];
  return GPBGetMessageInt32Field(message, field);
}

void SetItemSettings_ItemId_RawValue(ItemSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [ItemSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ItemSettings_FieldNumber_ItemId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t ItemSettings_ItemType_RawValue(ItemSettings *message) {
  GPBDescriptor *descriptor = [ItemSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ItemSettings_FieldNumber_ItemType];
  return GPBGetMessageInt32Field(message, field);
}

void SetItemSettings_ItemType_RawValue(ItemSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [ItemSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ItemSettings_FieldNumber_ItemType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t ItemSettings_Category_RawValue(ItemSettings *message) {
  GPBDescriptor *descriptor = [ItemSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ItemSettings_FieldNumber_Category];
  return GPBGetMessageInt32Field(message, field);
}

void SetItemSettings_Category_RawValue(ItemSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [ItemSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ItemSettings_FieldNumber_Category];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - MoveSequenceSettings

@implementation MoveSequenceSettings

@dynamic sequenceArray, sequenceArray_Count;

typedef struct MoveSequenceSettings__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *sequenceArray;
} MoveSequenceSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sequenceArray",
        .dataTypeSpecific.className = NULL,
        .number = MoveSequenceSettings_FieldNumber_SequenceArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MoveSequenceSettings__storage_, sequenceArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MoveSequenceSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MoveSequenceSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MoveSettings

@implementation MoveSettings

@dynamic movementId;
@dynamic animationId;
@dynamic pokemonType;
@dynamic power;
@dynamic accuracyChance;
@dynamic criticalChance;
@dynamic healScalar;
@dynamic staminaLossScalar;
@dynamic trainerLevelMin;
@dynamic trainerLevelMax;
@dynamic vfxName;
@dynamic durationMs;
@dynamic damageWindowStartMs;
@dynamic damageWindowEndMs;
@dynamic energyDelta;

typedef struct MoveSettings__storage_ {
  uint32_t _has_storage_[1];
  PokemonMove movementId;
  int32_t animationId;
  PokemonType pokemonType;
  float power;
  float accuracyChance;
  float criticalChance;
  float healScalar;
  float staminaLossScalar;
  int32_t trainerLevelMin;
  int32_t trainerLevelMax;
  int32_t durationMs;
  int32_t damageWindowStartMs;
  int32_t damageWindowEndMs;
  int32_t energyDelta;
  NSString *vfxName;
} MoveSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "movementId",
        .dataTypeSpecific.enumDescFunc = PokemonMove_EnumDescriptor,
        .number = MoveSettings_FieldNumber_MovementId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MoveSettings__storage_, movementId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "animationId",
        .dataTypeSpecific.className = NULL,
        .number = MoveSettings_FieldNumber_AnimationId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MoveSettings__storage_, animationId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pokemonType",
        .dataTypeSpecific.enumDescFunc = PokemonType_EnumDescriptor,
        .number = MoveSettings_FieldNumber_PokemonType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MoveSettings__storage_, pokemonType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "power",
        .dataTypeSpecific.className = NULL,
        .number = MoveSettings_FieldNumber_Power,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MoveSettings__storage_, power),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "accuracyChance",
        .dataTypeSpecific.className = NULL,
        .number = MoveSettings_FieldNumber_AccuracyChance,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MoveSettings__storage_, accuracyChance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "criticalChance",
        .dataTypeSpecific.className = NULL,
        .number = MoveSettings_FieldNumber_CriticalChance,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MoveSettings__storage_, criticalChance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "healScalar",
        .dataTypeSpecific.className = NULL,
        .number = MoveSettings_FieldNumber_HealScalar,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MoveSettings__storage_, healScalar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "staminaLossScalar",
        .dataTypeSpecific.className = NULL,
        .number = MoveSettings_FieldNumber_StaminaLossScalar,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MoveSettings__storage_, staminaLossScalar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "trainerLevelMin",
        .dataTypeSpecific.className = NULL,
        .number = MoveSettings_FieldNumber_TrainerLevelMin,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(MoveSettings__storage_, trainerLevelMin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "trainerLevelMax",
        .dataTypeSpecific.className = NULL,
        .number = MoveSettings_FieldNumber_TrainerLevelMax,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(MoveSettings__storage_, trainerLevelMax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "vfxName",
        .dataTypeSpecific.className = NULL,
        .number = MoveSettings_FieldNumber_VfxName,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(MoveSettings__storage_, vfxName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "durationMs",
        .dataTypeSpecific.className = NULL,
        .number = MoveSettings_FieldNumber_DurationMs,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(MoveSettings__storage_, durationMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "damageWindowStartMs",
        .dataTypeSpecific.className = NULL,
        .number = MoveSettings_FieldNumber_DamageWindowStartMs,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(MoveSettings__storage_, damageWindowStartMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "damageWindowEndMs",
        .dataTypeSpecific.className = NULL,
        .number = MoveSettings_FieldNumber_DamageWindowEndMs,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(MoveSettings__storage_, damageWindowEndMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "energyDelta",
        .dataTypeSpecific.className = NULL,
        .number = MoveSettings_FieldNumber_EnergyDelta,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(MoveSettings__storage_, energyDelta),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MoveSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MoveSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MoveSettings_MovementId_RawValue(MoveSettings *message) {
  GPBDescriptor *descriptor = [MoveSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MoveSettings_FieldNumber_MovementId];
  return GPBGetMessageInt32Field(message, field);
}

void SetMoveSettings_MovementId_RawValue(MoveSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [MoveSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MoveSettings_FieldNumber_MovementId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t MoveSettings_PokemonType_RawValue(MoveSettings *message) {
  GPBDescriptor *descriptor = [MoveSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MoveSettings_FieldNumber_PokemonType];
  return GPBGetMessageInt32Field(message, field);
}

void SetMoveSettings_PokemonType_RawValue(MoveSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [MoveSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MoveSettings_FieldNumber_PokemonType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PlayerLevelSettings

@implementation PlayerLevelSettings

@dynamic rankNumArray, rankNumArray_Count;
@dynamic requiredExperienceArray, requiredExperienceArray_Count;
@dynamic cpMultiplierArray, cpMultiplierArray_Count;
@dynamic maxEggPlayerLevel;
@dynamic maxEncounterPlayerLevel;

typedef struct PlayerLevelSettings__storage_ {
  uint32_t _has_storage_[1];
  int32_t maxEggPlayerLevel;
  int32_t maxEncounterPlayerLevel;
  GPBInt32Array *rankNumArray;
  GPBInt32Array *requiredExperienceArray;
  GPBFloatArray *cpMultiplierArray;
} PlayerLevelSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rankNumArray",
        .dataTypeSpecific.className = NULL,
        .number = PlayerLevelSettings_FieldNumber_RankNumArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PlayerLevelSettings__storage_, rankNumArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "requiredExperienceArray",
        .dataTypeSpecific.className = NULL,
        .number = PlayerLevelSettings_FieldNumber_RequiredExperienceArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PlayerLevelSettings__storage_, requiredExperienceArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "cpMultiplierArray",
        .dataTypeSpecific.className = NULL,
        .number = PlayerLevelSettings_FieldNumber_CpMultiplierArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PlayerLevelSettings__storage_, cpMultiplierArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "maxEggPlayerLevel",
        .dataTypeSpecific.className = NULL,
        .number = PlayerLevelSettings_FieldNumber_MaxEggPlayerLevel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PlayerLevelSettings__storage_, maxEggPlayerLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxEncounterPlayerLevel",
        .dataTypeSpecific.className = NULL,
        .number = PlayerLevelSettings_FieldNumber_MaxEncounterPlayerLevel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PlayerLevelSettings__storage_, maxEncounterPlayerLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlayerLevelSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlayerLevelSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PokemonSettings

@implementation PokemonSettings

@dynamic pokemonId;
@dynamic modelScale;
@dynamic type;
@dynamic type2;
@dynamic hasCamera, camera;
@dynamic hasEncounter, encounter;
@dynamic hasStats, stats;
@dynamic quickMovesArray, quickMovesArray_Count;
@dynamic cinematicMovesArray, cinematicMovesArray_Count;
@dynamic animationTimeArray, animationTimeArray_Count;
@dynamic evolutionIdsArray, evolutionIdsArray_Count;
@dynamic evolutionPips;
@dynamic rarity;
@dynamic pokedexHeightM;
@dynamic pokedexWeightKg;
@dynamic parentPokemonId;
@dynamic heightStdDev;
@dynamic weightStdDev;
@dynamic kmDistanceToHatch;
@dynamic familyId;
@dynamic candyToEvolve;
@dynamic kmBuddyDistance;
@dynamic buddySize;
@dynamic modelHeight;
@dynamic evolutionBranchArray, evolutionBranchArray_Count;

typedef struct PokemonSettings__storage_ {
  uint32_t _has_storage_[1];
  PokemonId pokemonId;
  float modelScale;
  PokemonType type;
  PokemonType type2;
  int32_t evolutionPips;
  PokemonRarity rarity;
  float pokedexHeightM;
  float pokedexWeightKg;
  PokemonId parentPokemonId;
  float heightStdDev;
  float weightStdDev;
  float kmDistanceToHatch;
  PokemonFamilyId familyId;
  int32_t candyToEvolve;
  float kmBuddyDistance;
  PokemonSettings_BuddySize buddySize;
  float modelHeight;
  CameraAttributes *camera;
  EncounterAttributes *encounter;
  StatsAttributes *stats;
  GPBEnumArray *quickMovesArray;
  GPBEnumArray *cinematicMovesArray;
  GPBFloatArray *animationTimeArray;
  GPBEnumArray *evolutionIdsArray;
  NSMutableArray *evolutionBranchArray;
} PokemonSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pokemonId",
        .dataTypeSpecific.enumDescFunc = PokemonId_EnumDescriptor,
        .number = PokemonSettings_FieldNumber_PokemonId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, pokemonId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "modelScale",
        .dataTypeSpecific.className = NULL,
        .number = PokemonSettings_FieldNumber_ModelScale,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, modelScale),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PokemonType_EnumDescriptor,
        .number = PokemonSettings_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "type2",
        .dataTypeSpecific.enumDescFunc = PokemonType_EnumDescriptor,
        .number = PokemonSettings_FieldNumber_Type2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, type2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "camera",
        .dataTypeSpecific.className = GPBStringifySymbol(CameraAttributes),
        .number = PokemonSettings_FieldNumber_Camera,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, camera),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "encounter",
        .dataTypeSpecific.className = GPBStringifySymbol(EncounterAttributes),
        .number = PokemonSettings_FieldNumber_Encounter,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, encounter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stats",
        .dataTypeSpecific.className = GPBStringifySymbol(StatsAttributes),
        .number = PokemonSettings_FieldNumber_Stats,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, stats),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "quickMovesArray",
        .dataTypeSpecific.enumDescFunc = PokemonMove_EnumDescriptor,
        .number = PokemonSettings_FieldNumber_QuickMovesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, quickMovesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cinematicMovesArray",
        .dataTypeSpecific.enumDescFunc = PokemonMove_EnumDescriptor,
        .number = PokemonSettings_FieldNumber_CinematicMovesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, cinematicMovesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "animationTimeArray",
        .dataTypeSpecific.className = NULL,
        .number = PokemonSettings_FieldNumber_AnimationTimeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, animationTimeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "evolutionIdsArray",
        .dataTypeSpecific.enumDescFunc = PokemonId_EnumDescriptor,
        .number = PokemonSettings_FieldNumber_EvolutionIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, evolutionIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "evolutionPips",
        .dataTypeSpecific.className = NULL,
        .number = PokemonSettings_FieldNumber_EvolutionPips,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, evolutionPips),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rarity",
        .dataTypeSpecific.enumDescFunc = PokemonRarity_EnumDescriptor,
        .number = PokemonSettings_FieldNumber_Rarity,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, rarity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "pokedexHeightM",
        .dataTypeSpecific.className = NULL,
        .number = PokemonSettings_FieldNumber_PokedexHeightM,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, pokedexHeightM),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "pokedexWeightKg",
        .dataTypeSpecific.className = NULL,
        .number = PokemonSettings_FieldNumber_PokedexWeightKg,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, pokedexWeightKg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "parentPokemonId",
        .dataTypeSpecific.enumDescFunc = PokemonId_EnumDescriptor,
        .number = PokemonSettings_FieldNumber_ParentPokemonId,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, parentPokemonId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "heightStdDev",
        .dataTypeSpecific.className = NULL,
        .number = PokemonSettings_FieldNumber_HeightStdDev,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, heightStdDev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "weightStdDev",
        .dataTypeSpecific.className = NULL,
        .number = PokemonSettings_FieldNumber_WeightStdDev,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, weightStdDev),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "kmDistanceToHatch",
        .dataTypeSpecific.className = NULL,
        .number = PokemonSettings_FieldNumber_KmDistanceToHatch,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, kmDistanceToHatch),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "familyId",
        .dataTypeSpecific.enumDescFunc = PokemonFamilyId_EnumDescriptor,
        .number = PokemonSettings_FieldNumber_FamilyId,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, familyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "candyToEvolve",
        .dataTypeSpecific.className = NULL,
        .number = PokemonSettings_FieldNumber_CandyToEvolve,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, candyToEvolve),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "kmBuddyDistance",
        .dataTypeSpecific.className = NULL,
        .number = PokemonSettings_FieldNumber_KmBuddyDistance,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, kmBuddyDistance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "buddySize",
        .dataTypeSpecific.enumDescFunc = PokemonSettings_BuddySize_EnumDescriptor,
        .number = PokemonSettings_FieldNumber_BuddySize,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, buddySize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "modelHeight",
        .dataTypeSpecific.className = NULL,
        .number = PokemonSettings_FieldNumber_ModelHeight,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, modelHeight),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "evolutionBranchArray",
        .dataTypeSpecific.className = GPBStringifySymbol(EvolutionBranch),
        .number = PokemonSettings_FieldNumber_EvolutionBranchArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PokemonSettings__storage_, evolutionBranchArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PokemonSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PokemonSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005\004\201\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PokemonSettings_PokemonId_RawValue(PokemonSettings *message) {
  GPBDescriptor *descriptor = [PokemonSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonSettings_FieldNumber_PokemonId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPokemonSettings_PokemonId_RawValue(PokemonSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [PokemonSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonSettings_FieldNumber_PokemonId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PokemonSettings_Type_RawValue(PokemonSettings *message) {
  GPBDescriptor *descriptor = [PokemonSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonSettings_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPokemonSettings_Type_RawValue(PokemonSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [PokemonSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonSettings_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PokemonSettings_Type2_RawValue(PokemonSettings *message) {
  GPBDescriptor *descriptor = [PokemonSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonSettings_FieldNumber_Type2];
  return GPBGetMessageInt32Field(message, field);
}

void SetPokemonSettings_Type2_RawValue(PokemonSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [PokemonSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonSettings_FieldNumber_Type2];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PokemonSettings_Rarity_RawValue(PokemonSettings *message) {
  GPBDescriptor *descriptor = [PokemonSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonSettings_FieldNumber_Rarity];
  return GPBGetMessageInt32Field(message, field);
}

void SetPokemonSettings_Rarity_RawValue(PokemonSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [PokemonSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonSettings_FieldNumber_Rarity];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PokemonSettings_ParentPokemonId_RawValue(PokemonSettings *message) {
  GPBDescriptor *descriptor = [PokemonSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonSettings_FieldNumber_ParentPokemonId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPokemonSettings_ParentPokemonId_RawValue(PokemonSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [PokemonSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonSettings_FieldNumber_ParentPokemonId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PokemonSettings_FamilyId_RawValue(PokemonSettings *message) {
  GPBDescriptor *descriptor = [PokemonSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonSettings_FieldNumber_FamilyId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPokemonSettings_FamilyId_RawValue(PokemonSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [PokemonSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonSettings_FieldNumber_FamilyId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PokemonSettings_BuddySize_RawValue(PokemonSettings *message) {
  GPBDescriptor *descriptor = [PokemonSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonSettings_FieldNumber_BuddySize];
  return GPBGetMessageInt32Field(message, field);
}

void SetPokemonSettings_BuddySize_RawValue(PokemonSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [PokemonSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PokemonSettings_FieldNumber_BuddySize];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum PokemonSettings_BuddySize

GPBEnumDescriptor *PokemonSettings_BuddySize_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "BuddyMedium\000BuddyShoulder\000BuddyBig\000Buddy"
        "Flying\000BuddyBaby\000";
    static const int32_t values[] = {
        PokemonSettings_BuddySize_BuddyMedium,
        PokemonSettings_BuddySize_BuddyShoulder,
        PokemonSettings_BuddySize_BuddyBig,
        PokemonSettings_BuddySize_BuddyFlying,
        PokemonSettings_BuddySize_BuddyBaby,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PokemonSettings_BuddySize)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PokemonSettings_BuddySize_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PokemonSettings_BuddySize_IsValidValue(int32_t value__) {
  switch (value__) {
    case PokemonSettings_BuddySize_BuddyMedium:
    case PokemonSettings_BuddySize_BuddyShoulder:
    case PokemonSettings_BuddySize_BuddyBig:
    case PokemonSettings_BuddySize_BuddyFlying:
    case PokemonSettings_BuddySize_BuddyBaby:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PokemonUpgradeSettings

@implementation PokemonUpgradeSettings

@dynamic upgradesPerLevel;
@dynamic allowedLevelsAbovePlayer;
@dynamic candyCostArray, candyCostArray_Count;
@dynamic stardustCostArray, stardustCostArray_Count;

typedef struct PokemonUpgradeSettings__storage_ {
  uint32_t _has_storage_[1];
  int32_t upgradesPerLevel;
  int32_t allowedLevelsAbovePlayer;
  GPBInt32Array *candyCostArray;
  GPBInt32Array *stardustCostArray;
} PokemonUpgradeSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "upgradesPerLevel",
        .dataTypeSpecific.className = NULL,
        .number = PokemonUpgradeSettings_FieldNumber_UpgradesPerLevel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PokemonUpgradeSettings__storage_, upgradesPerLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "allowedLevelsAbovePlayer",
        .dataTypeSpecific.className = NULL,
        .number = PokemonUpgradeSettings_FieldNumber_AllowedLevelsAbovePlayer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PokemonUpgradeSettings__storage_, allowedLevelsAbovePlayer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "candyCostArray",
        .dataTypeSpecific.className = NULL,
        .number = PokemonUpgradeSettings_FieldNumber_CandyCostArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PokemonUpgradeSettings__storage_, candyCostArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "stardustCostArray",
        .dataTypeSpecific.className = NULL,
        .number = PokemonUpgradeSettings_FieldNumber_StardustCostArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PokemonUpgradeSettings__storage_, stardustCostArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PokemonUpgradeSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PokemonUpgradeSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QuestSettings

@implementation QuestSettings

@dynamic questType;
@dynamic hasDailyQuest, dailyQuest;

typedef struct QuestSettings__storage_ {
  uint32_t _has_storage_[1];
  QuestType questType;
  DailyQuestSettings *dailyQuest;
} QuestSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "questType",
        .dataTypeSpecific.enumDescFunc = QuestType_EnumDescriptor,
        .number = QuestSettings_FieldNumber_QuestType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QuestSettings__storage_, questType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "dailyQuest",
        .dataTypeSpecific.className = GPBStringifySymbol(DailyQuestSettings),
        .number = QuestSettings_FieldNumber_DailyQuest,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QuestSettings__storage_, dailyQuest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QuestSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QuestSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t QuestSettings_QuestType_RawValue(QuestSettings *message) {
  GPBDescriptor *descriptor = [QuestSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QuestSettings_FieldNumber_QuestType];
  return GPBGetMessageInt32Field(message, field);
}

void SetQuestSettings_QuestType_RawValue(QuestSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [QuestSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QuestSettings_FieldNumber_QuestType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - TypeEffectiveSettings

@implementation TypeEffectiveSettings

@dynamic attackScalarArray, attackScalarArray_Count;
@dynamic attackType;

typedef struct TypeEffectiveSettings__storage_ {
  uint32_t _has_storage_[1];
  PokemonType attackType;
  GPBFloatArray *attackScalarArray;
} TypeEffectiveSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "attackScalarArray",
        .dataTypeSpecific.className = NULL,
        .number = TypeEffectiveSettings_FieldNumber_AttackScalarArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TypeEffectiveSettings__storage_, attackScalarArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "attackType",
        .dataTypeSpecific.enumDescFunc = PokemonType_EnumDescriptor,
        .number = TypeEffectiveSettings_FieldNumber_AttackType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TypeEffectiveSettings__storage_, attackType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TypeEffectiveSettings class]
                                     rootClass:[PogoprotosSettingsMasterRoot class]
                                          file:PogoprotosSettingsMasterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TypeEffectiveSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t TypeEffectiveSettings_AttackType_RawValue(TypeEffectiveSettings *message) {
  GPBDescriptor *descriptor = [TypeEffectiveSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TypeEffectiveSettings_FieldNumber_AttackType];
  return GPBGetMessageInt32Field(message, field);
}

void SetTypeEffectiveSettings_AttackType_RawValue(TypeEffectiveSettings *message, int32_t value) {
  GPBDescriptor *descriptor = [TypeEffectiveSettings descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TypeEffectiveSettings_FieldNumber_AttackType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
